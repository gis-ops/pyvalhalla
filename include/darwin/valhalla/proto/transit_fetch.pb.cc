// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit_fetch.proto

#include "transit_fetch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace valhalla {
namespace mjolnir {
constexpr Transit_Fetch_Stop::Transit_Fetch_Stop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timezone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lon_(0)
  , lat_(0)
  , graphid_(uint64_t{0u})
  , osm_way_id_(uint64_t{0u})
  , wheelchair_boarding_(false){}
struct Transit_Fetch_StopDefaultTypeInternal {
  constexpr Transit_Fetch_StopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transit_Fetch_StopDefaultTypeInternal() {}
  union {
    Transit_Fetch_Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transit_Fetch_StopDefaultTypeInternal _Transit_Fetch_Stop_default_instance_;
constexpr Transit_Fetch_StopPair::Transit_Fetch_StopPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_added_dates_()
  , service_days_of_week_()
  , service_except_dates_()
  , destination_onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operated_by_onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trip_headsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(0u)
  , destination_arrival_time_(0u)
  , destination_graphid_(uint64_t{0u})
  , origin_graphid_(uint64_t{0u})
  , origin_departure_time_(0u)
  , bikes_allowed_(false)
  , wheelchair_accessible_(false)
  , route_index_(0u)
  , service_end_date_(0u)
  , service_start_date_(0u)
  , trip_id_(0u)
  , shape_id_(0u)
  , origin_dist_traveled_(0)
  , destination_dist_traveled_(0)
  , frequency_end_time_(0u)
  , frequency_headway_seconds_(0u){}
struct Transit_Fetch_StopPairDefaultTypeInternal {
  constexpr Transit_Fetch_StopPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transit_Fetch_StopPairDefaultTypeInternal() {}
  union {
    Transit_Fetch_StopPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transit_Fetch_StopPairDefaultTypeInternal _Transit_Fetch_StopPair_default_instance_;
constexpr Transit_Fetch_Route::Transit_Fetch_Route(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operated_by_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operated_by_onestop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operated_by_website_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_long_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_color_(0u)
  , route_text_color_(0u)
  , vehicle_type_(0)
{}
struct Transit_Fetch_RouteDefaultTypeInternal {
  constexpr Transit_Fetch_RouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transit_Fetch_RouteDefaultTypeInternal() {}
  union {
    Transit_Fetch_Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transit_Fetch_RouteDefaultTypeInternal _Transit_Fetch_Route_default_instance_;
constexpr Transit_Fetch_Shape::Transit_Fetch_Shape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_shape_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_id_(0u){}
struct Transit_Fetch_ShapeDefaultTypeInternal {
  constexpr Transit_Fetch_ShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transit_Fetch_ShapeDefaultTypeInternal() {}
  union {
    Transit_Fetch_Shape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transit_Fetch_ShapeDefaultTypeInternal _Transit_Fetch_Shape_default_instance_;
constexpr Transit_Fetch::Transit_Fetch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , stop_pairs_()
  , routes_()
  , shapes_(){}
struct Transit_FetchDefaultTypeInternal {
  constexpr Transit_FetchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Transit_FetchDefaultTypeInternal() {}
  union {
    Transit_Fetch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Transit_FetchDefaultTypeInternal _Transit_Fetch_default_instance_;
}  // namespace mjolnir
}  // namespace valhalla
namespace valhalla {
namespace mjolnir {
bool Transit_Fetch_VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Transit_Fetch_VehicleType_strings[8] = {};

static const char Transit_Fetch_VehicleType_names[] =
  "kBus"
  "kCableCar"
  "kFerry"
  "kFunicular"
  "kGondola"
  "kMetro"
  "kRail"
  "kTram";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Transit_Fetch_VehicleType_entries[] = {
  { {Transit_Fetch_VehicleType_names + 0, 4}, 3 },
  { {Transit_Fetch_VehicleType_names + 4, 9}, 5 },
  { {Transit_Fetch_VehicleType_names + 13, 6}, 4 },
  { {Transit_Fetch_VehicleType_names + 19, 10}, 7 },
  { {Transit_Fetch_VehicleType_names + 29, 8}, 6 },
  { {Transit_Fetch_VehicleType_names + 37, 6}, 1 },
  { {Transit_Fetch_VehicleType_names + 43, 5}, 2 },
  { {Transit_Fetch_VehicleType_names + 48, 5}, 0 },
};

static const int Transit_Fetch_VehicleType_entries_by_number[] = {
  7, // 0 -> kTram
  5, // 1 -> kMetro
  6, // 2 -> kRail
  0, // 3 -> kBus
  2, // 4 -> kFerry
  1, // 5 -> kCableCar
  4, // 6 -> kGondola
  3, // 7 -> kFunicular
};

const std::string& Transit_Fetch_VehicleType_Name(
    Transit_Fetch_VehicleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Transit_Fetch_VehicleType_entries,
          Transit_Fetch_VehicleType_entries_by_number,
          8, Transit_Fetch_VehicleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Transit_Fetch_VehicleType_entries,
      Transit_Fetch_VehicleType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Transit_Fetch_VehicleType_strings[idx].get();
}
bool Transit_Fetch_VehicleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transit_Fetch_VehicleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Transit_Fetch_VehicleType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Transit_Fetch_VehicleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transit_Fetch_VehicleType Transit_Fetch::kTram;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kMetro;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kRail;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kBus;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kFerry;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kCableCar;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kGondola;
constexpr Transit_Fetch_VehicleType Transit_Fetch::kFunicular;
constexpr Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MIN;
constexpr Transit_Fetch_VehicleType Transit_Fetch::VehicleType_MAX;
constexpr int Transit_Fetch::VehicleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Transit_Fetch_Stop::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Stop>()._has_bits_);
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_osm_way_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelchair_boarding(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Transit_Fetch_Stop::Transit_Fetch_Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}
Transit_Fetch_Stop::Transit_Fetch_Stop(const Transit_Fetch_Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onestop_id()) {
    onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_onestop_id(), 
      GetArenaForAllocation());
  }
  timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timezone()) {
    timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timezone(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelchair_boarding_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(wheelchair_boarding_));
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Stop)
}

inline void Transit_Fetch_Stop::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wheelchair_boarding_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(wheelchair_boarding_));
}

Transit_Fetch_Stop::~Transit_Fetch_Stop() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Stop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transit_Fetch_Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transit_Fetch_Stop::ArenaDtor(void* object) {
  Transit_Fetch_Stop* _this = reinterpret_cast< Transit_Fetch_Stop* >(object);
  (void)_this;
}
void Transit_Fetch_Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transit_Fetch_Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transit_Fetch_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      timezone_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&lon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheelchair_boarding_) -
        reinterpret_cast<char*>(&lon_)) + sizeof(wheelchair_boarding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float lon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 graphid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_graphid(&has_bits);
          graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onestop_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 osm_way_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_osm_way_id(&has_bits);
          osm_way_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timezone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wheelchair_boarding = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wheelchair_boarding(&has_bits);
          wheelchair_boarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit_Fetch_Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float lon = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lon(), target);
  }

  // optional float lat = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lat(), target);
  }

  // optional uint64 graphid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_graphid(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string onestop_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_onestop_id(), target);
  }

  // optional uint64 osm_way_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_osm_way_id(), target);
  }

  // optional string timezone = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_timezone(), target);
  }

  // optional bool wheelchair_boarding = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_wheelchair_boarding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Stop)
  return target;
}

size_t Transit_Fetch_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string onestop_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onestop_id());
    }

    // optional string timezone = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timezone());
    }

    // optional float lon = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float lat = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint64 graphid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_graphid());
    }

    // optional uint64 osm_way_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_osm_way_id());
    }

    // optional bool wheelchair_boarding = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Stop::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transit_Fetch_Stop*>(
      &from));
}

void Transit_Fetch_Stop::MergeFrom(const Transit_Fetch_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_timezone(from._internal_timezone());
    }
    if (cached_has_bits & 0x00000008u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000020u) {
      graphid_ = from.graphid_;
    }
    if (cached_has_bits & 0x00000040u) {
      osm_way_id_ = from.osm_way_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheelchair_boarding_ = from.wheelchair_boarding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Stop::CopyFrom(const Transit_Fetch_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Stop::IsInitialized() const {
  return true;
}

void Transit_Fetch_Stop::InternalSwap(Transit_Fetch_Stop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &onestop_id_, GetArenaForAllocation(),
      &other->onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timezone_, GetArenaForAllocation(),
      &other->timezone_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, wheelchair_boarding_)
      + sizeof(Transit_Fetch_Stop::wheelchair_boarding_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_Stop, lon_)>(
          reinterpret_cast<char*>(&lon_),
          reinterpret_cast<char*>(&other->lon_));
}

std::string Transit_Fetch_Stop::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Stop";
}


// ===================================================================

class Transit_Fetch_StopPair::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_StopPair>()._has_bits_);
  static void set_has_bikes_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_destination_arrival_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_destination_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_destination_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operated_by_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_departure_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_origin_graphid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_origin_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_route_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_service_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_service_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trip_headsign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trip_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_wheelchair_accessible(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_origin_dist_traveled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_destination_dist_traveled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_frequency_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_frequency_headway_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

Transit_Fetch_StopPair::Transit_Fetch_StopPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  service_added_dates_(arena),
  service_days_of_week_(arena),
  service_except_dates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}
Transit_Fetch_StopPair::Transit_Fetch_StopPair(const Transit_Fetch_StopPair& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      service_added_dates_(from.service_added_dates_),
      service_days_of_week_(from.service_days_of_week_),
      service_except_dates_(from.service_except_dates_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  destination_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination_onestop_id()) {
    destination_onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination_onestop_id(), 
      GetArenaForAllocation());
  }
  operated_by_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operated_by_onestop_id()) {
    operated_by_onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operated_by_onestop_id(), 
      GetArenaForAllocation());
  }
  origin_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_origin_onestop_id()) {
    origin_onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_origin_onestop_id(), 
      GetArenaForAllocation());
  }
  trip_headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trip_headsign()) {
    trip_headsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trip_headsign(), 
      GetArenaForAllocation());
  }
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_headway_seconds_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(frequency_headway_seconds_));
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.StopPair)
}

inline void Transit_Fetch_StopPair::SharedCtor() {
destination_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operated_by_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
origin_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trip_headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frequency_headway_seconds_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(frequency_headway_seconds_));
}

Transit_Fetch_StopPair::~Transit_Fetch_StopPair() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.StopPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transit_Fetch_StopPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  destination_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trip_headsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transit_Fetch_StopPair::ArenaDtor(void* object) {
  Transit_Fetch_StopPair* _this = reinterpret_cast< Transit_Fetch_StopPair* >(object);
  (void)_this;
}
void Transit_Fetch_StopPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transit_Fetch_StopPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transit_Fetch_StopPair::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_added_dates_.Clear();
  service_days_of_week_.Clear();
  service_except_dates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      destination_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      origin_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      trip_headsign_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&block_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_graphid_) -
        reinterpret_cast<char*>(&block_id_)) + sizeof(origin_graphid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&origin_departure_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shape_id_) -
        reinterpret_cast<char*>(&origin_departure_time_)) + sizeof(shape_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&origin_dist_traveled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frequency_headway_seconds_) -
        reinterpret_cast<char*>(&origin_dist_traveled_)) + sizeof(frequency_headway_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_StopPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bikes_allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bikes_allowed(&has_bits);
          bikes_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_block_id(&has_bits);
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 destination_arrival_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_destination_arrival_time(&has_bits);
          destination_arrival_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 destination_graphid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_destination_graphid(&has_bits);
          destination_graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string destination_onestop_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_destination_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operated_by_onestop_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_operated_by_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin_departure_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_origin_departure_time(&has_bits);
          origin_departure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 origin_graphid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_origin_graphid(&has_bits);
          origin_graphid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string origin_onestop_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_origin_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 route_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_route_index(&has_bits);
          route_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_added_dates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_added_dates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_added_dates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool service_days_of_week = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_days_of_week(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_service_days_of_week(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_end_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_service_end_date(&has_bits);
          service_end_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_except_dates = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_except_dates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_except_dates(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_start_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_service_start_date(&has_bits);
          service_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trip_headsign = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_trip_headsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trip_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_trip_id(&has_bits);
          trip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wheelchair_accessible = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_wheelchair_accessible(&has_bits);
          wheelchair_accessible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shape_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_shape_id(&has_bits);
          shape_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float origin_dist_traveled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_origin_dist_traveled(&has_bits);
          origin_dist_traveled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float destination_dist_traveled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_destination_dist_traveled(&has_bits);
          destination_dist_traveled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 frequency_end_time = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_frequency_end_time(&has_bits);
          frequency_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 frequency_headway_seconds = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_frequency_headway_seconds(&has_bits);
          frequency_headway_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit_Fetch_StopPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bikes_allowed = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bikes_allowed(), target);
  }

  // optional uint32 block_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  // optional uint32 destination_arrival_time = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destination_arrival_time(), target);
  }

  // optional uint64 destination_graphid = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_destination_graphid(), target);
  }

  // optional string destination_onestop_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_destination_onestop_id(), target);
  }

  // optional string operated_by_onestop_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_operated_by_onestop_id(), target);
  }

  // optional uint32 origin_departure_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_origin_departure_time(), target);
  }

  // optional uint64 origin_graphid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_origin_graphid(), target);
  }

  // optional string origin_onestop_id = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_origin_onestop_id(), target);
  }

  // optional uint32 route_index = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_route_index(), target);
  }

  // repeated uint32 service_added_dates = 11;
  for (int i = 0, n = this->_internal_service_added_dates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_service_added_dates(i), target);
  }

  // repeated bool service_days_of_week = 12;
  for (int i = 0, n = this->_internal_service_days_of_week_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_service_days_of_week(i), target);
  }

  // optional uint32 service_end_date = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_service_end_date(), target);
  }

  // repeated uint32 service_except_dates = 14;
  for (int i = 0, n = this->_internal_service_except_dates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_service_except_dates(i), target);
  }

  // optional uint32 service_start_date = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_service_start_date(), target);
  }

  // optional string trip_headsign = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_trip_headsign(), target);
  }

  // optional uint32 trip_id = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_trip_id(), target);
  }

  // optional bool wheelchair_accessible = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_wheelchair_accessible(), target);
  }

  // optional uint32 shape_id = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_shape_id(), target);
  }

  // optional float origin_dist_traveled = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_origin_dist_traveled(), target);
  }

  // optional float destination_dist_traveled = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_destination_dist_traveled(), target);
  }

  // optional uint32 frequency_end_time = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_frequency_end_time(), target);
  }

  // optional uint32 frequency_headway_seconds = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_frequency_headway_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.StopPair)
  return target;
}

size_t Transit_Fetch_StopPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_added_dates = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_added_dates_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_added_dates_size());
    total_size += data_size;
  }

  // repeated bool service_days_of_week = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_service_days_of_week_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_days_of_week_size());
    total_size += data_size;
  }

  // repeated uint32 service_except_dates = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_except_dates_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_except_dates_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string destination_onestop_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_onestop_id());
    }

    // optional string operated_by_onestop_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operated_by_onestop_id());
    }

    // optional string origin_onestop_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin_onestop_id());
    }

    // optional string trip_headsign = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trip_headsign());
    }

    // optional uint32 block_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_block_id());
    }

    // optional uint32 destination_arrival_time = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destination_arrival_time());
    }

    // optional uint64 destination_graphid = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_destination_graphid());
    }

    // optional uint64 origin_graphid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_origin_graphid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 origin_departure_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin_departure_time());
    }

    // optional bool bikes_allowed = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool wheelchair_accessible = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 route_index = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_route_index());
    }

    // optional uint32 service_end_date = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_end_date());
    }

    // optional uint32 service_start_date = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_start_date());
    }

    // optional uint32 trip_id = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trip_id());
    }

    // optional uint32 shape_id = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shape_id());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float origin_dist_traveled = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float destination_dist_traveled = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 frequency_end_time = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_frequency_end_time());
    }

    // optional uint32 frequency_headway_seconds = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_frequency_headway_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_StopPair::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transit_Fetch_StopPair*>(
      &from));
}

void Transit_Fetch_StopPair::MergeFrom(const Transit_Fetch_StopPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_added_dates_.MergeFrom(from.service_added_dates_);
  service_days_of_week_.MergeFrom(from.service_days_of_week_);
  service_except_dates_.MergeFrom(from.service_except_dates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_destination_onestop_id(from._internal_destination_onestop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_origin_onestop_id(from._internal_origin_onestop_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_trip_headsign(from._internal_trip_headsign());
    }
    if (cached_has_bits & 0x00000010u) {
      block_id_ = from.block_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      destination_arrival_time_ = from.destination_arrival_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      destination_graphid_ = from.destination_graphid_;
    }
    if (cached_has_bits & 0x00000080u) {
      origin_graphid_ = from.origin_graphid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      origin_departure_time_ = from.origin_departure_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      bikes_allowed_ = from.bikes_allowed_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheelchair_accessible_ = from.wheelchair_accessible_;
    }
    if (cached_has_bits & 0x00000800u) {
      route_index_ = from.route_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      service_end_date_ = from.service_end_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      service_start_date_ = from.service_start_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      trip_id_ = from.trip_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      shape_id_ = from.shape_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      origin_dist_traveled_ = from.origin_dist_traveled_;
    }
    if (cached_has_bits & 0x00020000u) {
      destination_dist_traveled_ = from.destination_dist_traveled_;
    }
    if (cached_has_bits & 0x00040000u) {
      frequency_end_time_ = from.frequency_end_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      frequency_headway_seconds_ = from.frequency_headway_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_StopPair::CopyFrom(const Transit_Fetch_StopPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.StopPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_StopPair::IsInitialized() const {
  return true;
}

void Transit_Fetch_StopPair::InternalSwap(Transit_Fetch_StopPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_added_dates_.InternalSwap(&other->service_added_dates_);
  service_days_of_week_.InternalSwap(&other->service_days_of_week_);
  service_except_dates_.InternalSwap(&other->service_except_dates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_onestop_id_, GetArenaForAllocation(),
      &other->destination_onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operated_by_onestop_id_, GetArenaForAllocation(),
      &other->operated_by_onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &origin_onestop_id_, GetArenaForAllocation(),
      &other->origin_onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trip_headsign_, GetArenaForAllocation(),
      &other->trip_headsign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, frequency_headway_seconds_)
      + sizeof(Transit_Fetch_StopPair::frequency_headway_seconds_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_StopPair, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

std::string Transit_Fetch_StopPair::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.StopPair";
}


// ===================================================================

class Transit_Fetch_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Route>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operated_by_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operated_by_onestop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operated_by_website(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_route_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_route_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_route_long_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_route_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vehicle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Transit_Fetch_Route::Transit_Fetch_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Route)
}
Transit_Fetch_Route::Transit_Fetch_Route(const Transit_Fetch_Route& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onestop_id()) {
    onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_onestop_id(), 
      GetArenaForAllocation());
  }
  operated_by_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operated_by_name()) {
    operated_by_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operated_by_name(), 
      GetArenaForAllocation());
  }
  operated_by_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operated_by_onestop_id()) {
    operated_by_onestop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operated_by_onestop_id(), 
      GetArenaForAllocation());
  }
  operated_by_website_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_operated_by_website()) {
    operated_by_website_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operated_by_website(), 
      GetArenaForAllocation());
  }
  route_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_route_desc()) {
    route_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route_desc(), 
      GetArenaForAllocation());
  }
  route_long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_route_long_name()) {
    route_long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route_long_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&route_color_, &from.route_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_type_) -
    reinterpret_cast<char*>(&route_color_)) + sizeof(vehicle_type_));
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Route)
}

inline void Transit_Fetch_Route::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operated_by_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operated_by_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operated_by_website_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
route_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
route_long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&route_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vehicle_type_) -
    reinterpret_cast<char*>(&route_color_)) + sizeof(vehicle_type_));
}

Transit_Fetch_Route::~Transit_Fetch_Route() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Route)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transit_Fetch_Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operated_by_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operated_by_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operated_by_website_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_long_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transit_Fetch_Route::ArenaDtor(void* object) {
  Transit_Fetch_Route* _this = reinterpret_cast< Transit_Fetch_Route* >(object);
  (void)_this;
}
void Transit_Fetch_Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transit_Fetch_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transit_Fetch_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      operated_by_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      operated_by_website_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      route_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      route_long_name_.ClearNonDefaultToEmpty();
    }
  }
  route_color_ = 0u;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&route_text_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_type_) -
        reinterpret_cast<char*>(&route_text_color_)) + sizeof(vehicle_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onestop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operated_by_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_operated_by_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operated_by_onestop_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_operated_by_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string operated_by_website = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_operated_by_website();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 route_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_route_color(&has_bits);
          route_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string route_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_route_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string route_long_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_route_long_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 route_text_color = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_route_text_color(&has_bits);
          route_text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::valhalla::mjolnir::Transit_Fetch_VehicleType_IsValid(val))) {
            _internal_set_vehicle_type(static_cast<::valhalla::mjolnir::Transit_Fetch_VehicleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit_Fetch_Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string onestop_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_onestop_id(), target);
  }

  // optional string operated_by_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_operated_by_name(), target);
  }

  // optional string operated_by_onestop_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_operated_by_onestop_id(), target);
  }

  // optional string operated_by_website = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_operated_by_website(), target);
  }

  // optional uint32 route_color = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_route_color(), target);
  }

  // optional string route_desc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_route_desc(), target);
  }

  // optional string route_long_name = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_route_long_name(), target);
  }

  // optional uint32 route_text_color = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_route_text_color(), target);
  }

  // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_vehicle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Route)
  return target;
}

size_t Transit_Fetch_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string onestop_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onestop_id());
    }

    // optional string operated_by_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operated_by_name());
    }

    // optional string operated_by_onestop_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operated_by_onestop_id());
    }

    // optional string operated_by_website = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_operated_by_website());
    }

    // optional string route_desc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_desc());
    }

    // optional string route_long_name = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route_long_name());
    }

    // optional uint32 route_color = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_route_color());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 route_text_color = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_route_text_color());
    }

    // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicle_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Route::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transit_Fetch_Route*>(
      &from));
}

void Transit_Fetch_Route::MergeFrom(const Transit_Fetch_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_operated_by_name(from._internal_operated_by_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_operated_by_website(from._internal_operated_by_website());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_route_desc(from._internal_route_desc());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_route_long_name(from._internal_route_long_name());
    }
    if (cached_has_bits & 0x00000080u) {
      route_color_ = from.route_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      route_text_color_ = from.route_text_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      vehicle_type_ = from.vehicle_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Route::CopyFrom(const Transit_Fetch_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Route::IsInitialized() const {
  return true;
}

void Transit_Fetch_Route::InternalSwap(Transit_Fetch_Route* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &onestop_id_, GetArenaForAllocation(),
      &other->onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operated_by_name_, GetArenaForAllocation(),
      &other->operated_by_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operated_by_onestop_id_, GetArenaForAllocation(),
      &other->operated_by_onestop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operated_by_website_, GetArenaForAllocation(),
      &other->operated_by_website_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_desc_, GetArenaForAllocation(),
      &other->route_desc_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_long_name_, GetArenaForAllocation(),
      &other->route_long_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, vehicle_type_)
      + sizeof(Transit_Fetch_Route::vehicle_type_)
      - PROTOBUF_FIELD_OFFSET(Transit_Fetch_Route, route_color_)>(
          reinterpret_cast<char*>(&route_color_),
          reinterpret_cast<char*>(&other->route_color_));
}

std::string Transit_Fetch_Route::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Route";
}


// ===================================================================

class Transit_Fetch_Shape::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit_Fetch_Shape>()._has_bits_);
  static void set_has_shape_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encoded_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Transit_Fetch_Shape::Transit_Fetch_Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}
Transit_Fetch_Shape::Transit_Fetch_Shape(const Transit_Fetch_Shape& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  encoded_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoded_shape()) {
    encoded_shape_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_shape(), 
      GetArenaForAllocation());
  }
  shape_id_ = from.shape_id_;
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch.Shape)
}

inline void Transit_Fetch_Shape::SharedCtor() {
encoded_shape_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shape_id_ = 0u;
}

Transit_Fetch_Shape::~Transit_Fetch_Shape() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch.Shape)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transit_Fetch_Shape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_shape_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transit_Fetch_Shape::ArenaDtor(void* object) {
  Transit_Fetch_Shape* _this = reinterpret_cast< Transit_Fetch_Shape* >(object);
  (void)_this;
}
void Transit_Fetch_Shape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transit_Fetch_Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transit_Fetch_Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encoded_shape_.ClearNonDefaultToEmpty();
  }
  shape_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch_Shape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 shape_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shape_id(&has_bits);
          shape_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encoded_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encoded_shape();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit_Fetch_Shape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch.Shape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 shape_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shape_id(), target);
  }

  // optional bytes encoded_shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encoded_shape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch.Shape)
  return target;
}

size_t Transit_Fetch_Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch.Shape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encoded_shape = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encoded_shape());
    }

    // optional uint32 shape_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shape_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch_Shape::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transit_Fetch_Shape*>(
      &from));
}

void Transit_Fetch_Shape::MergeFrom(const Transit_Fetch_Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encoded_shape(from._internal_encoded_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      shape_id_ = from.shape_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch_Shape::CopyFrom(const Transit_Fetch_Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch_Shape::IsInitialized() const {
  return true;
}

void Transit_Fetch_Shape::InternalSwap(Transit_Fetch_Shape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_shape_, GetArenaForAllocation(),
      &other->encoded_shape_, other->GetArenaForAllocation()
  );
  swap(shape_id_, other->shape_id_);
}

std::string Transit_Fetch_Shape::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch.Shape";
}


// ===================================================================

class Transit_Fetch::_Internal {
 public:
};

Transit_Fetch::Transit_Fetch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  stops_(arena),
  stop_pairs_(arena),
  routes_(arena),
  shapes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit_Fetch)
}
Transit_Fetch::Transit_Fetch(const Transit_Fetch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      stops_(from.stops_),
      stop_pairs_(from.stop_pairs_),
      routes_(from.routes_),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit_Fetch)
}

inline void Transit_Fetch::SharedCtor() {
}

Transit_Fetch::~Transit_Fetch() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit_Fetch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Transit_Fetch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Transit_Fetch::ArenaDtor(void* object) {
  Transit_Fetch* _this = reinterpret_cast< Transit_Fetch* >(object);
  (void)_this;
}
void Transit_Fetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transit_Fetch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transit_Fetch::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit_Fetch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  stop_pairs_.Clear();
  routes_.Clear();
  shapes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Transit_Fetch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit_Fetch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit_Fetch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stop_pairs(i), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routes(i), target, stream);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit_Fetch)
  return target;
}

size_t Transit_Fetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit_Fetch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  total_size += 1UL * this->_internal_stop_pairs_size();
  for (const auto& msg : this->stop_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit_Fetch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transit_Fetch*>(
      &from));
}

void Transit_Fetch::MergeFrom(const Transit_Fetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit_Fetch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  stop_pairs_.MergeFrom(from.stop_pairs_);
  routes_.MergeFrom(from.routes_);
  shapes_.MergeFrom(from.shapes_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Fetch::CopyFrom(const Transit_Fetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit_Fetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit_Fetch::IsInitialized() const {
  return true;
}

void Transit_Fetch::InternalSwap(Transit_Fetch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  stop_pairs_.InternalSwap(&other->stop_pairs_);
  routes_.InternalSwap(&other->routes_);
  shapes_.InternalSwap(&other->shapes_);
}

std::string Transit_Fetch::GetTypeName() const {
  return "valhalla.mjolnir.Transit_Fetch";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mjolnir
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::mjolnir::Transit_Fetch_Stop* Arena::CreateMaybeMessage< ::valhalla::mjolnir::Transit_Fetch_Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::mjolnir::Transit_Fetch_Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::mjolnir::Transit_Fetch_StopPair* Arena::CreateMaybeMessage< ::valhalla::mjolnir::Transit_Fetch_StopPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::mjolnir::Transit_Fetch_StopPair >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::mjolnir::Transit_Fetch_Route* Arena::CreateMaybeMessage< ::valhalla::mjolnir::Transit_Fetch_Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::mjolnir::Transit_Fetch_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::mjolnir::Transit_Fetch_Shape* Arena::CreateMaybeMessage< ::valhalla::mjolnir::Transit_Fetch_Shape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::mjolnir::Transit_Fetch_Shape >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::mjolnir::Transit_Fetch* Arena::CreateMaybeMessage< ::valhalla::mjolnir::Transit_Fetch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::mjolnir::Transit_Fetch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
