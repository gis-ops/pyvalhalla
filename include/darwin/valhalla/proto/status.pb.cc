// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace valhalla {
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace valhalla
namespace valhalla {

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_has_has_tiles();
  switch (from.has_has_tiles_case()) {
    case kHasTiles: {
      _internal_set_has_tiles(from._internal_has_tiles());
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_admins();
  switch (from.has_has_admins_case()) {
    case kHasAdmins: {
      _internal_set_has_admins(from._internal_has_admins());
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_timezones();
  switch (from.has_has_timezones_case()) {
    case kHasTimezones: {
      _internal_set_has_timezones(from._internal_has_timezones());
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  clear_has_has_has_live_traffic();
  switch (from.has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      _internal_set_has_live_traffic(from._internal_has_live_traffic());
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  clear_has_has_bbox();
  switch (from.has_bbox_case()) {
    case kBbox: {
      _internal_set_bbox(from._internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  clear_has_has_version();
  switch (from.has_version_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case HAS_VERSION_NOT_SET: {
      break;
    }
  }
  clear_has_has_tileset_last_modified();
  switch (from.has_tileset_last_modified_case()) {
    case kTilesetLastModified: {
      _internal_set_tileset_last_modified(from._internal_tileset_last_modified());
      break;
    }
    case HAS_TILESET_LAST_MODIFIED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.Status)
}

inline void Status::SharedCtor() {
clear_has_has_has_tiles();
clear_has_has_has_admins();
clear_has_has_has_timezones();
clear_has_has_has_live_traffic();
clear_has_has_bbox();
clear_has_has_version();
clear_has_has_tileset_last_modified();
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:valhalla.Status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_has_has_tiles()) {
    clear_has_has_tiles();
  }
  if (has_has_has_admins()) {
    clear_has_has_admins();
  }
  if (has_has_has_timezones()) {
    clear_has_has_timezones();
  }
  if (has_has_has_live_traffic()) {
    clear_has_has_live_traffic();
  }
  if (has_has_bbox()) {
    clear_has_bbox();
  }
  if (has_has_version()) {
    clear_has_version();
  }
  if (has_has_tileset_last_modified()) {
    clear_has_tileset_last_modified();
  }
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::clear_has_has_tiles() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_tiles_case()) {
    case kHasTiles: {
      // No need to clear
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_HAS_TILES_NOT_SET;
}

void Status::clear_has_has_admins() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_admins_case()) {
    case kHasAdmins: {
      // No need to clear
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_HAS_ADMINS_NOT_SET;
}

void Status::clear_has_has_timezones() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_timezones_case()) {
    case kHasTimezones: {
      // No need to clear
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_HAS_TIMEZONES_NOT_SET;
}

void Status::clear_has_has_live_traffic() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      // No need to clear
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_HAS_LIVE_TRAFFIC_NOT_SET;
}

void Status::clear_has_bbox() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_bbox_case()) {
    case kBbox: {
      has_bbox_.bbox_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_BBOX_NOT_SET;
}

void Status::clear_has_version() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_version_case()) {
    case kVersion: {
      has_version_.version_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case HAS_VERSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_VERSION_NOT_SET;
}

void Status::clear_has_tileset_last_modified() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Status)
  switch (has_tileset_last_modified_case()) {
    case kTilesetLastModified: {
      // No need to clear
      break;
    }
    case HAS_TILESET_LAST_MODIFIED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_TILESET_LAST_MODIFIED_NOT_SET;
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_has_has_tiles();
  clear_has_has_admins();
  clear_has_has_timezones();
  clear_has_has_live_traffic();
  clear_has_bbox();
  clear_has_version();
  clear_has_tileset_last_modified();
  _internal_metadata_.Clear<std::string>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_has_tiles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_admins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_has_admins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_timezones = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_has_timezones(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_live_traffic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_has_live_traffic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bbox();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tileset_last_modified = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_tileset_last_modified(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_tiles = 1;
  if (_internal_has_has_tiles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_tiles(), target);
  }

  // bool has_admins = 2;
  if (_internal_has_has_admins()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_admins(), target);
  }

  // bool has_timezones = 3;
  if (_internal_has_has_timezones()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_timezones(), target);
  }

  // bool has_live_traffic = 4;
  if (_internal_has_has_live_traffic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_live_traffic(), target);
  }

  // string bbox = 5;
  if (_internal_has_bbox()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bbox().data(), static_cast<int>(this->_internal_bbox().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Status.bbox");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bbox(), target);
  }

  // string version = 6;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Status.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // uint32 tileset_last_modified = 7;
  if (_internal_has_tileset_last_modified()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tileset_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (has_has_tiles_case()) {
    // bool has_tiles = 1;
    case kHasTiles: {
      total_size += 1 + 1;
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  switch (has_has_admins_case()) {
    // bool has_admins = 2;
    case kHasAdmins: {
      total_size += 1 + 1;
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  switch (has_has_timezones_case()) {
    // bool has_timezones = 3;
    case kHasTimezones: {
      total_size += 1 + 1;
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  switch (has_has_live_traffic_case()) {
    // bool has_live_traffic = 4;
    case kHasLiveTraffic: {
      total_size += 1 + 1;
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  switch (has_bbox_case()) {
    // string bbox = 5;
    case kBbox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  switch (has_version_case()) {
    // string version = 6;
    case kVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
      break;
    }
    case HAS_VERSION_NOT_SET: {
      break;
    }
  }
  switch (has_tileset_last_modified_case()) {
    // uint32 tileset_last_modified = 7;
    case kTilesetLastModified: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tileset_last_modified());
      break;
    }
    case HAS_TILESET_LAST_MODIFIED_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Status*>(
      &from));
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Status)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.has_has_tiles_case()) {
    case kHasTiles: {
      _internal_set_has_tiles(from._internal_has_tiles());
      break;
    }
    case HAS_HAS_TILES_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_admins_case()) {
    case kHasAdmins: {
      _internal_set_has_admins(from._internal_has_admins());
      break;
    }
    case HAS_HAS_ADMINS_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_timezones_case()) {
    case kHasTimezones: {
      _internal_set_has_timezones(from._internal_has_timezones());
      break;
    }
    case HAS_HAS_TIMEZONES_NOT_SET: {
      break;
    }
  }
  switch (from.has_has_live_traffic_case()) {
    case kHasLiveTraffic: {
      _internal_set_has_live_traffic(from._internal_has_live_traffic());
      break;
    }
    case HAS_HAS_LIVE_TRAFFIC_NOT_SET: {
      break;
    }
  }
  switch (from.has_bbox_case()) {
    case kBbox: {
      _internal_set_bbox(from._internal_bbox());
      break;
    }
    case HAS_BBOX_NOT_SET: {
      break;
    }
  }
  switch (from.has_version_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case HAS_VERSION_NOT_SET: {
      break;
    }
  }
  switch (from.has_tileset_last_modified_case()) {
    case kTilesetLastModified: {
      _internal_set_tileset_last_modified(from._internal_tileset_last_modified());
      break;
    }
    case HAS_TILESET_LAST_MODIFIED_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(has_has_tiles_, other->has_has_tiles_);
  swap(has_has_admins_, other->has_has_admins_);
  swap(has_has_timezones_, other->has_has_timezones_);
  swap(has_has_live_traffic_, other->has_has_live_traffic_);
  swap(has_bbox_, other->has_bbox_);
  swap(has_version_, other->has_version_);
  swap(has_tileset_last_modified_, other->has_tileset_last_modified_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
  swap(_oneof_case_[6], other->_oneof_case_[6]);
}

std::string Status::GetTypeName() const {
  return "valhalla.Status";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::Status* Arena::CreateMaybeMessage< ::valhalla::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
