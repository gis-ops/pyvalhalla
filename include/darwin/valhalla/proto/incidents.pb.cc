// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: incidents.proto

#include "incidents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace valhalla {
constexpr IncidentsTile_Location::IncidentsTile_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_index_(0u)
  , start_offset_(0)
  , end_offset_(0)
  , metadata_index_(0u){}
struct IncidentsTile_LocationDefaultTypeInternal {
  constexpr IncidentsTile_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidentsTile_LocationDefaultTypeInternal() {}
  union {
    IncidentsTile_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidentsTile_LocationDefaultTypeInternal _IncidentsTile_Location_default_instance_;
constexpr IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct IncidentsTile_Metadata_CongestionDefaultTypeInternal {
  constexpr IncidentsTile_Metadata_CongestionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidentsTile_Metadata_CongestionDefaultTypeInternal() {}
  union {
    IncidentsTile_Metadata_Congestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidentsTile_Metadata_CongestionDefaultTypeInternal _IncidentsTile_Metadata_Congestion_default_instance_;
constexpr IncidentsTile_Metadata::IncidentsTile_Metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alertc_codes_()
  , _alertc_codes_cached_byte_size_(0)
  , lanes_blocked_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sub_type_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , long_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clear_lanes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iso_3166_1_alpha2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iso_3166_1_alpha3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , congestion_(nullptr)
  , type_(0)

  , impact_(0)

  , start_time_(uint64_t{0u})
  , end_time_(uint64_t{0u})
  , creation_time_(uint64_t{0u})
  , road_closed_(false)
  , length_(0u)
  , num_lanes_blocked_(uint64_t{0u})
  , id_(uint64_t{0u}){}
struct IncidentsTile_MetadataDefaultTypeInternal {
  constexpr IncidentsTile_MetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidentsTile_MetadataDefaultTypeInternal() {}
  union {
    IncidentsTile_Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidentsTile_MetadataDefaultTypeInternal _IncidentsTile_Metadata_default_instance_;
constexpr IncidentsTile::IncidentsTile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locations_()
  , metadata_(){}
struct IncidentsTileDefaultTypeInternal {
  constexpr IncidentsTileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidentsTileDefaultTypeInternal() {}
  union {
    IncidentsTile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidentsTileDefaultTypeInternal _IncidentsTile_default_instance_;
}  // namespace valhalla
namespace valhalla {
bool IncidentsTile_Metadata_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IncidentsTile_Metadata_Type_strings[12] = {};

static const char IncidentsTile_Metadata_Type_names[] =
  "ACCIDENT"
  "CONGESTION"
  "CONSTRUCTION"
  "DISABLED_VEHICLE"
  "LANE_RESTRICTION"
  "MASS_TRANSIT"
  "MISCELLANEOUS"
  "OTHER_NEWS"
  "PLANNED_EVENT"
  "ROAD_CLOSURE"
  "ROAD_HAZARD"
  "WEATHER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IncidentsTile_Metadata_Type_entries[] = {
  { {IncidentsTile_Metadata_Type_names + 0, 8}, 0 },
  { {IncidentsTile_Metadata_Type_names + 8, 10}, 1 },
  { {IncidentsTile_Metadata_Type_names + 18, 12}, 2 },
  { {IncidentsTile_Metadata_Type_names + 30, 16}, 3 },
  { {IncidentsTile_Metadata_Type_names + 46, 16}, 4 },
  { {IncidentsTile_Metadata_Type_names + 62, 12}, 5 },
  { {IncidentsTile_Metadata_Type_names + 74, 13}, 6 },
  { {IncidentsTile_Metadata_Type_names + 87, 10}, 7 },
  { {IncidentsTile_Metadata_Type_names + 97, 13}, 8 },
  { {IncidentsTile_Metadata_Type_names + 110, 12}, 9 },
  { {IncidentsTile_Metadata_Type_names + 122, 11}, 10 },
  { {IncidentsTile_Metadata_Type_names + 133, 7}, 11 },
};

static const int IncidentsTile_Metadata_Type_entries_by_number[] = {
  0, // 0 -> ACCIDENT
  1, // 1 -> CONGESTION
  2, // 2 -> CONSTRUCTION
  3, // 3 -> DISABLED_VEHICLE
  4, // 4 -> LANE_RESTRICTION
  5, // 5 -> MASS_TRANSIT
  6, // 6 -> MISCELLANEOUS
  7, // 7 -> OTHER_NEWS
  8, // 8 -> PLANNED_EVENT
  9, // 9 -> ROAD_CLOSURE
  10, // 10 -> ROAD_HAZARD
  11, // 11 -> WEATHER
};

const std::string& IncidentsTile_Metadata_Type_Name(
    IncidentsTile_Metadata_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IncidentsTile_Metadata_Type_entries,
          IncidentsTile_Metadata_Type_entries_by_number,
          12, IncidentsTile_Metadata_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IncidentsTile_Metadata_Type_entries,
      IncidentsTile_Metadata_Type_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IncidentsTile_Metadata_Type_strings[idx].get();
}
bool IncidentsTile_Metadata_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IncidentsTile_Metadata_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IncidentsTile_Metadata_Type_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<IncidentsTile_Metadata_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ACCIDENT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONGESTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONSTRUCTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::DISABLED_VEHICLE;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::LANE_RESTRICTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::MASS_TRANSIT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::MISCELLANEOUS;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::OTHER_NEWS;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::PLANNED_EVENT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_CLOSURE;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_HAZARD;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::WEATHER;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MIN;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MAX;
constexpr int IncidentsTile_Metadata::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IncidentsTile_Metadata_Impact_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IncidentsTile_Metadata_Impact_strings[5] = {};

static const char IncidentsTile_Metadata_Impact_names[] =
  "CRITICAL"
  "LOW"
  "MAJOR"
  "MINOR"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IncidentsTile_Metadata_Impact_entries[] = {
  { {IncidentsTile_Metadata_Impact_names + 0, 8}, 1 },
  { {IncidentsTile_Metadata_Impact_names + 8, 3}, 4 },
  { {IncidentsTile_Metadata_Impact_names + 11, 5}, 2 },
  { {IncidentsTile_Metadata_Impact_names + 16, 5}, 3 },
  { {IncidentsTile_Metadata_Impact_names + 21, 7}, 0 },
};

static const int IncidentsTile_Metadata_Impact_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  0, // 1 -> CRITICAL
  2, // 2 -> MAJOR
  3, // 3 -> MINOR
  1, // 4 -> LOW
};

const std::string& IncidentsTile_Metadata_Impact_Name(
    IncidentsTile_Metadata_Impact value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IncidentsTile_Metadata_Impact_entries,
          IncidentsTile_Metadata_Impact_entries_by_number,
          5, IncidentsTile_Metadata_Impact_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IncidentsTile_Metadata_Impact_entries,
      IncidentsTile_Metadata_Impact_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IncidentsTile_Metadata_Impact_strings[idx].get();
}
bool IncidentsTile_Metadata_Impact_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IncidentsTile_Metadata_Impact* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IncidentsTile_Metadata_Impact_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IncidentsTile_Metadata_Impact>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::UNKNOWN;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::CRITICAL;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MAJOR;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MINOR;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::LOW;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MIN;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MAX;
constexpr int IncidentsTile_Metadata::Impact_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class IncidentsTile_Location::_Internal {
 public:
};

IncidentsTile_Location::IncidentsTile_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Location)
}
IncidentsTile_Location::IncidentsTile_Location(const IncidentsTile_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&edge_index_, &from.edge_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&metadata_index_) -
    reinterpret_cast<char*>(&edge_index_)) + sizeof(metadata_index_));
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Location)
}

inline void IncidentsTile_Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edge_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_index_) -
    reinterpret_cast<char*>(&edge_index_)) + sizeof(metadata_index_));
}

IncidentsTile_Location::~IncidentsTile_Location() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IncidentsTile_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncidentsTile_Location::ArenaDtor(void* object) {
  IncidentsTile_Location* _this = reinterpret_cast< IncidentsTile_Location* >(object);
  (void)_this;
}
void IncidentsTile_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidentsTile_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidentsTile_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&edge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_index_) -
      reinterpret_cast<char*>(&edge_index_)) + sizeof(metadata_index_));
  _internal_metadata_.Clear<std::string>();
}

const char* IncidentsTile_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 edge_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          edge_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 metadata_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          metadata_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidentsTile_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 edge_index = 1;
  if (this->_internal_edge_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_index(), target);
  }

  // float start_offset = 2;
  if (!(this->_internal_start_offset() <= 0 && this->_internal_start_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_offset(), target);
  }

  // float end_offset = 3;
  if (!(this->_internal_end_offset() <= 0 && this->_internal_end_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_end_offset(), target);
  }

  // uint32 metadata_index = 4;
  if (this->_internal_metadata_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_metadata_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Location)
  return target;
}

size_t IncidentsTile_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 edge_index = 1;
  if (this->_internal_edge_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_edge_index());
  }

  // float start_offset = 2;
  if (!(this->_internal_start_offset() <= 0 && this->_internal_start_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_offset = 3;
  if (!(this->_internal_end_offset() <= 0 && this->_internal_end_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 metadata_index = 4;
  if (this->_internal_metadata_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_metadata_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentsTile_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncidentsTile_Location*>(
      &from));
}

void IncidentsTile_Location::MergeFrom(const IncidentsTile_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_edge_index() != 0) {
    _internal_set_edge_index(from._internal_edge_index());
  }
  if (!(from._internal_start_offset() <= 0 && from._internal_start_offset() >= 0)) {
    _internal_set_start_offset(from._internal_start_offset());
  }
  if (!(from._internal_end_offset() <= 0 && from._internal_end_offset() >= 0)) {
    _internal_set_end_offset(from._internal_end_offset());
  }
  if (from._internal_metadata_index() != 0) {
    _internal_set_metadata_index(from._internal_metadata_index());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Location::CopyFrom(const IncidentsTile_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Location::IsInitialized() const {
  return true;
}

void IncidentsTile_Location::InternalSwap(IncidentsTile_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, metadata_index_)
      + sizeof(IncidentsTile_Location::metadata_index_)
      - PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, edge_index_)>(
          reinterpret_cast<char*>(&edge_index_),
          reinterpret_cast<char*>(&other->edge_index_));
}

std::string IncidentsTile_Location::GetTypeName() const {
  return "valhalla.IncidentsTile.Location";
}


// ===================================================================

class IncidentsTile_Metadata_Congestion::_Internal {
 public:
};

IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Metadata.Congestion)
}
IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(const IncidentsTile_Metadata_Congestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Metadata.Congestion)
}

inline void IncidentsTile_Metadata_Congestion::SharedCtor() {
value_ = 0u;
}

IncidentsTile_Metadata_Congestion::~IncidentsTile_Metadata_Congestion() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata.Congestion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IncidentsTile_Metadata_Congestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncidentsTile_Metadata_Congestion::ArenaDtor(void* object) {
  IncidentsTile_Metadata_Congestion* _this = reinterpret_cast< IncidentsTile_Metadata_Congestion* >(object);
  (void)_this;
}
void IncidentsTile_Metadata_Congestion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidentsTile_Metadata_Congestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidentsTile_Metadata_Congestion::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata.Congestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IncidentsTile_Metadata_Congestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidentsTile_Metadata_Congestion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Metadata.Congestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Metadata.Congestion)
  return target;
}

size_t IncidentsTile_Metadata_Congestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata.Congestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentsTile_Metadata_Congestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncidentsTile_Metadata_Congestion*>(
      &from));
}

void IncidentsTile_Metadata_Congestion::MergeFrom(const IncidentsTile_Metadata_Congestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Metadata_Congestion::CopyFrom(const IncidentsTile_Metadata_Congestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Metadata_Congestion::IsInitialized() const {
  return true;
}

void IncidentsTile_Metadata_Congestion::InternalSwap(IncidentsTile_Metadata_Congestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

std::string IncidentsTile_Metadata_Congestion::GetTypeName() const {
  return "valhalla.IncidentsTile.Metadata.Congestion";
}


// ===================================================================

class IncidentsTile_Metadata::_Internal {
 public:
  static const ::valhalla::IncidentsTile_Metadata_Congestion& congestion(const IncidentsTile_Metadata* msg);
};

const ::valhalla::IncidentsTile_Metadata_Congestion&
IncidentsTile_Metadata::_Internal::congestion(const IncidentsTile_Metadata* msg) {
  return *msg->congestion_;
}
IncidentsTile_Metadata::IncidentsTile_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  alertc_codes_(arena),
  lanes_blocked_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Metadata)
}
IncidentsTile_Metadata::IncidentsTile_Metadata(const IncidentsTile_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      alertc_codes_(from.alertc_codes_),
      lanes_blocked_(from.lanes_blocked_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type().empty()) {
    sub_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_type(), 
      GetArenaForAllocation());
  }
  sub_type_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_type_description().empty()) {
    sub_type_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sub_type_description(), 
      GetArenaForAllocation());
  }
  long_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_long_description().empty()) {
    long_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_long_description(), 
      GetArenaForAllocation());
  }
  clear_lanes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clear_lanes().empty()) {
    clear_lanes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clear_lanes(), 
      GetArenaForAllocation());
  }
  iso_3166_1_alpha2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_3166_1_alpha2().empty()) {
    iso_3166_1_alpha2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iso_3166_1_alpha2(), 
      GetArenaForAllocation());
  }
  iso_3166_1_alpha3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iso_3166_1_alpha3().empty()) {
    iso_3166_1_alpha3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iso_3166_1_alpha3(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_congestion()) {
    congestion_ = new ::valhalla::IncidentsTile_Metadata_Congestion(*from.congestion_);
  } else {
    congestion_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Metadata)
}

inline void IncidentsTile_Metadata::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sub_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sub_type_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
long_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_lanes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iso_3166_1_alpha2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iso_3166_1_alpha3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&congestion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&congestion_)) + sizeof(id_));
}

IncidentsTile_Metadata::~IncidentsTile_Metadata() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IncidentsTile_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_type_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_lanes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iso_3166_1_alpha3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete congestion_;
}

void IncidentsTile_Metadata::ArenaDtor(void* object) {
  IncidentsTile_Metadata* _this = reinterpret_cast< IncidentsTile_Metadata* >(object);
  (void)_this;
}
void IncidentsTile_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidentsTile_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidentsTile_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alertc_codes_.Clear();
  lanes_blocked_.Clear();
  description_.ClearToEmpty();
  sub_type_.ClearToEmpty();
  sub_type_description_.ClearToEmpty();
  long_description_.ClearToEmpty();
  clear_lanes_.ClearToEmpty();
  iso_3166_1_alpha2_.ClearToEmpty();
  iso_3166_1_alpha3_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && congestion_ != nullptr) {
    delete congestion_;
  }
  congestion_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IncidentsTile_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .valhalla.IncidentsTile.Metadata.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::IncidentsTile_Metadata_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 alertc_codes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_alertc_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_alertc_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sub_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_type_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_type_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_impact(static_cast<::valhalla::IncidentsTile_Metadata_Impact>(val));
        } else goto handle_unusual;
        continue;
      // bool road_closed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          road_closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_congestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string lanes_blocked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lanes_blocked();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 creation_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string long_description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_long_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clear_lanes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_clear_lanes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_lanes_blocked = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          num_lanes_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 length = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iso_3166_1_alpha2 = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_iso_3166_1_alpha2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string iso_3166_1_alpha3 = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_iso_3166_1_alpha3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidentsTile_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.IncidentsTile.Metadata.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated uint32 alertc_codes = 2;
  {
    int byte_size = _alertc_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_alertc_codes(), byte_size, target);
    }
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string sub_type = 4;
  if (!this->_internal_sub_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type().data(), static_cast<int>(this->_internal_sub_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.sub_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sub_type(), target);
  }

  // string sub_type_description = 5;
  if (!this->_internal_sub_type_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_type_description().data(), static_cast<int>(this->_internal_sub_type_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.sub_type_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_type_description(), target);
  }

  // uint64 start_time = 6;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_time(), target);
  }

  // uint64 end_time = 7;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_end_time(), target);
  }

  // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  if (this->_internal_impact() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_impact(), target);
  }

  // bool road_closed = 10;
  if (this->_internal_road_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_road_closed(), target);
  }

  // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  if (this->_internal_has_congestion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::congestion(this), target, stream);
  }

  // repeated string lanes_blocked = 12;
  for (int i = 0, n = this->_internal_lanes_blocked_size(); i < n; i++) {
    const auto& s = this->_internal_lanes_blocked(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.lanes_blocked");
    target = stream->WriteString(12, s, target);
  }

  // uint64 creation_time = 13;
  if (this->_internal_creation_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_creation_time(), target);
  }

  // string long_description = 14;
  if (!this->_internal_long_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_long_description().data(), static_cast<int>(this->_internal_long_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.long_description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_long_description(), target);
  }

  // string clear_lanes = 15;
  if (!this->_internal_clear_lanes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clear_lanes().data(), static_cast<int>(this->_internal_clear_lanes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.clear_lanes");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_clear_lanes(), target);
  }

  // uint64 num_lanes_blocked = 16;
  if (this->_internal_num_lanes_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_num_lanes_blocked(), target);
  }

  // uint32 length = 17;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_length(), target);
  }

  // uint64 id = 128;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(128, this->_internal_id(), target);
  }

  // string iso_3166_1_alpha2 = 129;
  if (!this->_internal_iso_3166_1_alpha2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_3166_1_alpha2().data(), static_cast<int>(this->_internal_iso_3166_1_alpha2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2");
    target = stream->WriteStringMaybeAliased(
        129, this->_internal_iso_3166_1_alpha2(), target);
  }

  // string iso_3166_1_alpha3 = 130;
  if (!this->_internal_iso_3166_1_alpha3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iso_3166_1_alpha3().data(), static_cast<int>(this->_internal_iso_3166_1_alpha3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3");
    target = stream->WriteStringMaybeAliased(
        130, this->_internal_iso_3166_1_alpha3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Metadata)
  return target;
}

size_t IncidentsTile_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 alertc_codes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->alertc_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _alertc_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string lanes_blocked = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lanes_blocked_.size());
  for (int i = 0, n = lanes_blocked_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lanes_blocked_.Get(i));
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string sub_type = 4;
  if (!this->_internal_sub_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type());
  }

  // string sub_type_description = 5;
  if (!this->_internal_sub_type_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_type_description());
  }

  // string long_description = 14;
  if (!this->_internal_long_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_long_description());
  }

  // string clear_lanes = 15;
  if (!this->_internal_clear_lanes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clear_lanes());
  }

  // string iso_3166_1_alpha2 = 129;
  if (!this->_internal_iso_3166_1_alpha2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_3166_1_alpha2());
  }

  // string iso_3166_1_alpha3 = 130;
  if (!this->_internal_iso_3166_1_alpha3().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iso_3166_1_alpha3());
  }

  // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
  if (this->_internal_has_congestion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *congestion_);
  }

  // .valhalla.IncidentsTile.Metadata.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
  if (this->_internal_impact() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_impact());
  }

  // uint64 start_time = 6;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 end_time = 7;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  // uint64 creation_time = 13;
  if (this->_internal_creation_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_creation_time());
  }

  // bool road_closed = 10;
  if (this->_internal_road_closed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 length = 17;
  if (this->_internal_length() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  // uint64 num_lanes_blocked = 16;
  if (this->_internal_num_lanes_blocked() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_lanes_blocked());
  }

  // uint64 id = 128;
  if (this->_internal_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentsTile_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncidentsTile_Metadata*>(
      &from));
}

void IncidentsTile_Metadata::MergeFrom(const IncidentsTile_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alertc_codes_.MergeFrom(from.alertc_codes_);
  lanes_blocked_.MergeFrom(from.lanes_blocked_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_sub_type().empty()) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (!from._internal_sub_type_description().empty()) {
    _internal_set_sub_type_description(from._internal_sub_type_description());
  }
  if (!from._internal_long_description().empty()) {
    _internal_set_long_description(from._internal_long_description());
  }
  if (!from._internal_clear_lanes().empty()) {
    _internal_set_clear_lanes(from._internal_clear_lanes());
  }
  if (!from._internal_iso_3166_1_alpha2().empty()) {
    _internal_set_iso_3166_1_alpha2(from._internal_iso_3166_1_alpha2());
  }
  if (!from._internal_iso_3166_1_alpha3().empty()) {
    _internal_set_iso_3166_1_alpha3(from._internal_iso_3166_1_alpha3());
  }
  if (from._internal_has_congestion()) {
    _internal_mutable_congestion()->::valhalla::IncidentsTile_Metadata_Congestion::MergeFrom(from._internal_congestion());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_impact() != 0) {
    _internal_set_impact(from._internal_impact());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_creation_time() != 0) {
    _internal_set_creation_time(from._internal_creation_time());
  }
  if (from._internal_road_closed() != 0) {
    _internal_set_road_closed(from._internal_road_closed());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from._internal_num_lanes_blocked() != 0) {
    _internal_set_num_lanes_blocked(from._internal_num_lanes_blocked());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Metadata::CopyFrom(const IncidentsTile_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile_Metadata::IsInitialized() const {
  return true;
}

void IncidentsTile_Metadata::InternalSwap(IncidentsTile_Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  alertc_codes_.InternalSwap(&other->alertc_codes_);
  lanes_blocked_.InternalSwap(&other->lanes_blocked_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_type_, GetArenaForAllocation(),
      &other->sub_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sub_type_description_, GetArenaForAllocation(),
      &other->sub_type_description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &long_description_, GetArenaForAllocation(),
      &other->long_description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clear_lanes_, GetArenaForAllocation(),
      &other->clear_lanes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iso_3166_1_alpha2_, GetArenaForAllocation(),
      &other->iso_3166_1_alpha2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iso_3166_1_alpha3_, GetArenaForAllocation(),
      &other->iso_3166_1_alpha3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, id_)
      + sizeof(IncidentsTile_Metadata::id_)
      - PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, congestion_)>(
          reinterpret_cast<char*>(&congestion_),
          reinterpret_cast<char*>(&other->congestion_));
}

std::string IncidentsTile_Metadata::GetTypeName() const {
  return "valhalla.IncidentsTile.Metadata";
}


// ===================================================================

class IncidentsTile::_Internal {
 public:
};

IncidentsTile::IncidentsTile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  locations_(arena),
  metadata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile)
}
IncidentsTile::IncidentsTile(const IncidentsTile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      locations_(from.locations_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile)
}

inline void IncidentsTile::SharedCtor() {
}

IncidentsTile::~IncidentsTile() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IncidentsTile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncidentsTile::ArenaDtor(void* object) {
  IncidentsTile* _this = reinterpret_cast< IncidentsTile* >(object);
  (void)_this;
}
void IncidentsTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidentsTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidentsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  metadata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncidentsTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .valhalla.IncidentsTile.Location locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidentsTile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.IncidentsTile.Location locations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_locations(i), target, stream);
  }

  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile)
  return target;
}

size_t IncidentsTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.IncidentsTile.Location locations = 1;
  total_size += 1UL * this->_internal_locations_size();
  for (const auto& msg : this->locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentsTile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncidentsTile*>(
      &from));
}

void IncidentsTile::MergeFrom(const IncidentsTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
  metadata_.MergeFrom(from.metadata_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile::CopyFrom(const IncidentsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentsTile::IsInitialized() const {
  return true;
}

void IncidentsTile::InternalSwap(IncidentsTile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  locations_.InternalSwap(&other->locations_);
  metadata_.InternalSwap(&other->metadata_);
}

std::string IncidentsTile::GetTypeName() const {
  return "valhalla.IncidentsTile";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::IncidentsTile_Location* Arena::CreateMaybeMessage< ::valhalla::IncidentsTile_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::IncidentsTile_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::IncidentsTile_Metadata_Congestion* Arena::CreateMaybeMessage< ::valhalla::IncidentsTile_Metadata_Congestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::IncidentsTile_Metadata_Congestion >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::IncidentsTile_Metadata* Arena::CreateMaybeMessage< ::valhalla::IncidentsTile_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::IncidentsTile_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::IncidentsTile* Arena::CreateMaybeMessage< ::valhalla::IncidentsTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::IncidentsTile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
