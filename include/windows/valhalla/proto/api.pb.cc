// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace valhalla {
PROTOBUF_CONSTEXPR Api::Api(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.trip_)*/nullptr
  , /*decltype(_impl_.directions_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApiDefaultTypeInternal() {}
  union {
    Api _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApiDefaultTypeInternal _Api_default_instance_;
}  // namespace valhalla
namespace valhalla {

// ===================================================================

class Api::_Internal {
 public:
  static const ::valhalla::Options& options(const Api* msg);
  static const ::valhalla::Trip& trip(const Api* msg);
  static const ::valhalla::Directions& directions(const Api* msg);
  static const ::valhalla::Status& status(const Api* msg);
  static const ::valhalla::Info& info(const Api* msg);
};

const ::valhalla::Options&
Api::_Internal::options(const Api* msg) {
  return *msg->_impl_.options_;
}
const ::valhalla::Trip&
Api::_Internal::trip(const Api* msg) {
  return *msg->_impl_.trip_;
}
const ::valhalla::Directions&
Api::_Internal::directions(const Api* msg) {
  return *msg->_impl_.directions_;
}
const ::valhalla::Status&
Api::_Internal::status(const Api* msg) {
  return *msg->_impl_.status_;
}
const ::valhalla::Info&
Api::_Internal::info(const Api* msg) {
  return *msg->_impl_.info_;
}
void Api::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
void Api::clear_trip() {
  if (GetArenaForAllocation() == nullptr && _impl_.trip_ != nullptr) {
    delete _impl_.trip_;
  }
  _impl_.trip_ = nullptr;
}
void Api::clear_directions() {
  if (GetArenaForAllocation() == nullptr && _impl_.directions_ != nullptr) {
    delete _impl_.directions_;
  }
  _impl_.directions_ = nullptr;
}
void Api::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
void Api::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
Api::Api(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:valhalla.Api)
}
Api::Api(const Api& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Api* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.directions_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::valhalla::Options(*from._impl_.options_);
  }
  if (from._internal_has_trip()) {
    _this->_impl_.trip_ = new ::valhalla::Trip(*from._impl_.trip_);
  }
  if (from._internal_has_directions()) {
    _this->_impl_.directions_ = new ::valhalla::Directions(*from._impl_.directions_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::valhalla::Status(*from._impl_.status_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::valhalla::Info(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.Api)
}

inline void Api::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){nullptr}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.directions_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Api::~Api() {
  // @@protoc_insertion_point(destructor:valhalla.Api)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Api::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.options_;
  if (this != internal_default_instance()) delete _impl_.trip_;
  if (this != internal_default_instance()) delete _impl_.directions_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Api::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Api::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Api)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trip_ != nullptr) {
    delete _impl_.trip_;
  }
  _impl_.trip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.directions_ != nullptr) {
    delete _impl_.directions_;
  }
  _impl_.directions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Api::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .valhalla.Options options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.Trip trip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.Directions directions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_directions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.Info info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Api::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Api)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.Options options = 1;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Trip trip = 2;
  if (this->_internal_has_trip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trip(this),
        _Internal::trip(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Directions directions = 3;
  if (this->_internal_has_directions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::directions(this),
        _Internal::directions(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Status status = 4;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .valhalla.Info info = 20;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Api)
  return target;
}

size_t Api::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Api)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .valhalla.Options options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // .valhalla.Trip trip = 2;
  if (this->_internal_has_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trip_);
  }

  // .valhalla.Directions directions = 3;
  if (this->_internal_has_directions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.directions_);
  }

  // .valhalla.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .valhalla.Info info = 20;
  if (this->_internal_has_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Api::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Api*>(
      &from));
}

void Api::MergeFrom(const Api& from) {
  Api* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Api)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::valhalla::Options::MergeFrom(
        from._internal_options());
  }
  if (from._internal_has_trip()) {
    _this->_internal_mutable_trip()->::valhalla::Trip::MergeFrom(
        from._internal_trip());
  }
  if (from._internal_has_directions()) {
    _this->_internal_mutable_directions()->::valhalla::Directions::MergeFrom(
        from._internal_directions());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::valhalla::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::valhalla::Info::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Api::CopyFrom(const Api& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Api)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Api::IsInitialized() const {
  return true;
}

void Api::InternalSwap(Api* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Api, _impl_.info_)
      + sizeof(Api::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(Api, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

std::string Api::GetTypeName() const {
  return "valhalla.Api";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::Api*
Arena::CreateMaybeMessage< ::valhalla::Api >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Api >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
