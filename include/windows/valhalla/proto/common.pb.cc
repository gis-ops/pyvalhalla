// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Correlation_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatLng_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathEdge_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pronunciation_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchFilter_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransitPlatformInfo_common_2eproto;
namespace valhalla {
class LatLngDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatLng> _instance;
  double lat_;
  double lng_;
} _LatLng_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class SearchFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchFilter> _instance;
  int min_road_class_;
  int max_road_class_;
  bool exclude_closures_;
} _SearchFilter_default_instance_;
class PathEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathEdge> _instance;
} _PathEdge_default_instance_;
class CorrelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Correlation> _instance;
} _Correlation_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_tolerance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_snap_tolerance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minimum_reachability_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accuracy_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 search_cutoff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 street_side_tolerance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 street_side_max_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 preferred_layer_;
} _Location_default_instance_;
class TransitEgressInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransitEgressInfo> _instance;
} _TransitEgressInfo_default_instance_;
class TransitStationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransitStationInfo> _instance;
} _TransitStationInfo_default_instance_;
class BikeShareStationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BikeShareStationInfo> _instance;
} _BikeShareStationInfo_default_instance_;
class TransitPlatformInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransitPlatformInfo> _instance;
} _TransitPlatformInfo_default_instance_;
class TransitRouteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransitRouteInfo> _instance;
} _TransitRouteInfo_default_instance_;
class PronunciationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pronunciation> _instance;
} _Pronunciation_default_instance_;
class StreetNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreetName> _instance;
} _StreetName_default_instance_;
class TurnLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TurnLane> _instance;
} _TurnLane_default_instance_;
class TaggedValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaggedValue> _instance;
} _TaggedValue_default_instance_;
}  // namespace valhalla
static void InitDefaultsscc_info_BikeShareStationInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_BikeShareStationInfo_default_instance_;
    new (ptr) ::valhalla::BikeShareStationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::BikeShareStationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BikeShareStationInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BikeShareStationInfo_common_2eproto}, {}};

static void InitDefaultsscc_info_BoundingBox_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_BoundingBox_default_instance_;
    new (ptr) ::valhalla::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundingBox_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_Correlation_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_Correlation_default_instance_;
    new (ptr) ::valhalla::Correlation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::Correlation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Correlation_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Correlation_common_2eproto}, {
      &scc_info_PathEdge_common_2eproto.base,
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_LatLng_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_LatLng_default_instance_;
    new (ptr) ::valhalla::LatLng();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::LatLng::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatLng_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatLng_common_2eproto}, {}};

static void InitDefaultsscc_info_Location_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_Location_default_instance_;
    new (ptr) ::valhalla::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Location_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Location_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,
      &scc_info_SearchFilter_common_2eproto.base,
      &scc_info_Correlation_common_2eproto.base,}};

static void InitDefaultsscc_info_PathEdge_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_PathEdge_default_instance_;
    new (ptr) ::valhalla::PathEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::PathEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathEdge_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PathEdge_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_Pronunciation_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_Pronunciation_default_instance_;
    new (ptr) ::valhalla::Pronunciation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::Pronunciation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pronunciation_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pronunciation_common_2eproto}, {}};

static void InitDefaultsscc_info_SearchFilter_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_SearchFilter_default_instance_;
    new (ptr) ::valhalla::SearchFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::SearchFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchFilter_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchFilter_common_2eproto}, {}};

static void InitDefaultsscc_info_StreetName_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_StreetName_default_instance_;
    new (ptr) ::valhalla::StreetName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::StreetName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreetName_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreetName_common_2eproto}, {
      &scc_info_Pronunciation_common_2eproto.base,}};

static void InitDefaultsscc_info_TaggedValue_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TaggedValue_default_instance_;
    new (ptr) ::valhalla::TaggedValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TaggedValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaggedValue_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaggedValue_common_2eproto}, {}};

static void InitDefaultsscc_info_TransitEgressInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TransitEgressInfo_default_instance_;
    new (ptr) ::valhalla::TransitEgressInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TransitEgressInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransitEgressInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransitEgressInfo_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_TransitPlatformInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TransitPlatformInfo_default_instance_;
    new (ptr) ::valhalla::TransitPlatformInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TransitPlatformInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransitPlatformInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransitPlatformInfo_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_TransitRouteInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TransitRouteInfo_default_instance_;
    new (ptr) ::valhalla::TransitRouteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TransitRouteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransitRouteInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransitRouteInfo_common_2eproto}, {
      &scc_info_TransitPlatformInfo_common_2eproto.base,}};

static void InitDefaultsscc_info_TransitStationInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TransitStationInfo_default_instance_;
    new (ptr) ::valhalla::TransitStationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TransitStationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransitStationInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransitStationInfo_common_2eproto}, {
      &scc_info_LatLng_common_2eproto.base,}};

static void InitDefaultsscc_info_TurnLane_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::valhalla::_TurnLane_default_instance_;
    new (ptr) ::valhalla::TurnLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::valhalla::TurnLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TurnLane_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TurnLane_common_2eproto}, {}};

namespace valhalla {
bool Location_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Location_Type_strings[4] = {};

static const char Location_Type_names[] =
  "kBreak"
  "kBreakThrough"
  "kThrough"
  "kVia";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Location_Type_entries[] = {
  { {Location_Type_names + 0, 6}, 0 },
  { {Location_Type_names + 6, 13}, 3 },
  { {Location_Type_names + 19, 8}, 1 },
  { {Location_Type_names + 27, 4}, 2 },
};

static const int Location_Type_entries_by_number[] = {
  0, // 0 -> kBreak
  2, // 1 -> kThrough
  3, // 2 -> kVia
  1, // 3 -> kBreakThrough
};

const std::string& Location_Type_Name(
    Location_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Location_Type_entries,
          Location_Type_entries_by_number,
          4, Location_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Location_Type_entries,
      Location_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Location_Type_strings[idx].get();
}
bool Location_Type_Parse(
    const std::string& name, Location_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Location_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Location_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Location_Type Location::kBreak;
constexpr Location_Type Location::kThrough;
constexpr Location_Type Location::kVia;
constexpr Location_Type Location::kBreakThrough;
constexpr Location_Type Location::Type_MIN;
constexpr Location_Type Location::Type_MAX;
constexpr int Location::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Location_PreferredSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Location_PreferredSide_strings[3] = {};

static const char Location_PreferredSide_names[] =
  "either"
  "opposite"
  "same";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Location_PreferredSide_entries[] = {
  { {Location_PreferredSide_names + 0, 6}, 0 },
  { {Location_PreferredSide_names + 6, 8}, 2 },
  { {Location_PreferredSide_names + 14, 4}, 1 },
};

static const int Location_PreferredSide_entries_by_number[] = {
  0, // 0 -> either
  2, // 1 -> same
  1, // 2 -> opposite
};

const std::string& Location_PreferredSide_Name(
    Location_PreferredSide value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Location_PreferredSide_entries,
          Location_PreferredSide_entries_by_number,
          3, Location_PreferredSide_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Location_PreferredSide_entries,
      Location_PreferredSide_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Location_PreferredSide_strings[idx].get();
}
bool Location_PreferredSide_Parse(
    const std::string& name, Location_PreferredSide* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Location_PreferredSide_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Location_PreferredSide>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Location_PreferredSide Location::either;
constexpr Location_PreferredSide Location::same;
constexpr Location_PreferredSide Location::opposite;
constexpr Location_PreferredSide Location::PreferredSide_MIN;
constexpr Location_PreferredSide Location::PreferredSide_MAX;
constexpr int Location::PreferredSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Location_SideOfStreet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Location_SideOfStreet_strings[3] = {};

static const char Location_SideOfStreet_names[] =
  "kLeft"
  "kNone"
  "kRight";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Location_SideOfStreet_entries[] = {
  { {Location_SideOfStreet_names + 0, 5}, 1 },
  { {Location_SideOfStreet_names + 5, 5}, 0 },
  { {Location_SideOfStreet_names + 10, 6}, 2 },
};

static const int Location_SideOfStreet_entries_by_number[] = {
  1, // 0 -> kNone
  0, // 1 -> kLeft
  2, // 2 -> kRight
};

const std::string& Location_SideOfStreet_Name(
    Location_SideOfStreet value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Location_SideOfStreet_entries,
          Location_SideOfStreet_entries_by_number,
          3, Location_SideOfStreet_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Location_SideOfStreet_entries,
      Location_SideOfStreet_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Location_SideOfStreet_strings[idx].get();
}
bool Location_SideOfStreet_Parse(
    const std::string& name, Location_SideOfStreet* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Location_SideOfStreet_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Location_SideOfStreet>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Location_SideOfStreet Location::kNone;
constexpr Location_SideOfStreet Location::kLeft;
constexpr Location_SideOfStreet Location::kRight;
constexpr Location_SideOfStreet Location::SideOfStreet_MIN;
constexpr Location_SideOfStreet Location::SideOfStreet_MAX;
constexpr int Location::SideOfStreet_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TransitPlatformInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransitPlatformInfo_Type_strings[2] = {};

static const char TransitPlatformInfo_Type_names[] =
  "kStation"
  "kStop";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransitPlatformInfo_Type_entries[] = {
  { {TransitPlatformInfo_Type_names + 0, 8}, 1 },
  { {TransitPlatformInfo_Type_names + 8, 5}, 0 },
};

static const int TransitPlatformInfo_Type_entries_by_number[] = {
  1, // 0 -> kStop
  0, // 1 -> kStation
};

const std::string& TransitPlatformInfo_Type_Name(
    TransitPlatformInfo_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransitPlatformInfo_Type_entries,
          TransitPlatformInfo_Type_entries_by_number,
          2, TransitPlatformInfo_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransitPlatformInfo_Type_entries,
      TransitPlatformInfo_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransitPlatformInfo_Type_strings[idx].get();
}
bool TransitPlatformInfo_Type_Parse(
    const std::string& name, TransitPlatformInfo_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransitPlatformInfo_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TransitPlatformInfo_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransitPlatformInfo_Type TransitPlatformInfo::kStop;
constexpr TransitPlatformInfo_Type TransitPlatformInfo::kStation;
constexpr TransitPlatformInfo_Type TransitPlatformInfo::Type_MIN;
constexpr TransitPlatformInfo_Type TransitPlatformInfo::Type_MAX;
constexpr int TransitPlatformInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Pronunciation_Alphabet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Pronunciation_Alphabet_strings[4] = {};

static const char Pronunciation_Alphabet_names[] =
  "kIpa"
  "kNtSampa"
  "kXJeita"
  "kXKatakana";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Pronunciation_Alphabet_entries[] = {
  { {Pronunciation_Alphabet_names + 0, 4}, 0 },
  { {Pronunciation_Alphabet_names + 4, 8}, 3 },
  { {Pronunciation_Alphabet_names + 12, 7}, 2 },
  { {Pronunciation_Alphabet_names + 19, 10}, 1 },
};

static const int Pronunciation_Alphabet_entries_by_number[] = {
  0, // 0 -> kIpa
  3, // 1 -> kXKatakana
  2, // 2 -> kXJeita
  1, // 3 -> kNtSampa
};

const std::string& Pronunciation_Alphabet_Name(
    Pronunciation_Alphabet value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Pronunciation_Alphabet_entries,
          Pronunciation_Alphabet_entries_by_number,
          4, Pronunciation_Alphabet_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Pronunciation_Alphabet_entries,
      Pronunciation_Alphabet_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Pronunciation_Alphabet_strings[idx].get();
}
bool Pronunciation_Alphabet_Parse(
    const std::string& name, Pronunciation_Alphabet* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Pronunciation_Alphabet_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Pronunciation_Alphabet>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pronunciation_Alphabet Pronunciation::kIpa;
constexpr Pronunciation_Alphabet Pronunciation::kXKatakana;
constexpr Pronunciation_Alphabet Pronunciation::kXJeita;
constexpr Pronunciation_Alphabet Pronunciation::kNtSampa;
constexpr Pronunciation_Alphabet Pronunciation::Alphabet_MIN;
constexpr Pronunciation_Alphabet Pronunciation::Alphabet_MAX;
constexpr int Pronunciation::Alphabet_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TurnLane_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TurnLane_State_strings[3] = {};

static const char TurnLane_State_names[] =
  "kActive"
  "kInvalid"
  "kValid";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TurnLane_State_entries[] = {
  { {TurnLane_State_names + 0, 7}, 2 },
  { {TurnLane_State_names + 7, 8}, 0 },
  { {TurnLane_State_names + 15, 6}, 1 },
};

static const int TurnLane_State_entries_by_number[] = {
  1, // 0 -> kInvalid
  2, // 1 -> kValid
  0, // 2 -> kActive
};

const std::string& TurnLane_State_Name(
    TurnLane_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TurnLane_State_entries,
          TurnLane_State_entries_by_number,
          3, TurnLane_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TurnLane_State_entries,
      TurnLane_State_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TurnLane_State_strings[idx].get();
}
bool TurnLane_State_Parse(
    const std::string& name, TurnLane_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TurnLane_State_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TurnLane_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TurnLane_State TurnLane::kInvalid;
constexpr TurnLane_State TurnLane::kValid;
constexpr TurnLane_State TurnLane::kActive;
constexpr TurnLane_State TurnLane::State_MIN;
constexpr TurnLane_State TurnLane::State_MAX;
constexpr int TurnLane::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TaggedValue_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 49:
    case 50:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TaggedValue_Type_strings[8] = {};

static const char TaggedValue_Type_names[] =
  "kBridge"
  "kBssInfo"
  "kLayer"
  "kLevel"
  "kLevelRef"
  "kNone"
  "kPronunciation"
  "kTunnel";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TaggedValue_Type_entries[] = {
  { {TaggedValue_Type_names + 0, 7}, 50 },
  { {TaggedValue_Type_names + 7, 8}, 3 },
  { {TaggedValue_Type_names + 15, 6}, 1 },
  { {TaggedValue_Type_names + 21, 6}, 4 },
  { {TaggedValue_Type_names + 27, 9}, 5 },
  { {TaggedValue_Type_names + 36, 5}, 0 },
  { {TaggedValue_Type_names + 41, 14}, 2 },
  { {TaggedValue_Type_names + 55, 7}, 49 },
};

static const int TaggedValue_Type_entries_by_number[] = {
  5, // 0 -> kNone
  2, // 1 -> kLayer
  6, // 2 -> kPronunciation
  1, // 3 -> kBssInfo
  3, // 4 -> kLevel
  4, // 5 -> kLevelRef
  7, // 49 -> kTunnel
  0, // 50 -> kBridge
};

const std::string& TaggedValue_Type_Name(
    TaggedValue_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TaggedValue_Type_entries,
          TaggedValue_Type_entries_by_number,
          8, TaggedValue_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TaggedValue_Type_entries,
      TaggedValue_Type_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TaggedValue_Type_strings[idx].get();
}
bool TaggedValue_Type_Parse(
    const std::string& name, TaggedValue_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TaggedValue_Type_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<TaggedValue_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaggedValue_Type TaggedValue::kNone;
constexpr TaggedValue_Type TaggedValue::kLayer;
constexpr TaggedValue_Type TaggedValue::kPronunciation;
constexpr TaggedValue_Type TaggedValue::kBssInfo;
constexpr TaggedValue_Type TaggedValue::kLevel;
constexpr TaggedValue_Type TaggedValue::kLevelRef;
constexpr TaggedValue_Type TaggedValue::kTunnel;
constexpr TaggedValue_Type TaggedValue::kBridge;
constexpr TaggedValue_Type TaggedValue::Type_MIN;
constexpr TaggedValue_Type TaggedValue::Type_MAX;
constexpr int TaggedValue::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RoadClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RoadClass_strings[8] = {};

static const char RoadClass_names[] =
  "kMotorway"
  "kPrimary"
  "kResidential"
  "kSecondary"
  "kServiceOther"
  "kTertiary"
  "kTrunk"
  "kUnclassified";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RoadClass_entries[] = {
  { {RoadClass_names + 0, 9}, 0 },
  { {RoadClass_names + 9, 8}, 2 },
  { {RoadClass_names + 17, 12}, 6 },
  { {RoadClass_names + 29, 10}, 3 },
  { {RoadClass_names + 39, 13}, 7 },
  { {RoadClass_names + 52, 9}, 4 },
  { {RoadClass_names + 61, 6}, 1 },
  { {RoadClass_names + 67, 13}, 5 },
};

static const int RoadClass_entries_by_number[] = {
  0, // 0 -> kMotorway
  6, // 1 -> kTrunk
  1, // 2 -> kPrimary
  3, // 3 -> kSecondary
  5, // 4 -> kTertiary
  7, // 5 -> kUnclassified
  2, // 6 -> kResidential
  4, // 7 -> kServiceOther
};

const std::string& RoadClass_Name(
    RoadClass value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RoadClass_entries,
          RoadClass_entries_by_number,
          8, RoadClass_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RoadClass_entries,
      RoadClass_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RoadClass_strings[idx].get();
}
bool RoadClass_Parse(
    const std::string& name, RoadClass* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RoadClass_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<RoadClass>(int_value);
  }
  return success;
}
bool TravelMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TravelMode_strings[4] = {};

static const char TravelMode_names[] =
  "kBicycle"
  "kDrive"
  "kPedestrian"
  "kTransit";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TravelMode_entries[] = {
  { {TravelMode_names + 0, 8}, 2 },
  { {TravelMode_names + 8, 6}, 0 },
  { {TravelMode_names + 14, 11}, 1 },
  { {TravelMode_names + 25, 8}, 3 },
};

static const int TravelMode_entries_by_number[] = {
  1, // 0 -> kDrive
  2, // 1 -> kPedestrian
  0, // 2 -> kBicycle
  3, // 3 -> kTransit
};

const std::string& TravelMode_Name(
    TravelMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TravelMode_entries,
          TravelMode_entries_by_number,
          4, TravelMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TravelMode_entries,
      TravelMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TravelMode_strings[idx].get();
}
bool TravelMode_Parse(
    const std::string& name, TravelMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TravelMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<TravelMode>(int_value);
  }
  return success;
}
bool VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VehicleType_strings[5] = {};

static const char VehicleType_names[] =
  "kAutoBus"
  "kCar"
  "kMotorScooter"
  "kMotorcycle"
  "kTractorTrailer";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VehicleType_entries[] = {
  { {VehicleType_names + 0, 8}, 2 },
  { {VehicleType_names + 8, 4}, 0 },
  { {VehicleType_names + 12, 13}, 4 },
  { {VehicleType_names + 25, 11}, 1 },
  { {VehicleType_names + 36, 15}, 3 },
};

static const int VehicleType_entries_by_number[] = {
  1, // 0 -> kCar
  3, // 1 -> kMotorcycle
  0, // 2 -> kAutoBus
  4, // 3 -> kTractorTrailer
  2, // 4 -> kMotorScooter
};

const std::string& VehicleType_Name(
    VehicleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VehicleType_entries,
          VehicleType_entries_by_number,
          5, VehicleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VehicleType_entries,
      VehicleType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VehicleType_strings[idx].get();
}
bool VehicleType_Parse(
    const std::string& name, VehicleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VehicleType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<VehicleType>(int_value);
  }
  return success;
}
bool PedestrianType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PedestrianType_strings[3] = {};

static const char PedestrianType_names[] =
  "kFoot"
  "kSegway"
  "kWheelchair";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PedestrianType_entries[] = {
  { {PedestrianType_names + 0, 5}, 0 },
  { {PedestrianType_names + 5, 7}, 2 },
  { {PedestrianType_names + 12, 11}, 1 },
};

static const int PedestrianType_entries_by_number[] = {
  0, // 0 -> kFoot
  2, // 1 -> kWheelchair
  1, // 2 -> kSegway
};

const std::string& PedestrianType_Name(
    PedestrianType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PedestrianType_entries,
          PedestrianType_entries_by_number,
          3, PedestrianType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PedestrianType_entries,
      PedestrianType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PedestrianType_strings[idx].get();
}
bool PedestrianType_Parse(
    const std::string& name, PedestrianType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PedestrianType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PedestrianType>(int_value);
  }
  return success;
}
bool BicycleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BicycleType_strings[4] = {};

static const char BicycleType_names[] =
  "kCross"
  "kHybrid"
  "kMountain"
  "kRoad";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BicycleType_entries[] = {
  { {BicycleType_names + 0, 6}, 1 },
  { {BicycleType_names + 6, 7}, 2 },
  { {BicycleType_names + 13, 9}, 3 },
  { {BicycleType_names + 22, 5}, 0 },
};

static const int BicycleType_entries_by_number[] = {
  3, // 0 -> kRoad
  0, // 1 -> kCross
  1, // 2 -> kHybrid
  2, // 3 -> kMountain
};

const std::string& BicycleType_Name(
    BicycleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BicycleType_entries,
          BicycleType_entries_by_number,
          4, BicycleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BicycleType_entries,
      BicycleType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BicycleType_strings[idx].get();
}
bool BicycleType_Parse(
    const std::string& name, BicycleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BicycleType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BicycleType>(int_value);
  }
  return success;
}
bool TransitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransitType_strings[8] = {};

static const char TransitType_names[] =
  "kBus"
  "kCableCar"
  "kFerry"
  "kFunicular"
  "kGondola"
  "kMetro"
  "kRail"
  "kTram";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransitType_entries[] = {
  { {TransitType_names + 0, 4}, 3 },
  { {TransitType_names + 4, 9}, 5 },
  { {TransitType_names + 13, 6}, 4 },
  { {TransitType_names + 19, 10}, 7 },
  { {TransitType_names + 29, 8}, 6 },
  { {TransitType_names + 37, 6}, 1 },
  { {TransitType_names + 43, 5}, 2 },
  { {TransitType_names + 48, 5}, 0 },
};

static const int TransitType_entries_by_number[] = {
  7, // 0 -> kTram
  5, // 1 -> kMetro
  6, // 2 -> kRail
  0, // 3 -> kBus
  2, // 4 -> kFerry
  1, // 5 -> kCableCar
  4, // 6 -> kGondola
  3, // 7 -> kFunicular
};

const std::string& TransitType_Name(
    TransitType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransitType_entries,
          TransitType_entries_by_number,
          8, TransitType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransitType_entries,
      TransitType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransitType_strings[idx].get();
}
bool TransitType_Parse(
    const std::string& name, TransitType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransitType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<TransitType>(int_value);
  }
  return success;
}

// ===================================================================

void LatLng::InitAsDefaultInstance() {
}
class LatLng::_Internal {
 public:
};

LatLng::LatLng(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.LatLng)
}
LatLng::LatLng(const LatLng& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_has_lat();
  switch (from.has_lat_case()) {
    case kLat: {
      _internal_set_lat(from._internal_lat());
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  clear_has_has_lng();
  switch (from.has_lng_case()) {
    case kLng: {
      _internal_set_lng(from._internal_lng());
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.LatLng)
}

void LatLng::SharedCtor() {
  clear_has_has_lat();
  clear_has_has_lng();
}

LatLng::~LatLng() {
  // @@protoc_insertion_point(destructor:valhalla.LatLng)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void LatLng::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_has_lat()) {
    clear_has_lat();
  }
  if (has_has_lng()) {
    clear_has_lng();
  }
}

void LatLng::ArenaDtor(void* object) {
  LatLng* _this = reinterpret_cast< LatLng* >(object);
  (void)_this;
}
void LatLng::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatLng::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatLng& LatLng::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatLng_common_2eproto.base);
  return *internal_default_instance();
}


void LatLng::clear_has_lat() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.LatLng)
  switch (has_lat_case()) {
    case kLat: {
      // No need to clear
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_LAT_NOT_SET;
}

void LatLng::clear_has_lng() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.LatLng)
  switch (has_lng_case()) {
    case kLng: {
      // No need to clear
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_LNG_NOT_SET;
}


void LatLng::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.LatLng)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_has_lat();
  clear_has_lng();
  _internal_metadata_.Clear<std::string>();
}

const char* LatLng::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_lat(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_lng(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatLng::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.LatLng)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (_internal_has_lat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  if (_internal_has_lng()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.LatLng)
  return target;
}

size_t LatLng::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.LatLng)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (has_lat_case()) {
    // double lat = 1;
    case kLat: {
      total_size += 1 + 8;
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  switch (has_lng_case()) {
    // double lng = 2;
    case kLng: {
      total_size += 1 + 8;
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatLng::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LatLng*>(
      &from));
}

void LatLng::MergeFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.LatLng)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.has_lat_case()) {
    case kLat: {
      _internal_set_lat(from._internal_lat());
      break;
    }
    case HAS_LAT_NOT_SET: {
      break;
    }
  }
  switch (from.has_lng_case()) {
    case kLng: {
      _internal_set_lng(from._internal_lng());
      break;
    }
    case HAS_LNG_NOT_SET: {
      break;
    }
  }
}

void LatLng::CopyFrom(const LatLng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.LatLng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatLng::IsInitialized() const {
  return true;
}

void LatLng::InternalSwap(LatLng* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(has_lat_, other->has_lat_);
  swap(has_lng_, other->has_lng_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string LatLng::GetTypeName() const {
  return "valhalla.LatLng";
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
  ::valhalla::_BoundingBox_default_instance_._instance.get_mutable()->min_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
  ::valhalla::_BoundingBox_default_instance_._instance.get_mutable()->max_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class BoundingBox::_Internal {
 public:
  static const ::valhalla::LatLng& min_ll(const BoundingBox* msg);
  static const ::valhalla::LatLng& max_ll(const BoundingBox* msg);
};

const ::valhalla::LatLng&
BoundingBox::_Internal::min_ll(const BoundingBox* msg) {
  return *msg->min_ll_;
}
const ::valhalla::LatLng&
BoundingBox::_Internal::max_ll(const BoundingBox* msg) {
  return *msg->max_ll_;
}
BoundingBox::BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_min_ll()) {
    min_ll_ = new ::valhalla::LatLng(*from.min_ll_);
  } else {
    min_ll_ = nullptr;
  }
  if (from._internal_has_max_ll()) {
    max_ll_ = new ::valhalla::LatLng(*from.max_ll_);
  } else {
    max_ll_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox_common_2eproto.base);
  ::memset(&min_ll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ll_) -
      reinterpret_cast<char*>(&min_ll_)) + sizeof(max_ll_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:valhalla.BoundingBox)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_ll_;
  if (this != internal_default_instance()) delete max_ll_;
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_common_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_ll_ != nullptr) {
    delete min_ll_;
  }
  min_ll_ = nullptr;
  if (GetArena() == nullptr && max_ll_ != nullptr) {
    delete max_ll_;
  }
  max_ll_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .valhalla.LatLng min_ll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng max_ll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.LatLng min_ll = 1;
  if (this->has_min_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_ll(this), target, stream);
  }

  // .valhalla.LatLng max_ll = 2;
  if (this->has_max_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_ll(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.BoundingBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .valhalla.LatLng min_ll = 1;
  if (this->has_min_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_ll_);
  }

  // .valhalla.LatLng max_ll = 2;
  if (this->has_max_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_ll_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoundingBox*>(
      &from));
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_ll()) {
    _internal_mutable_min_ll()->::valhalla::LatLng::MergeFrom(from._internal_min_ll());
  }
  if (from.has_max_ll()) {
    _internal_mutable_max_ll()->::valhalla::LatLng::MergeFrom(from._internal_max_ll());
  }
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox, max_ll_)
      + sizeof(BoundingBox::max_ll_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox, min_ll_)>(
          reinterpret_cast<char*>(&min_ll_),
          reinterpret_cast<char*>(&other->min_ll_));
}

std::string BoundingBox::GetTypeName() const {
  return "valhalla.BoundingBox";
}


// ===================================================================

void SearchFilter::InitAsDefaultInstance() {
}
class SearchFilter::_Internal {
 public:
};

SearchFilter::SearchFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.SearchFilter)
}
SearchFilter::SearchFilter(const SearchFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&exclude_tunnel_, &from.exclude_tunnel_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclude_ramp_) -
    reinterpret_cast<char*>(&exclude_tunnel_)) + sizeof(exclude_ramp_));
  clear_has_has_min_road_class();
  switch (from.has_min_road_class_case()) {
    case kMinRoadClass: {
      _internal_set_min_road_class(from._internal_min_road_class());
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  clear_has_has_max_road_class();
  switch (from.has_max_road_class_case()) {
    case kMaxRoadClass: {
      _internal_set_max_road_class(from._internal_max_road_class());
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  clear_has_has_exclude_closures();
  switch (from.has_exclude_closures_case()) {
    case kExcludeClosures: {
      _internal_set_exclude_closures(from._internal_exclude_closures());
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.SearchFilter)
}

void SearchFilter::SharedCtor() {
  ::memset(&exclude_tunnel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_ramp_) -
      reinterpret_cast<char*>(&exclude_tunnel_)) + sizeof(exclude_ramp_));
  clear_has_has_min_road_class();
  clear_has_has_max_road_class();
  clear_has_has_exclude_closures();
}

SearchFilter::~SearchFilter() {
  // @@protoc_insertion_point(destructor:valhalla.SearchFilter)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SearchFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_has_min_road_class()) {
    clear_has_min_road_class();
  }
  if (has_has_max_road_class()) {
    clear_has_max_road_class();
  }
  if (has_has_exclude_closures()) {
    clear_has_exclude_closures();
  }
}

void SearchFilter::ArenaDtor(void* object) {
  SearchFilter* _this = reinterpret_cast< SearchFilter* >(object);
  (void)_this;
}
void SearchFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchFilter& SearchFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchFilter_common_2eproto.base);
  return *internal_default_instance();
}


void SearchFilter::clear_has_min_road_class() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.SearchFilter)
  switch (has_min_road_class_case()) {
    case kMinRoadClass: {
      // No need to clear
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_MIN_ROAD_CLASS_NOT_SET;
}

void SearchFilter::clear_has_max_road_class() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.SearchFilter)
  switch (has_max_road_class_case()) {
    case kMaxRoadClass: {
      // No need to clear
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_MAX_ROAD_CLASS_NOT_SET;
}

void SearchFilter::clear_has_exclude_closures() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.SearchFilter)
  switch (has_exclude_closures_case()) {
    case kExcludeClosures: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_EXCLUDE_CLOSURES_NOT_SET;
}


void SearchFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.SearchFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&exclude_tunnel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_ramp_) -
      reinterpret_cast<char*>(&exclude_tunnel_)) + sizeof(exclude_ramp_));
  clear_has_min_road_class();
  clear_has_max_road_class();
  clear_has_exclude_closures();
  _internal_metadata_.Clear<std::string>();
}

const char* SearchFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .valhalla.RoadClass min_road_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_min_road_class(static_cast<::valhalla::RoadClass>(val));
        } else goto handle_unusual;
        continue;
      // .valhalla.RoadClass max_road_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_max_road_class(static_cast<::valhalla::RoadClass>(val));
        } else goto handle_unusual;
        continue;
      // bool exclude_tunnel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exclude_tunnel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_bridge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exclude_bridge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_ramp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exclude_ramp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exclude_closures = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_exclude_closures(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.SearchFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.RoadClass min_road_class = 1;
  if (_internal_has_min_road_class()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_min_road_class(), target);
  }

  // .valhalla.RoadClass max_road_class = 2;
  if (_internal_has_max_road_class()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_max_road_class(), target);
  }

  // bool exclude_tunnel = 3;
  if (this->exclude_tunnel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exclude_tunnel(), target);
  }

  // bool exclude_bridge = 4;
  if (this->exclude_bridge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_exclude_bridge(), target);
  }

  // bool exclude_ramp = 5;
  if (this->exclude_ramp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_exclude_ramp(), target);
  }

  // bool exclude_closures = 6;
  if (_internal_has_exclude_closures()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exclude_closures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.SearchFilter)
  return target;
}

size_t SearchFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.SearchFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exclude_tunnel = 3;
  if (this->exclude_tunnel() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_bridge = 4;
  if (this->exclude_bridge() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_ramp = 5;
  if (this->exclude_ramp() != 0) {
    total_size += 1 + 1;
  }

  switch (has_min_road_class_case()) {
    // .valhalla.RoadClass min_road_class = 1;
    case kMinRoadClass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_min_road_class());
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (has_max_road_class_case()) {
    // .valhalla.RoadClass max_road_class = 2;
    case kMaxRoadClass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_max_road_class());
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_closures_case()) {
    // bool exclude_closures = 6;
    case kExcludeClosures: {
      total_size += 1 + 1;
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SearchFilter*>(
      &from));
}

void SearchFilter::MergeFrom(const SearchFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.SearchFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exclude_tunnel() != 0) {
    _internal_set_exclude_tunnel(from._internal_exclude_tunnel());
  }
  if (from.exclude_bridge() != 0) {
    _internal_set_exclude_bridge(from._internal_exclude_bridge());
  }
  if (from.exclude_ramp() != 0) {
    _internal_set_exclude_ramp(from._internal_exclude_ramp());
  }
  switch (from.has_min_road_class_case()) {
    case kMinRoadClass: {
      _internal_set_min_road_class(from._internal_min_road_class());
      break;
    }
    case HAS_MIN_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (from.has_max_road_class_case()) {
    case kMaxRoadClass: {
      _internal_set_max_road_class(from._internal_max_road_class());
      break;
    }
    case HAS_MAX_ROAD_CLASS_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_closures_case()) {
    case kExcludeClosures: {
      _internal_set_exclude_closures(from._internal_exclude_closures());
      break;
    }
    case HAS_EXCLUDE_CLOSURES_NOT_SET: {
      break;
    }
  }
}

void SearchFilter::CopyFrom(const SearchFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.SearchFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFilter::IsInitialized() const {
  return true;
}

void SearchFilter::InternalSwap(SearchFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchFilter, exclude_ramp_)
      + sizeof(SearchFilter::exclude_ramp_)
      - PROTOBUF_FIELD_OFFSET(SearchFilter, exclude_tunnel_)>(
          reinterpret_cast<char*>(&exclude_tunnel_),
          reinterpret_cast<char*>(&other->exclude_tunnel_));
  swap(has_min_road_class_, other->has_min_road_class_);
  swap(has_max_road_class_, other->has_max_road_class_);
  swap(has_exclude_closures_, other->has_exclude_closures_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

std::string SearchFilter::GetTypeName() const {
  return "valhalla.SearchFilter";
}


// ===================================================================

void PathEdge::InitAsDefaultInstance() {
  ::valhalla::_PathEdge_default_instance_._instance.get_mutable()->ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class PathEdge::_Internal {
 public:
  static const ::valhalla::LatLng& ll(const PathEdge* msg);
};

const ::valhalla::LatLng&
PathEdge::_Internal::ll(const PathEdge* msg) {
  return *msg->ll_;
}
PathEdge::PathEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.PathEdge)
}
PathEdge::PathEdge(const PathEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_ll()) {
    ll_ = new ::valhalla::LatLng(*from.ll_);
  } else {
    ll_ = nullptr;
  }
  ::memcpy(&graph_id_, &from.graph_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&graph_id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:valhalla.PathEdge)
}

void PathEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathEdge_common_2eproto.base);
  ::memset(&ll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&ll_)) + sizeof(heading_));
}

PathEdge::~PathEdge() {
  // @@protoc_insertion_point(destructor:valhalla.PathEdge)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PathEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ll_;
}

void PathEdge::ArenaDtor(void* object) {
  PathEdge* _this = reinterpret_cast< PathEdge* >(object);
  (void)_this;
}
void PathEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathEdge& PathEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathEdge_common_2eproto.base);
  return *internal_default_instance();
}


void PathEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.PathEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  if (GetArena() == nullptr && ll_ != nullptr) {
    delete ll_;
  }
  ll_ = nullptr;
  ::memset(&graph_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&graph_id_)) + sizeof(heading_));
  _internal_metadata_.Clear<std::string>();
}

const char* PathEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graph_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double percent_along = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          percent_along_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng ll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Location.SideOfStreet side_of_street = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side_of_street(static_cast<::valhalla::Location_SideOfStreet>(val));
        } else goto handle_unusual;
        continue;
      // double distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool begin_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          begin_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_node = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          end_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 outbound_reach = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          outbound_reach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inbound_reach = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          inbound_reach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float heading = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.PathEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 graph_id = 1;
  if (this->graph_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_graph_id(), target);
  }

  // double percent_along = 2;
  if (!(this->percent_along() <= 0 && this->percent_along() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_percent_along(), target);
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ll(this), target, stream);
  }

  // .valhalla.Location.SideOfStreet side_of_street = 4;
  if (this->side_of_street() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_side_of_street(), target);
  }

  // double distance = 5;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance(), target);
  }

  // bool begin_node = 7;
  if (this->begin_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_begin_node(), target);
  }

  // bool end_node = 8;
  if (this->end_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_end_node(), target);
  }

  // repeated string names = 10;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.PathEdge.names");
    target = stream->WriteString(10, s, target);
  }

  // int32 outbound_reach = 11;
  if (this->outbound_reach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_outbound_reach(), target);
  }

  // int32 inbound_reach = 12;
  if (this->inbound_reach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_inbound_reach(), target);
  }

  // float heading = 13;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.PathEdge)
  return target;
}

size_t PathEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.PathEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ll_);
  }

  // uint64 graph_id = 1;
  if (this->graph_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_graph_id());
  }

  // double percent_along = 2;
  if (!(this->percent_along() <= 0 && this->percent_along() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance = 5;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // .valhalla.Location.SideOfStreet side_of_street = 4;
  if (this->side_of_street() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side_of_street());
  }

  // bool begin_node = 7;
  if (this->begin_node() != 0) {
    total_size += 1 + 1;
  }

  // bool end_node = 8;
  if (this->end_node() != 0) {
    total_size += 1 + 1;
  }

  // int32 outbound_reach = 11;
  if (this->outbound_reach() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outbound_reach());
  }

  // int32 inbound_reach = 12;
  if (this->inbound_reach() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inbound_reach());
  }

  // float heading = 13;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathEdge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PathEdge*>(
      &from));
}

void PathEdge::MergeFrom(const PathEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.PathEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_ll()) {
    _internal_mutable_ll()->::valhalla::LatLng::MergeFrom(from._internal_ll());
  }
  if (from.graph_id() != 0) {
    _internal_set_graph_id(from._internal_graph_id());
  }
  if (!(from.percent_along() <= 0 && from.percent_along() >= 0)) {
    _internal_set_percent_along(from._internal_percent_along());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.side_of_street() != 0) {
    _internal_set_side_of_street(from._internal_side_of_street());
  }
  if (from.begin_node() != 0) {
    _internal_set_begin_node(from._internal_begin_node());
  }
  if (from.end_node() != 0) {
    _internal_set_end_node(from._internal_end_node());
  }
  if (from.outbound_reach() != 0) {
    _internal_set_outbound_reach(from._internal_outbound_reach());
  }
  if (from.inbound_reach() != 0) {
    _internal_set_inbound_reach(from._internal_inbound_reach());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void PathEdge::CopyFrom(const PathEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.PathEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathEdge::IsInitialized() const {
  return true;
}

void PathEdge::InternalSwap(PathEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathEdge, heading_)
      + sizeof(PathEdge::heading_)
      - PROTOBUF_FIELD_OFFSET(PathEdge, ll_)>(
          reinterpret_cast<char*>(&ll_),
          reinterpret_cast<char*>(&other->ll_));
}

std::string PathEdge::GetTypeName() const {
  return "valhalla.PathEdge";
}


// ===================================================================

void Correlation::InitAsDefaultInstance() {
  ::valhalla::_Correlation_default_instance_._instance.get_mutable()->projected_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class Correlation::_Internal {
 public:
  static const ::valhalla::LatLng& projected_ll(const Correlation* msg);
};

const ::valhalla::LatLng&
Correlation::_Internal::projected_ll(const Correlation* msg) {
  return *msg->projected_ll_;
}
Correlation::Correlation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  edges_(arena),
  filtered_edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Correlation)
}
Correlation::Correlation(const Correlation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      edges_(from.edges_),
      filtered_edges_(from.filtered_edges_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_projected_ll()) {
    projected_ll_ = new ::valhalla::LatLng(*from.projected_ll_);
  } else {
    projected_ll_ = nullptr;
  }
  ::memcpy(&original_index_, &from.original_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&waypoint_index_) -
    reinterpret_cast<char*>(&original_index_)) + sizeof(waypoint_index_));
  // @@protoc_insertion_point(copy_constructor:valhalla.Correlation)
}

void Correlation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Correlation_common_2eproto.base);
  ::memset(&projected_ll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&projected_ll_)) + sizeof(waypoint_index_));
}

Correlation::~Correlation() {
  // @@protoc_insertion_point(destructor:valhalla.Correlation)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Correlation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete projected_ll_;
}

void Correlation::ArenaDtor(void* object) {
  Correlation* _this = reinterpret_cast< Correlation* >(object);
  (void)_this;
}
void Correlation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Correlation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Correlation& Correlation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Correlation_common_2eproto.base);
  return *internal_default_instance();
}


void Correlation::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Correlation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  filtered_edges_.Clear();
  if (GetArena() == nullptr && projected_ll_ != nullptr) {
    delete projected_ll_;
  }
  projected_ll_ = nullptr;
  ::memset(&original_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&original_index_)) + sizeof(waypoint_index_));
  _internal_metadata_.Clear<std::string>();
}

const char* Correlation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .valhalla.PathEdge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.PathEdge filtered_edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 original_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          original_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng projected_ll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_projected_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leg_shape_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          leg_shape_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance_from_leg_origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          distance_from_leg_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 route_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          route_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 waypoint_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Correlation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Correlation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.PathEdge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges(i), target, stream);
  }

  // repeated .valhalla.PathEdge filtered_edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filtered_edges(i), target, stream);
  }

  // uint32 original_index = 3;
  if (this->original_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_original_index(), target);
  }

  // .valhalla.LatLng projected_ll = 4;
  if (this->has_projected_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::projected_ll(this), target, stream);
  }

  // uint32 leg_shape_index = 5;
  if (this->leg_shape_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leg_shape_index(), target);
  }

  // double distance_from_leg_origin = 6;
  if (!(this->distance_from_leg_origin() <= 0 && this->distance_from_leg_origin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_distance_from_leg_origin(), target);
  }

  // uint32 route_index = 7;
  if (this->route_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_route_index(), target);
  }

  // uint32 waypoint_index = 8;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_waypoint_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Correlation)
  return target;
}

size_t Correlation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Correlation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.PathEdge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.PathEdge filtered_edges = 2;
  total_size += 1UL * this->_internal_filtered_edges_size();
  for (const auto& msg : this->filtered_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .valhalla.LatLng projected_ll = 4;
  if (this->has_projected_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projected_ll_);
  }

  // uint32 original_index = 3;
  if (this->original_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_original_index());
  }

  // uint32 leg_shape_index = 5;
  if (this->leg_shape_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leg_shape_index());
  }

  // double distance_from_leg_origin = 6;
  if (!(this->distance_from_leg_origin() <= 0 && this->distance_from_leg_origin() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 route_index = 7;
  if (this->route_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_route_index());
  }

  // uint32 waypoint_index = 8;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_waypoint_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Correlation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Correlation*>(
      &from));
}

void Correlation::MergeFrom(const Correlation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Correlation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
  filtered_edges_.MergeFrom(from.filtered_edges_);
  if (from.has_projected_ll()) {
    _internal_mutable_projected_ll()->::valhalla::LatLng::MergeFrom(from._internal_projected_ll());
  }
  if (from.original_index() != 0) {
    _internal_set_original_index(from._internal_original_index());
  }
  if (from.leg_shape_index() != 0) {
    _internal_set_leg_shape_index(from._internal_leg_shape_index());
  }
  if (!(from.distance_from_leg_origin() <= 0 && from.distance_from_leg_origin() >= 0)) {
    _internal_set_distance_from_leg_origin(from._internal_distance_from_leg_origin());
  }
  if (from.route_index() != 0) {
    _internal_set_route_index(from._internal_route_index());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
}

void Correlation::CopyFrom(const Correlation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Correlation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Correlation::IsInitialized() const {
  return true;
}

void Correlation::InternalSwap(Correlation* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
  filtered_edges_.InternalSwap(&other->filtered_edges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Correlation, waypoint_index_)
      + sizeof(Correlation::waypoint_index_)
      - PROTOBUF_FIELD_OFFSET(Correlation, projected_ll_)>(
          reinterpret_cast<char*>(&projected_ll_),
          reinterpret_cast<char*>(&other->projected_ll_));
}

std::string Correlation::GetTypeName() const {
  return "valhalla.Correlation";
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::valhalla::_Location_default_instance_._instance.get_mutable()->ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
  ::valhalla::_Location_default_instance_._instance.get_mutable()->display_ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
  ::valhalla::_Location_default_instance_._instance.get_mutable()->search_filter_ = const_cast< ::valhalla::SearchFilter*>(
      ::valhalla::SearchFilter::internal_default_instance());
  ::valhalla::_Location_default_instance_._instance.get_mutable()->correlation_ = const_cast< ::valhalla::Correlation*>(
      ::valhalla::Correlation::internal_default_instance());
}
class Location::_Internal {
 public:
  static const ::valhalla::LatLng& ll(const Location* msg);
  static const ::valhalla::LatLng& display_ll(const Location* msg);
  static const ::valhalla::SearchFilter& search_filter(const Location* msg);
  static const ::valhalla::Correlation& correlation(const Location* msg);
};

const ::valhalla::LatLng&
Location::_Internal::ll(const Location* msg) {
  return *msg->ll_;
}
const ::valhalla::LatLng&
Location::_Internal::display_ll(const Location* msg) {
  return *msg->display_ll_;
}
const ::valhalla::SearchFilter&
Location::_Internal::search_filter(const Location* msg) {
  return *msg->search_filter_;
}
const ::valhalla::Correlation&
Location::_Internal::correlation(const Location* msg) {
  return *msg->correlation_;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_street().empty()) {
    street_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_street(),
      GetArena());
  }
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date_time().empty()) {
    date_time_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date_time(),
      GetArena());
  }
  if (from._internal_has_ll()) {
    ll_ = new ::valhalla::LatLng(*from.ll_);
  } else {
    ll_ = nullptr;
  }
  if (from._internal_has_display_ll()) {
    display_ll_ = new ::valhalla::LatLng(*from.display_ll_);
  } else {
    display_ll_ = nullptr;
  }
  if (from._internal_has_search_filter()) {
    search_filter_ = new ::valhalla::SearchFilter(*from.search_filter_);
  } else {
    search_filter_ = nullptr;
  }
  if (from._internal_has_correlation()) {
    correlation_ = new ::valhalla::Correlation(*from.correlation_);
  } else {
    correlation_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&preferred_side_) -
    reinterpret_cast<char*>(&type_)) + sizeof(preferred_side_));
  clear_has_has_heading();
  switch (from.has_heading_case()) {
    case kHeading: {
      _internal_set_heading(from._internal_heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  clear_has_has_heading_tolerance();
  switch (from.has_heading_tolerance_case()) {
    case kHeadingTolerance: {
      _internal_set_heading_tolerance(from._internal_heading_tolerance());
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  clear_has_has_node_snap_tolerance();
  switch (from.has_node_snap_tolerance_case()) {
    case kNodeSnapTolerance: {
      _internal_set_node_snap_tolerance(from._internal_node_snap_tolerance());
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  clear_has_has_minimum_reachability();
  switch (from.has_minimum_reachability_case()) {
    case kMinimumReachability: {
      _internal_set_minimum_reachability(from._internal_minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  clear_has_has_radius();
  switch (from.has_radius_case()) {
    case kRadius: {
      _internal_set_radius(from._internal_radius());
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  clear_has_has_accuracy();
  switch (from.has_accuracy_case()) {
    case kAccuracy: {
      _internal_set_accuracy(from._internal_accuracy());
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  clear_has_has_time();
  switch (from.has_time_case()) {
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  clear_has_has_search_cutoff();
  switch (from.has_search_cutoff_case()) {
    case kSearchCutoff: {
      _internal_set_search_cutoff(from._internal_search_cutoff());
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  clear_has_has_street_side_tolerance();
  switch (from.has_street_side_tolerance_case()) {
    case kStreetSideTolerance: {
      _internal_set_street_side_tolerance(from._internal_street_side_tolerance());
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  clear_has_has_street_side_max_distance();
  switch (from.has_street_side_max_distance_case()) {
    case kStreetSideMaxDistance: {
      _internal_set_street_side_max_distance(from._internal_street_side_max_distance());
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  clear_has_has_preferred_layer();
  switch (from.has_preferred_layer_case()) {
    case kPreferredLayer: {
      _internal_set_preferred_layer(from._internal_preferred_layer());
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preferred_side_) -
      reinterpret_cast<char*>(&ll_)) + sizeof(preferred_side_));
  clear_has_has_heading();
  clear_has_has_heading_tolerance();
  clear_has_has_node_snap_tolerance();
  clear_has_has_minimum_reachability();
  clear_has_has_radius();
  clear_has_has_accuracy();
  clear_has_has_time();
  clear_has_has_search_cutoff();
  clear_has_has_street_side_tolerance();
  clear_has_has_street_side_max_distance();
  clear_has_has_preferred_layer();
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:valhalla.Location)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ll_;
  if (this != internal_default_instance()) delete display_ll_;
  if (this != internal_default_instance()) delete search_filter_;
  if (this != internal_default_instance()) delete correlation_;
  if (has_has_heading()) {
    clear_has_heading();
  }
  if (has_has_heading_tolerance()) {
    clear_has_heading_tolerance();
  }
  if (has_has_node_snap_tolerance()) {
    clear_has_node_snap_tolerance();
  }
  if (has_has_minimum_reachability()) {
    clear_has_minimum_reachability();
  }
  if (has_has_radius()) {
    clear_has_radius();
  }
  if (has_has_accuracy()) {
    clear_has_accuracy();
  }
  if (has_has_time()) {
    clear_has_time();
  }
  if (has_has_search_cutoff()) {
    clear_has_search_cutoff();
  }
  if (has_has_street_side_tolerance()) {
    clear_has_street_side_tolerance();
  }
  if (has_has_street_side_max_distance()) {
    clear_has_street_side_max_distance();
  }
  if (has_has_preferred_layer()) {
    clear_has_preferred_layer();
  }
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_common_2eproto.base);
  return *internal_default_instance();
}


void Location::clear_has_heading() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_heading_case()) {
    case kHeading: {
      // No need to clear
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_HEADING_NOT_SET;
}

void Location::clear_has_heading_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_heading_tolerance_case()) {
    case kHeadingTolerance: {
      // No need to clear
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_HEADING_TOLERANCE_NOT_SET;
}

void Location::clear_has_node_snap_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_node_snap_tolerance_case()) {
    case kNodeSnapTolerance: {
      // No need to clear
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}

void Location::clear_has_minimum_reachability() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_minimum_reachability_case()) {
    case kMinimumReachability: {
      // No need to clear
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}

void Location::clear_has_radius() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_radius_case()) {
    case kRadius: {
      // No need to clear
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_RADIUS_NOT_SET;
}

void Location::clear_has_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_accuracy_case()) {
    case kAccuracy: {
      // No need to clear
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_ACCURACY_NOT_SET;
}

void Location::clear_has_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_time_case()) {
    case kTime: {
      // No need to clear
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_TIME_NOT_SET;
}

void Location::clear_has_search_cutoff() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_search_cutoff_case()) {
    case kSearchCutoff: {
      // No need to clear
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_SEARCH_CUTOFF_NOT_SET;
}

void Location::clear_has_street_side_tolerance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_street_side_tolerance_case()) {
    case kStreetSideTolerance: {
      // No need to clear
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}

void Location::clear_has_street_side_max_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_street_side_max_distance_case()) {
    case kStreetSideMaxDistance: {
      // No need to clear
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}

void Location::clear_has_preferred_layer() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Location)
  switch (has_preferred_layer_case()) {
    case kPreferredLayer: {
      // No need to clear
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_PREFERRED_LAYER_NOT_SET;
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ll_ != nullptr) {
    delete ll_;
  }
  ll_ = nullptr;
  if (GetArena() == nullptr && display_ll_ != nullptr) {
    delete display_ll_;
  }
  display_ll_ = nullptr;
  if (GetArena() == nullptr && search_filter_ != nullptr) {
    delete search_filter_;
  }
  search_filter_ = nullptr;
  if (GetArena() == nullptr && correlation_ != nullptr) {
    delete correlation_;
  }
  correlation_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preferred_side_) -
      reinterpret_cast<char*>(&type_)) + sizeof(preferred_side_));
  clear_has_heading();
  clear_has_heading_tolerance();
  clear_has_node_snap_tolerance();
  clear_has_minimum_reachability();
  clear_has_radius();
  clear_has_accuracy();
  clear_has_time();
  clear_has_search_cutoff();
  clear_has_street_side_tolerance();
  clear_has_street_side_max_distance();
  clear_has_preferred_layer();
  _internal_metadata_.Clear<std::string>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .valhalla.LatLng ll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Location.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::Location_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_heading(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string street = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_street();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Location.SideOfStreet side_of_street = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side_of_street(static_cast<::valhalla::Location_SideOfStreet>(val));
        } else goto handle_unusual;
        continue;
      // uint32 heading_tolerance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_heading_tolerance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 node_snap_tolerance = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_node_snap_tolerance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minimum_reachability = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _internal_set_minimum_reachability(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 radius = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _internal_set_radius(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 accuracy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _internal_set_accuracy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _internal_set_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool skip_ranking_candidates = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          skip_ranking_candidates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Location.PreferredSide preferred_side = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preferred_side(static_cast<::valhalla::Location_PreferredSide>(val));
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng display_ll = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 search_cutoff = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _internal_set_search_cutoff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 street_side_tolerance = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _internal_set_street_side_tolerance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.SearchFilter search_filter = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 street_side_max_distance = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_street_side_max_distance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 preferred_layer = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _internal_set_preferred_layer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Correlation correlation = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_correlation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.LatLng ll = 1;
  if (this->has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ll(this), target, stream);
  }

  // .valhalla.Location.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 heading = 3;
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heading(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string street = 5;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.street");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_street(), target);
  }

  // string date_time = 12;
  if (this->date_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date_time().data(), static_cast<int>(this->_internal_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Location.date_time");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_date_time(), target);
  }

  // .valhalla.Location.SideOfStreet side_of_street = 13;
  if (this->side_of_street() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_side_of_street(), target);
  }

  // uint32 heading_tolerance = 14;
  if (_internal_has_heading_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_heading_tolerance(), target);
  }

  // uint32 node_snap_tolerance = 15;
  if (_internal_has_node_snap_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_node_snap_tolerance(), target);
  }

  // uint32 minimum_reachability = 17;
  if (_internal_has_minimum_reachability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_minimum_reachability(), target);
  }

  // uint32 radius = 18;
  if (_internal_has_radius()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_radius(), target);
  }

  // uint32 accuracy = 19;
  if (_internal_has_accuracy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_accuracy(), target);
  }

  // double time = 20;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_time(), target);
  }

  // bool skip_ranking_candidates = 21;
  if (this->skip_ranking_candidates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_skip_ranking_candidates(), target);
  }

  // .valhalla.Location.PreferredSide preferred_side = 22;
  if (this->preferred_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_preferred_side(), target);
  }

  // .valhalla.LatLng display_ll = 23;
  if (this->has_display_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::display_ll(this), target, stream);
  }

  // uint32 search_cutoff = 24;
  if (_internal_has_search_cutoff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_search_cutoff(), target);
  }

  // uint32 street_side_tolerance = 25;
  if (_internal_has_street_side_tolerance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_street_side_tolerance(), target);
  }

  // .valhalla.SearchFilter search_filter = 26;
  if (this->has_search_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::search_filter(this), target, stream);
  }

  // uint32 street_side_max_distance = 27;
  if (_internal_has_street_side_max_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_street_side_max_distance(), target);
  }

  // int32 preferred_layer = 28;
  if (_internal_has_preferred_layer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_preferred_layer(), target);
  }

  // .valhalla.Correlation correlation = 90;
  if (this->has_correlation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::correlation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string street = 5;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  // string date_time = 12;
  if (this->date_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date_time());
  }

  // .valhalla.LatLng ll = 1;
  if (this->has_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ll_);
  }

  // .valhalla.LatLng display_ll = 23;
  if (this->has_display_ll()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *display_ll_);
  }

  // .valhalla.SearchFilter search_filter = 26;
  if (this->has_search_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *search_filter_);
  }

  // .valhalla.Correlation correlation = 90;
  if (this->has_correlation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *correlation_);
  }

  // .valhalla.Location.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .valhalla.Location.SideOfStreet side_of_street = 13;
  if (this->side_of_street() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side_of_street());
  }

  // bool skip_ranking_candidates = 21;
  if (this->skip_ranking_candidates() != 0) {
    total_size += 2 + 1;
  }

  // .valhalla.Location.PreferredSide preferred_side = 22;
  if (this->preferred_side() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preferred_side());
  }

  switch (has_heading_case()) {
    // uint32 heading = 3;
    case kHeading: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  switch (has_heading_tolerance_case()) {
    // uint32 heading_tolerance = 14;
    case kHeadingTolerance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heading_tolerance());
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_node_snap_tolerance_case()) {
    // uint32 node_snap_tolerance = 15;
    case kNodeSnapTolerance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_snap_tolerance());
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_minimum_reachability_case()) {
    // uint32 minimum_reachability = 17;
    case kMinimumReachability: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (has_radius_case()) {
    // uint32 radius = 18;
    case kRadius: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radius());
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (has_accuracy_case()) {
    // uint32 accuracy = 19;
    case kAccuracy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accuracy());
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (has_time_case()) {
    // double time = 20;
    case kTime: {
      total_size += 2 + 8;
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_search_cutoff_case()) {
    // uint32 search_cutoff = 24;
    case kSearchCutoff: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_search_cutoff());
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  switch (has_street_side_tolerance_case()) {
    // uint32 street_side_tolerance = 25;
    case kStreetSideTolerance: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_street_side_tolerance());
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (has_street_side_max_distance_case()) {
    // uint32 street_side_max_distance = 27;
    case kStreetSideMaxDistance: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_street_side_max_distance());
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_preferred_layer_case()) {
    // int32 preferred_layer = 28;
    case kPreferredLayer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preferred_layer());
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Location*>(
      &from));
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.street().size() > 0) {
    _internal_set_street(from._internal_street());
  }
  if (from.date_time().size() > 0) {
    _internal_set_date_time(from._internal_date_time());
  }
  if (from.has_ll()) {
    _internal_mutable_ll()->::valhalla::LatLng::MergeFrom(from._internal_ll());
  }
  if (from.has_display_ll()) {
    _internal_mutable_display_ll()->::valhalla::LatLng::MergeFrom(from._internal_display_ll());
  }
  if (from.has_search_filter()) {
    _internal_mutable_search_filter()->::valhalla::SearchFilter::MergeFrom(from._internal_search_filter());
  }
  if (from.has_correlation()) {
    _internal_mutable_correlation()->::valhalla::Correlation::MergeFrom(from._internal_correlation());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.side_of_street() != 0) {
    _internal_set_side_of_street(from._internal_side_of_street());
  }
  if (from.skip_ranking_candidates() != 0) {
    _internal_set_skip_ranking_candidates(from._internal_skip_ranking_candidates());
  }
  if (from.preferred_side() != 0) {
    _internal_set_preferred_side(from._internal_preferred_side());
  }
  switch (from.has_heading_case()) {
    case kHeading: {
      _internal_set_heading(from._internal_heading());
      break;
    }
    case HAS_HEADING_NOT_SET: {
      break;
    }
  }
  switch (from.has_heading_tolerance_case()) {
    case kHeadingTolerance: {
      _internal_set_heading_tolerance(from._internal_heading_tolerance());
      break;
    }
    case HAS_HEADING_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_node_snap_tolerance_case()) {
    case kNodeSnapTolerance: {
      _internal_set_node_snap_tolerance(from._internal_node_snap_tolerance());
      break;
    }
    case HAS_NODE_SNAP_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_minimum_reachability_case()) {
    case kMinimumReachability: {
      _internal_set_minimum_reachability(from._internal_minimum_reachability());
      break;
    }
    case HAS_MINIMUM_REACHABILITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_radius_case()) {
    case kRadius: {
      _internal_set_radius(from._internal_radius());
      break;
    }
    case HAS_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (from.has_accuracy_case()) {
    case kAccuracy: {
      _internal_set_accuracy(from._internal_accuracy());
      break;
    }
    case HAS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (from.has_time_case()) {
    case kTime: {
      _internal_set_time(from._internal_time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_search_cutoff_case()) {
    case kSearchCutoff: {
      _internal_set_search_cutoff(from._internal_search_cutoff());
      break;
    }
    case HAS_SEARCH_CUTOFF_NOT_SET: {
      break;
    }
  }
  switch (from.has_street_side_tolerance_case()) {
    case kStreetSideTolerance: {
      _internal_set_street_side_tolerance(from._internal_street_side_tolerance());
      break;
    }
    case HAS_STREET_SIDE_TOLERANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_street_side_max_distance_case()) {
    case kStreetSideMaxDistance: {
      _internal_set_street_side_max_distance(from._internal_street_side_max_distance());
      break;
    }
    case HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_preferred_layer_case()) {
    case kPreferredLayer: {
      _internal_set_preferred_layer(from._internal_preferred_layer());
      break;
    }
    case HAS_PREFERRED_LAYER_NOT_SET: {
      break;
    }
  }
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  street_.Swap(&other->street_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_time_.Swap(&other->date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, preferred_side_)
      + sizeof(Location::preferred_side_)
      - PROTOBUF_FIELD_OFFSET(Location, ll_)>(
          reinterpret_cast<char*>(&ll_),
          reinterpret_cast<char*>(&other->ll_));
  swap(has_heading_, other->has_heading_);
  swap(has_heading_tolerance_, other->has_heading_tolerance_);
  swap(has_node_snap_tolerance_, other->has_node_snap_tolerance_);
  swap(has_minimum_reachability_, other->has_minimum_reachability_);
  swap(has_radius_, other->has_radius_);
  swap(has_accuracy_, other->has_accuracy_);
  swap(has_time_, other->has_time_);
  swap(has_search_cutoff_, other->has_search_cutoff_);
  swap(has_street_side_tolerance_, other->has_street_side_tolerance_);
  swap(has_street_side_max_distance_, other->has_street_side_max_distance_);
  swap(has_preferred_layer_, other->has_preferred_layer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
  swap(_oneof_case_[6], other->_oneof_case_[6]);
  swap(_oneof_case_[7], other->_oneof_case_[7]);
  swap(_oneof_case_[8], other->_oneof_case_[8]);
  swap(_oneof_case_[9], other->_oneof_case_[9]);
  swap(_oneof_case_[10], other->_oneof_case_[10]);
}

std::string Location::GetTypeName() const {
  return "valhalla.Location";
}


// ===================================================================

void TransitEgressInfo::InitAsDefaultInstance() {
  ::valhalla::_TransitEgressInfo_default_instance_._instance.get_mutable()->ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class TransitEgressInfo::_Internal {
 public:
  static const ::valhalla::LatLng& ll(const TransitEgressInfo* msg);
};

const ::valhalla::LatLng&
TransitEgressInfo::_Internal::ll(const TransitEgressInfo* msg) {
  return *msg->ll_;
}
TransitEgressInfo::TransitEgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TransitEgressInfo)
}
TransitEgressInfo::TransitEgressInfo(const TransitEgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onestop_id().empty()) {
    onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onestop_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_ll()) {
    ll_ = new ::valhalla::LatLng(*from.ll_);
  } else {
    ll_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitEgressInfo)
}

void TransitEgressInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransitEgressInfo_common_2eproto.base);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ll_ = nullptr;
}

TransitEgressInfo::~TransitEgressInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitEgressInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransitEgressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ll_;
}

void TransitEgressInfo::ArenaDtor(void* object) {
  TransitEgressInfo* _this = reinterpret_cast< TransitEgressInfo* >(object);
  (void)_this;
}
void TransitEgressInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitEgressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitEgressInfo& TransitEgressInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransitEgressInfo_common_2eproto.base);
  return *internal_default_instance();
}


void TransitEgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitEgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ll_ != nullptr) {
    delete ll_;
  }
  ll_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* TransitEgressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string onestop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng ll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitEgressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TransitEgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onestop_id().data(), static_cast<int>(this->_internal_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitEgressInfo.onestop_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_onestop_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitEgressInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ll(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TransitEgressInfo)
  return target;
}

size_t TransitEgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitEgressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onestop_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ll_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitEgressInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransitEgressInfo*>(
      &from));
}

void TransitEgressInfo::MergeFrom(const TransitEgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitEgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onestop_id().size() > 0) {
    _internal_set_onestop_id(from._internal_onestop_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_ll()) {
    _internal_mutable_ll()->::valhalla::LatLng::MergeFrom(from._internal_ll());
  }
}

void TransitEgressInfo::CopyFrom(const TransitEgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitEgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitEgressInfo::IsInitialized() const {
  return true;
}

void TransitEgressInfo::InternalSwap(TransitEgressInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  onestop_id_.Swap(&other->onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ll_, other->ll_);
}

std::string TransitEgressInfo::GetTypeName() const {
  return "valhalla.TransitEgressInfo";
}


// ===================================================================

void TransitStationInfo::InitAsDefaultInstance() {
  ::valhalla::_TransitStationInfo_default_instance_._instance.get_mutable()->ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class TransitStationInfo::_Internal {
 public:
  static const ::valhalla::LatLng& ll(const TransitStationInfo* msg);
};

const ::valhalla::LatLng&
TransitStationInfo::_Internal::ll(const TransitStationInfo* msg) {
  return *msg->ll_;
}
TransitStationInfo::TransitStationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TransitStationInfo)
}
TransitStationInfo::TransitStationInfo(const TransitStationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onestop_id().empty()) {
    onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onestop_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_ll()) {
    ll_ = new ::valhalla::LatLng(*from.ll_);
  } else {
    ll_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitStationInfo)
}

void TransitStationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransitStationInfo_common_2eproto.base);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ll_ = nullptr;
}

TransitStationInfo::~TransitStationInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitStationInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransitStationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ll_;
}

void TransitStationInfo::ArenaDtor(void* object) {
  TransitStationInfo* _this = reinterpret_cast< TransitStationInfo* >(object);
  (void)_this;
}
void TransitStationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitStationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitStationInfo& TransitStationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransitStationInfo_common_2eproto.base);
  return *internal_default_instance();
}


void TransitStationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitStationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ll_ != nullptr) {
    delete ll_;
  }
  ll_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* TransitStationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string onestop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng ll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitStationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TransitStationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onestop_id().data(), static_cast<int>(this->_internal_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitStationInfo.onestop_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_onestop_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitStationInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ll(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TransitStationInfo)
  return target;
}

size_t TransitStationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitStationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onestop_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .valhalla.LatLng ll = 3;
  if (this->has_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ll_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitStationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransitStationInfo*>(
      &from));
}

void TransitStationInfo::MergeFrom(const TransitStationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitStationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onestop_id().size() > 0) {
    _internal_set_onestop_id(from._internal_onestop_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_ll()) {
    _internal_mutable_ll()->::valhalla::LatLng::MergeFrom(from._internal_ll());
  }
}

void TransitStationInfo::CopyFrom(const TransitStationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitStationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitStationInfo::IsInitialized() const {
  return true;
}

void TransitStationInfo::InternalSwap(TransitStationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  onestop_id_.Swap(&other->onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ll_, other->ll_);
}

std::string TransitStationInfo::GetTypeName() const {
  return "valhalla.TransitStationInfo";
}


// ===================================================================

void BikeShareStationInfo::InitAsDefaultInstance() {
}
class BikeShareStationInfo::_Internal {
 public:
};

BikeShareStationInfo::BikeShareStationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.BikeShareStationInfo)
}
BikeShareStationInfo::BikeShareStationInfo(const BikeShareStationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ref().empty()) {
    ref_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ref(),
      GetArena());
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_network(),
      GetArena());
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_(),
      GetArena());
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_cost_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(return_cost_));
  // @@protoc_insertion_point(copy_constructor:valhalla.BikeShareStationInfo)
}

void BikeShareStationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BikeShareStationInfo_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_cost_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(return_cost_));
}

BikeShareStationInfo::~BikeShareStationInfo() {
  // @@protoc_insertion_point(destructor:valhalla.BikeShareStationInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BikeShareStationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BikeShareStationInfo::ArenaDtor(void* object) {
  BikeShareStationInfo* _this = reinterpret_cast< BikeShareStationInfo* >(object);
  (void)_this;
}
void BikeShareStationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BikeShareStationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BikeShareStationInfo& BikeShareStationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BikeShareStationInfo_common_2eproto.base);
  return *internal_default_instance();
}


void BikeShareStationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.BikeShareStationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_cost_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(return_cost_));
  _internal_metadata_.Clear<std::string>();
}

const char* BikeShareStationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rent_cost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          rent_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float return_cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          return_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BikeShareStationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.BikeShareStationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ref = 2;
  if (this->ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ref().data(), static_cast<int>(this->_internal_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.ref");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ref(), target);
  }

  // uint32 capacity = 3;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_capacity(), target);
  }

  // string network = 4;
  if (this->network().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.network");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_network(), target);
  }

  // string operator = 5;
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.BikeShareStationInfo.operator");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_operator_(), target);
  }

  // float rent_cost = 6;
  if (!(this->rent_cost() <= 0 && this->rent_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rent_cost(), target);
  }

  // float return_cost = 7;
  if (!(this->return_cost() <= 0 && this->return_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_return_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.BikeShareStationInfo)
  return target;
}

size_t BikeShareStationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.BikeShareStationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ref = 2;
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ref());
  }

  // string network = 4;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string operator = 5;
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // uint32 capacity = 3;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capacity());
  }

  // float rent_cost = 6;
  if (!(this->rent_cost() <= 0 && this->rent_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float return_cost = 7;
  if (!(this->return_cost() <= 0 && this->return_cost() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BikeShareStationInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BikeShareStationInfo*>(
      &from));
}

void BikeShareStationInfo::MergeFrom(const BikeShareStationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.BikeShareStationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.ref().size() > 0) {
    _internal_set_ref(from._internal_ref());
  }
  if (from.network().size() > 0) {
    _internal_set_network(from._internal_network());
  }
  if (from.operator_().size() > 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (!(from.rent_cost() <= 0 && from.rent_cost() >= 0)) {
    _internal_set_rent_cost(from._internal_rent_cost());
  }
  if (!(from.return_cost() <= 0 && from.return_cost() >= 0)) {
    _internal_set_return_cost(from._internal_return_cost());
  }
}

void BikeShareStationInfo::CopyFrom(const BikeShareStationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.BikeShareStationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BikeShareStationInfo::IsInitialized() const {
  return true;
}

void BikeShareStationInfo::InternalSwap(BikeShareStationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ref_.Swap(&other->ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  network_.Swap(&other->network_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BikeShareStationInfo, return_cost_)
      + sizeof(BikeShareStationInfo::return_cost_)
      - PROTOBUF_FIELD_OFFSET(BikeShareStationInfo, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

std::string BikeShareStationInfo::GetTypeName() const {
  return "valhalla.BikeShareStationInfo";
}


// ===================================================================

void TransitPlatformInfo::InitAsDefaultInstance() {
  ::valhalla::_TransitPlatformInfo_default_instance_._instance.get_mutable()->ll_ = const_cast< ::valhalla::LatLng*>(
      ::valhalla::LatLng::internal_default_instance());
}
class TransitPlatformInfo::_Internal {
 public:
  static const ::valhalla::LatLng& ll(const TransitPlatformInfo* msg);
};

const ::valhalla::LatLng&
TransitPlatformInfo::_Internal::ll(const TransitPlatformInfo* msg) {
  return *msg->ll_;
}
TransitPlatformInfo::TransitPlatformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TransitPlatformInfo)
}
TransitPlatformInfo::TransitPlatformInfo(const TransitPlatformInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onestop_id().empty()) {
    onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onestop_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  arrival_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arrival_date_time().empty()) {
    arrival_date_time_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_arrival_date_time(),
      GetArena());
  }
  departure_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departure_date_time().empty()) {
    departure_date_time_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_departure_date_time(),
      GetArena());
  }
  station_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_station_onestop_id().empty()) {
    station_onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_station_onestop_id(),
      GetArena());
  }
  station_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_station_name().empty()) {
    station_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_station_name(),
      GetArena());
  }
  if (from._internal_has_ll()) {
    ll_ = new ::valhalla::LatLng(*from.ll_);
  } else {
    ll_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&assumed_schedule_) -
    reinterpret_cast<char*>(&type_)) + sizeof(assumed_schedule_));
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitPlatformInfo)
}

void TransitPlatformInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransitPlatformInfo_common_2eproto.base);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arrival_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departure_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  station_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  station_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assumed_schedule_) -
      reinterpret_cast<char*>(&ll_)) + sizeof(assumed_schedule_));
}

TransitPlatformInfo::~TransitPlatformInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitPlatformInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransitPlatformInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arrival_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departure_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  station_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  station_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ll_;
}

void TransitPlatformInfo::ArenaDtor(void* object) {
  TransitPlatformInfo* _this = reinterpret_cast< TransitPlatformInfo* >(object);
  (void)_this;
}
void TransitPlatformInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitPlatformInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitPlatformInfo& TransitPlatformInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransitPlatformInfo_common_2eproto.base);
  return *internal_default_instance();
}


void TransitPlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitPlatformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  arrival_date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  departure_date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  station_onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  station_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ll_ != nullptr) {
    delete ll_;
  }
  ll_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assumed_schedule_) -
      reinterpret_cast<char*>(&type_)) + sizeof(assumed_schedule_));
  _internal_metadata_.Clear<std::string>();
}

const char* TransitPlatformInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .valhalla.TransitPlatformInfo.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::TransitPlatformInfo_Type>(val));
        } else goto handle_unusual;
        continue;
      // string onestop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string arrival_date_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_arrival_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string departure_date_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_departure_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool assumed_schedule = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          assumed_schedule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.LatLng ll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string station_onestop_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_station_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string station_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_station_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitPlatformInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TransitPlatformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.TransitPlatformInfo.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string onestop_id = 2;
  if (this->onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onestop_id().data(), static_cast<int>(this->_internal_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.onestop_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_onestop_id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string arrival_date_time = 4;
  if (this->arrival_date_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arrival_date_time().data(), static_cast<int>(this->_internal_arrival_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.arrival_date_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_arrival_date_time(), target);
  }

  // string departure_date_time = 5;
  if (this->departure_date_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departure_date_time().data(), static_cast<int>(this->_internal_departure_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.departure_date_time");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_departure_date_time(), target);
  }

  // bool assumed_schedule = 6;
  if (this->assumed_schedule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_assumed_schedule(), target);
  }

  // .valhalla.LatLng ll = 7;
  if (this->has_ll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ll(this), target, stream);
  }

  // string station_onestop_id = 8;
  if (this->station_onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_onestop_id().data(), static_cast<int>(this->_internal_station_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.station_onestop_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_station_onestop_id(), target);
  }

  // string station_name = 9;
  if (this->station_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_name().data(), static_cast<int>(this->_internal_station_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitPlatformInfo.station_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_station_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TransitPlatformInfo)
  return target;
}

size_t TransitPlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitPlatformInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string onestop_id = 2;
  if (this->onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onestop_id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string arrival_date_time = 4;
  if (this->arrival_date_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arrival_date_time());
  }

  // string departure_date_time = 5;
  if (this->departure_date_time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_departure_date_time());
  }

  // string station_onestop_id = 8;
  if (this->station_onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_onestop_id());
  }

  // string station_name = 9;
  if (this->station_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_name());
  }

  // .valhalla.LatLng ll = 7;
  if (this->has_ll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ll_);
  }

  // .valhalla.TransitPlatformInfo.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool assumed_schedule = 6;
  if (this->assumed_schedule() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitPlatformInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransitPlatformInfo*>(
      &from));
}

void TransitPlatformInfo::MergeFrom(const TransitPlatformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitPlatformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onestop_id().size() > 0) {
    _internal_set_onestop_id(from._internal_onestop_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.arrival_date_time().size() > 0) {
    _internal_set_arrival_date_time(from._internal_arrival_date_time());
  }
  if (from.departure_date_time().size() > 0) {
    _internal_set_departure_date_time(from._internal_departure_date_time());
  }
  if (from.station_onestop_id().size() > 0) {
    _internal_set_station_onestop_id(from._internal_station_onestop_id());
  }
  if (from.station_name().size() > 0) {
    _internal_set_station_name(from._internal_station_name());
  }
  if (from.has_ll()) {
    _internal_mutable_ll()->::valhalla::LatLng::MergeFrom(from._internal_ll());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.assumed_schedule() != 0) {
    _internal_set_assumed_schedule(from._internal_assumed_schedule());
  }
}

void TransitPlatformInfo::CopyFrom(const TransitPlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitPlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitPlatformInfo::IsInitialized() const {
  return true;
}

void TransitPlatformInfo::InternalSwap(TransitPlatformInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  onestop_id_.Swap(&other->onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  arrival_date_time_.Swap(&other->arrival_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  departure_date_time_.Swap(&other->departure_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  station_onestop_id_.Swap(&other->station_onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  station_name_.Swap(&other->station_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransitPlatformInfo, assumed_schedule_)
      + sizeof(TransitPlatformInfo::assumed_schedule_)
      - PROTOBUF_FIELD_OFFSET(TransitPlatformInfo, ll_)>(
          reinterpret_cast<char*>(&ll_),
          reinterpret_cast<char*>(&other->ll_));
}

std::string TransitPlatformInfo::GetTypeName() const {
  return "valhalla.TransitPlatformInfo";
}


// ===================================================================

void TransitRouteInfo::InitAsDefaultInstance() {
}
class TransitRouteInfo::_Internal {
 public:
};

TransitRouteInfo::TransitRouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  transit_stops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TransitRouteInfo)
}
TransitRouteInfo::TransitRouteInfo(const TransitRouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      transit_stops_(from.transit_stops_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onestop_id().empty()) {
    onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onestop_id(),
      GetArena());
  }
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_name().empty()) {
    short_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_short_name(),
      GetArena());
  }
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_long_name().empty()) {
    long_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_long_name(),
      GetArena());
  }
  headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headsign().empty()) {
    headsign_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_headsign(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  operator_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_onestop_id().empty()) {
    operator_onestop_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_onestop_id(),
      GetArena());
  }
  operator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_name().empty()) {
    operator_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_name(),
      GetArena());
  }
  operator_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_url().empty()) {
    operator_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_url(),
      GetArena());
  }
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_color_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(text_color_));
  // @@protoc_insertion_point(copy_constructor:valhalla.TransitRouteInfo)
}

void TransitRouteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransitRouteInfo_common_2eproto.base);
  onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_onestop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_color_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(text_color_));
}

TransitRouteInfo::~TransitRouteInfo() {
  // @@protoc_insertion_point(destructor:valhalla.TransitRouteInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TransitRouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  long_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_onestop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransitRouteInfo::ArenaDtor(void* object) {
  TransitRouteInfo* _this = reinterpret_cast< TransitRouteInfo* >(object);
  (void)_this;
}
void TransitRouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransitRouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransitRouteInfo& TransitRouteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransitRouteInfo_common_2eproto.base);
  return *internal_default_instance();
}


void TransitRouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TransitRouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transit_stops_.Clear();
  onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  long_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_onestop_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_color_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(text_color_));
  _internal_metadata_.Clear<std::string>();
}

const char* TransitRouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string onestop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trip_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trip_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string short_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_short_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string long_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_long_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headsign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_headsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 text_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_onestop_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_operator_onestop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_operator_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator_url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_operator_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transit_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransitRouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TransitRouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onestop_id().data(), static_cast<int>(this->_internal_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.onestop_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_onestop_id(), target);
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_block_id(), target);
  }

  // uint32 trip_id = 3;
  if (this->trip_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trip_id(), target);
  }

  // string short_name = 4;
  if (this->short_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_short_name().data(), static_cast<int>(this->_internal_short_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.short_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_short_name(), target);
  }

  // string long_name = 5;
  if (this->long_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_long_name().data(), static_cast<int>(this->_internal_long_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.long_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_long_name(), target);
  }

  // string headsign = 6;
  if (this->headsign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headsign().data(), static_cast<int>(this->_internal_headsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.headsign");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_headsign(), target);
  }

  // uint32 color = 7;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_color(), target);
  }

  // uint32 text_color = 8;
  if (this->text_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_text_color(), target);
  }

  // string description = 9;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.description");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_description(), target);
  }

  // string operator_onestop_id = 10;
  if (this->operator_onestop_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_onestop_id().data(), static_cast<int>(this->_internal_operator_onestop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_onestop_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_operator_onestop_id(), target);
  }

  // string operator_name = 11;
  if (this->operator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_name().data(), static_cast<int>(this->_internal_operator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_operator_name(), target);
  }

  // string operator_url = 12;
  if (this->operator_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_url().data(), static_cast<int>(this->_internal_operator_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TransitRouteInfo.operator_url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_operator_url(), target);
  }

  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transit_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_transit_stops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TransitRouteInfo)
  return target;
}

size_t TransitRouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TransitRouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  total_size += 1UL * this->_internal_transit_stops_size();
  for (const auto& msg : this->transit_stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string onestop_id = 1;
  if (this->onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onestop_id());
  }

  // string short_name = 4;
  if (this->short_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_name());
  }

  // string long_name = 5;
  if (this->long_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_long_name());
  }

  // string headsign = 6;
  if (this->headsign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headsign());
  }

  // string description = 9;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string operator_onestop_id = 10;
  if (this->operator_onestop_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_onestop_id());
  }

  // string operator_name = 11;
  if (this->operator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_name());
  }

  // string operator_url = 12;
  if (this->operator_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_url());
  }

  // uint32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_id());
  }

  // uint32 trip_id = 3;
  if (this->trip_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trip_id());
  }

  // uint32 color = 7;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  // uint32 text_color = 8;
  if (this->text_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_text_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransitRouteInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TransitRouteInfo*>(
      &from));
}

void TransitRouteInfo::MergeFrom(const TransitRouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TransitRouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transit_stops_.MergeFrom(from.transit_stops_);
  if (from.onestop_id().size() > 0) {
    _internal_set_onestop_id(from._internal_onestop_id());
  }
  if (from.short_name().size() > 0) {
    _internal_set_short_name(from._internal_short_name());
  }
  if (from.long_name().size() > 0) {
    _internal_set_long_name(from._internal_long_name());
  }
  if (from.headsign().size() > 0) {
    _internal_set_headsign(from._internal_headsign());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.operator_onestop_id().size() > 0) {
    _internal_set_operator_onestop_id(from._internal_operator_onestop_id());
  }
  if (from.operator_name().size() > 0) {
    _internal_set_operator_name(from._internal_operator_name());
  }
  if (from.operator_url().size() > 0) {
    _internal_set_operator_url(from._internal_operator_url());
  }
  if (from.block_id() != 0) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from.trip_id() != 0) {
    _internal_set_trip_id(from._internal_trip_id());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.text_color() != 0) {
    _internal_set_text_color(from._internal_text_color());
  }
}

void TransitRouteInfo::CopyFrom(const TransitRouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TransitRouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitRouteInfo::IsInitialized() const {
  return true;
}

void TransitRouteInfo::InternalSwap(TransitRouteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  transit_stops_.InternalSwap(&other->transit_stops_);
  onestop_id_.Swap(&other->onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_name_.Swap(&other->short_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  long_name_.Swap(&other->long_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headsign_.Swap(&other->headsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_onestop_id_.Swap(&other->operator_onestop_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_name_.Swap(&other->operator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator_url_.Swap(&other->operator_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransitRouteInfo, text_color_)
      + sizeof(TransitRouteInfo::text_color_)
      - PROTOBUF_FIELD_OFFSET(TransitRouteInfo, block_id_)>(
          reinterpret_cast<char*>(&block_id_),
          reinterpret_cast<char*>(&other->block_id_));
}

std::string TransitRouteInfo::GetTypeName() const {
  return "valhalla.TransitRouteInfo";
}


// ===================================================================

void Pronunciation::InitAsDefaultInstance() {
}
class Pronunciation::_Internal {
 public:
};

Pronunciation::Pronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Pronunciation)
}
Pronunciation::Pronunciation(const Pronunciation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  alphabet_ = from.alphabet_;
  // @@protoc_insertion_point(copy_constructor:valhalla.Pronunciation)
}

void Pronunciation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pronunciation_common_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alphabet_ = 0;
}

Pronunciation::~Pronunciation() {
  // @@protoc_insertion_point(destructor:valhalla.Pronunciation)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Pronunciation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pronunciation::ArenaDtor(void* object) {
  Pronunciation* _this = reinterpret_cast< Pronunciation* >(object);
  (void)_this;
}
void Pronunciation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pronunciation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pronunciation& Pronunciation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pronunciation_common_2eproto.base);
  return *internal_default_instance();
}


void Pronunciation::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Pronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alphabet_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Pronunciation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .valhalla.Pronunciation.Alphabet alphabet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_alphabet(static_cast<::valhalla::Pronunciation_Alphabet>(val));
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pronunciation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.Pronunciation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .valhalla.Pronunciation.Alphabet alphabet = 1;
  if (this->alphabet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_alphabet(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.Pronunciation.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.Pronunciation)
  return target;
}

size_t Pronunciation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Pronunciation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .valhalla.Pronunciation.Alphabet alphabet = 1;
  if (this->alphabet() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alphabet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pronunciation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Pronunciation*>(
      &from));
}

void Pronunciation::MergeFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Pronunciation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.alphabet() != 0) {
    _internal_set_alphabet(from._internal_alphabet());
  }
}

void Pronunciation::CopyFrom(const Pronunciation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Pronunciation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pronunciation::IsInitialized() const {
  return true;
}

void Pronunciation::InternalSwap(Pronunciation* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(alphabet_, other->alphabet_);
}

std::string Pronunciation::GetTypeName() const {
  return "valhalla.Pronunciation";
}


// ===================================================================

void StreetName::InitAsDefaultInstance() {
  ::valhalla::_StreetName_default_instance_._instance.get_mutable()->pronunciation_ = const_cast< ::valhalla::Pronunciation*>(
      ::valhalla::Pronunciation::internal_default_instance());
}
class StreetName::_Internal {
 public:
  static const ::valhalla::Pronunciation& pronunciation(const StreetName* msg);
};

const ::valhalla::Pronunciation&
StreetName::_Internal::pronunciation(const StreetName* msg) {
  return *msg->pronunciation_;
}
StreetName::StreetName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.StreetName)
}
StreetName::StreetName(const StreetName& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_pronunciation()) {
    pronunciation_ = new ::valhalla::Pronunciation(*from.pronunciation_);
  } else {
    pronunciation_ = nullptr;
  }
  is_route_number_ = from.is_route_number_;
  // @@protoc_insertion_point(copy_constructor:valhalla.StreetName)
}

void StreetName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreetName_common_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pronunciation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_route_number_) -
      reinterpret_cast<char*>(&pronunciation_)) + sizeof(is_route_number_));
}

StreetName::~StreetName() {
  // @@protoc_insertion_point(destructor:valhalla.StreetName)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreetName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pronunciation_;
}

void StreetName::ArenaDtor(void* object) {
  StreetName* _this = reinterpret_cast< StreetName* >(object);
  (void)_this;
}
void StreetName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreetName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreetName& StreetName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreetName_common_2eproto.base);
  return *internal_default_instance();
}


void StreetName::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.StreetName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pronunciation_ != nullptr) {
    delete pronunciation_;
  }
  pronunciation_ = nullptr;
  is_route_number_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* StreetName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_route_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_route_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.Pronunciation pronunciation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pronunciation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreetName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.StreetName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.StreetName.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // bool is_route_number = 2;
  if (this->is_route_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_route_number(), target);
  }

  // .valhalla.Pronunciation pronunciation = 3;
  if (this->has_pronunciation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pronunciation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.StreetName)
  return target;
}

size_t StreetName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.StreetName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .valhalla.Pronunciation pronunciation = 3;
  if (this->has_pronunciation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pronunciation_);
  }

  // bool is_route_number = 2;
  if (this->is_route_number() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreetName::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreetName*>(
      &from));
}

void StreetName::MergeFrom(const StreetName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.StreetName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_pronunciation()) {
    _internal_mutable_pronunciation()->::valhalla::Pronunciation::MergeFrom(from._internal_pronunciation());
  }
  if (from.is_route_number() != 0) {
    _internal_set_is_route_number(from._internal_is_route_number());
  }
}

void StreetName::CopyFrom(const StreetName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.StreetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetName::IsInitialized() const {
  return true;
}

void StreetName::InternalSwap(StreetName* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreetName, is_route_number_)
      + sizeof(StreetName::is_route_number_)
      - PROTOBUF_FIELD_OFFSET(StreetName, pronunciation_)>(
          reinterpret_cast<char*>(&pronunciation_),
          reinterpret_cast<char*>(&other->pronunciation_));
}

std::string StreetName::GetTypeName() const {
  return "valhalla.StreetName";
}


// ===================================================================

void TurnLane::InitAsDefaultInstance() {
}
class TurnLane::_Internal {
 public:
};

TurnLane::TurnLane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TurnLane)
}
TurnLane::TurnLane(const TurnLane& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&directions_mask_, &from.directions_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_direction_) -
    reinterpret_cast<char*>(&directions_mask_)) + sizeof(active_direction_));
  // @@protoc_insertion_point(copy_constructor:valhalla.TurnLane)
}

void TurnLane::SharedCtor() {
  ::memset(&directions_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_direction_) -
      reinterpret_cast<char*>(&directions_mask_)) + sizeof(active_direction_));
}

TurnLane::~TurnLane() {
  // @@protoc_insertion_point(destructor:valhalla.TurnLane)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TurnLane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TurnLane::ArenaDtor(void* object) {
  TurnLane* _this = reinterpret_cast< TurnLane* >(object);
  (void)_this;
}
void TurnLane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TurnLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TurnLane& TurnLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TurnLane_common_2eproto.base);
  return *internal_default_instance();
}


void TurnLane::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TurnLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&directions_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_direction_) -
      reinterpret_cast<char*>(&directions_mask_)) + sizeof(active_direction_));
  _internal_metadata_.Clear<std::string>();
}

const char* TurnLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 directions_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          directions_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.TurnLane.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::valhalla::TurnLane_State>(val));
        } else goto handle_unusual;
        continue;
      // uint32 active_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          active_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TurnLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TurnLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 directions_mask = 1;
  if (this->directions_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_directions_mask(), target);
  }

  // .valhalla.TurnLane.State state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // uint32 active_direction = 3;
  if (this->active_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TurnLane)
  return target;
}

size_t TurnLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TurnLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 directions_mask = 1;
  if (this->directions_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_directions_mask());
  }

  // .valhalla.TurnLane.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint32 active_direction = 3;
  if (this->active_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TurnLane::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TurnLane*>(
      &from));
}

void TurnLane::MergeFrom(const TurnLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TurnLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directions_mask() != 0) {
    _internal_set_directions_mask(from._internal_directions_mask());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.active_direction() != 0) {
    _internal_set_active_direction(from._internal_active_direction());
  }
}

void TurnLane::CopyFrom(const TurnLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TurnLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnLane::IsInitialized() const {
  return true;
}

void TurnLane::InternalSwap(TurnLane* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TurnLane, active_direction_)
      + sizeof(TurnLane::active_direction_)
      - PROTOBUF_FIELD_OFFSET(TurnLane, directions_mask_)>(
          reinterpret_cast<char*>(&directions_mask_),
          reinterpret_cast<char*>(&other->directions_mask_));
}

std::string TurnLane::GetTypeName() const {
  return "valhalla.TurnLane";
}


// ===================================================================

void TaggedValue::InitAsDefaultInstance() {
}
class TaggedValue::_Internal {
 public:
};

TaggedValue::TaggedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TaggedValue)
}
TaggedValue::TaggedValue(const TaggedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:valhalla.TaggedValue)
}

void TaggedValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaggedValue_common_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TaggedValue::~TaggedValue() {
  // @@protoc_insertion_point(destructor:valhalla.TaggedValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TaggedValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaggedValue::ArenaDtor(void* object) {
  TaggedValue* _this = reinterpret_cast< TaggedValue* >(object);
  (void)_this;
}
void TaggedValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaggedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaggedValue& TaggedValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaggedValue_common_2eproto.base);
  return *internal_default_instance();
}


void TaggedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TaggedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* TaggedValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .valhalla.TaggedValue.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::valhalla::TaggedValue_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaggedValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TaggedValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .valhalla.TaggedValue.Type type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TaggedValue)
  return target;
}

size_t TaggedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TaggedValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .valhalla.TaggedValue.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaggedValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaggedValue*>(
      &from));
}

void TaggedValue::MergeFrom(const TaggedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TaggedValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TaggedValue::CopyFrom(const TaggedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TaggedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaggedValue::IsInitialized() const {
  return true;
}

void TaggedValue::InternalSwap(TaggedValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string TaggedValue::GetTypeName() const {
  return "valhalla.TaggedValue";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::LatLng* Arena::CreateMaybeMessage< ::valhalla::LatLng >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::LatLng >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::BoundingBox* Arena::CreateMaybeMessage< ::valhalla::BoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::SearchFilter* Arena::CreateMaybeMessage< ::valhalla::SearchFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::SearchFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::PathEdge* Arena::CreateMaybeMessage< ::valhalla::PathEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::PathEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::Correlation* Arena::CreateMaybeMessage< ::valhalla::Correlation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Correlation >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::Location* Arena::CreateMaybeMessage< ::valhalla::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TransitEgressInfo* Arena::CreateMaybeMessage< ::valhalla::TransitEgressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TransitEgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TransitStationInfo* Arena::CreateMaybeMessage< ::valhalla::TransitStationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TransitStationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::BikeShareStationInfo* Arena::CreateMaybeMessage< ::valhalla::BikeShareStationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::BikeShareStationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TransitPlatformInfo* Arena::CreateMaybeMessage< ::valhalla::TransitPlatformInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TransitPlatformInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TransitRouteInfo* Arena::CreateMaybeMessage< ::valhalla::TransitRouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TransitRouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::Pronunciation* Arena::CreateMaybeMessage< ::valhalla::Pronunciation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::Pronunciation >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::StreetName* Arena::CreateMaybeMessage< ::valhalla::StreetName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::StreetName >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TurnLane* Arena::CreateMaybeMessage< ::valhalla::TurnLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TurnLane >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TaggedValue* Arena::CreateMaybeMessage< ::valhalla::TaggedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TaggedValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
