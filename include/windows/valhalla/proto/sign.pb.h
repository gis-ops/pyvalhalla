// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sign_2eproto {
  static const uint32_t offsets[];
};
namespace valhalla {
class TripSign;
struct TripSignDefaultTypeInternal;
extern TripSignDefaultTypeInternal _TripSign_default_instance_;
class TripSignElement;
struct TripSignElementDefaultTypeInternal;
extern TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::TripSign* Arena::CreateMaybeMessage<::valhalla::TripSign>(Arena*);
template<> ::valhalla::TripSignElement* Arena::CreateMaybeMessage<::valhalla::TripSignElement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

// ===================================================================

class TripSignElement final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSignElement) */ {
 public:
  inline TripSignElement() : TripSignElement(nullptr) {}
  ~TripSignElement() override;
  explicit PROTOBUF_CONSTEXPR TripSignElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TripSignElement(const TripSignElement& from);
  TripSignElement(TripSignElement&& from) noexcept
    : TripSignElement() {
    *this = ::std::move(from);
  }

  inline TripSignElement& operator=(const TripSignElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSignElement& operator=(TripSignElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TripSignElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripSignElement* internal_default_instance() {
    return reinterpret_cast<const TripSignElement*>(
               &_TripSignElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TripSignElement& a, TripSignElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSignElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSignElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripSignElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripSignElement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TripSignElement& from);
  void MergeFrom(const TripSignElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSignElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TripSignElement";
  }
  protected:
  explicit TripSignElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kPronunciationFieldNumber = 4,
    kIsRouteNumberFieldNumber = 2,
    kConsecutiveCountFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .valhalla.Pronunciation pronunciation = 4;
  bool has_pronunciation() const;
  private:
  bool _internal_has_pronunciation() const;
  public:
  void clear_pronunciation();
  const ::valhalla::Pronunciation& pronunciation() const;
  PROTOBUF_NODISCARD ::valhalla::Pronunciation* release_pronunciation();
  ::valhalla::Pronunciation* mutable_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation);
  private:
  const ::valhalla::Pronunciation& _internal_pronunciation() const;
  ::valhalla::Pronunciation* _internal_mutable_pronunciation();
  public:
  void unsafe_arena_set_allocated_pronunciation(
      ::valhalla::Pronunciation* pronunciation);
  ::valhalla::Pronunciation* unsafe_arena_release_pronunciation();

  // bool is_route_number = 2;
  void clear_is_route_number();
  bool is_route_number() const;
  void set_is_route_number(bool value);
  private:
  bool _internal_is_route_number() const;
  void _internal_set_is_route_number(bool value);
  public:

  // uint32 consecutive_count = 3;
  void clear_consecutive_count();
  uint32_t consecutive_count() const;
  void set_consecutive_count(uint32_t value);
  private:
  uint32_t _internal_consecutive_count() const;
  void _internal_set_consecutive_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.TripSignElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::valhalla::Pronunciation* pronunciation_;
    bool is_route_number_;
    uint32_t consecutive_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sign_2eproto;
};
// -------------------------------------------------------------------

class TripSign final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TripSign) */ {
 public:
  inline TripSign() : TripSign(nullptr) {}
  ~TripSign() override;
  explicit PROTOBUF_CONSTEXPR TripSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TripSign(const TripSign& from);
  TripSign(TripSign&& from) noexcept
    : TripSign() {
    *this = ::std::move(from);
  }

  inline TripSign& operator=(const TripSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripSign& operator=(TripSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TripSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripSign* internal_default_instance() {
    return reinterpret_cast<const TripSign*>(
               &_TripSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TripSign& a, TripSign& b) {
    a.Swap(&b);
  }
  inline void Swap(TripSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripSign>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TripSign& from);
  void MergeFrom(const TripSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TripSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TripSign";
  }
  protected:
  explicit TripSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExitNumbersFieldNumber = 1,
    kExitOntoStreetsFieldNumber = 2,
    kExitTowardLocationsFieldNumber = 3,
    kExitNamesFieldNumber = 4,
    kGuideOntoStreetsFieldNumber = 5,
    kGuideTowardLocationsFieldNumber = 6,
    kJunctionNamesFieldNumber = 7,
    kGuidanceViewJunctionsFieldNumber = 8,
    kGuidanceViewSignboardsFieldNumber = 9,
  };
  // repeated .valhalla.TripSignElement exit_numbers = 1;
  int exit_numbers_size() const;
  private:
  int _internal_exit_numbers_size() const;
  public:
  void clear_exit_numbers();
  ::valhalla::TripSignElement* mutable_exit_numbers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_numbers();
  private:
  const ::valhalla::TripSignElement& _internal_exit_numbers(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_numbers();
  public:
  const ::valhalla::TripSignElement& exit_numbers(int index) const;
  ::valhalla::TripSignElement* add_exit_numbers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_numbers() const;

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  int exit_onto_streets_size() const;
  private:
  int _internal_exit_onto_streets_size() const;
  public:
  void clear_exit_onto_streets();
  ::valhalla::TripSignElement* mutable_exit_onto_streets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_onto_streets();
  private:
  const ::valhalla::TripSignElement& _internal_exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_onto_streets();
  public:
  const ::valhalla::TripSignElement& exit_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_exit_onto_streets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_onto_streets() const;

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  int exit_toward_locations_size() const;
  private:
  int _internal_exit_toward_locations_size() const;
  public:
  void clear_exit_toward_locations();
  ::valhalla::TripSignElement* mutable_exit_toward_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_toward_locations();
  private:
  const ::valhalla::TripSignElement& _internal_exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_toward_locations();
  public:
  const ::valhalla::TripSignElement& exit_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_exit_toward_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_toward_locations() const;

  // repeated .valhalla.TripSignElement exit_names = 4;
  int exit_names_size() const;
  private:
  int _internal_exit_names_size() const;
  public:
  void clear_exit_names();
  ::valhalla::TripSignElement* mutable_exit_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_exit_names();
  private:
  const ::valhalla::TripSignElement& _internal_exit_names(int index) const;
  ::valhalla::TripSignElement* _internal_add_exit_names();
  public:
  const ::valhalla::TripSignElement& exit_names(int index) const;
  ::valhalla::TripSignElement* add_exit_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      exit_names() const;

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  int guide_onto_streets_size() const;
  private:
  int _internal_guide_onto_streets_size() const;
  public:
  void clear_guide_onto_streets();
  ::valhalla::TripSignElement* mutable_guide_onto_streets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_onto_streets();
  private:
  const ::valhalla::TripSignElement& _internal_guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* _internal_add_guide_onto_streets();
  public:
  const ::valhalla::TripSignElement& guide_onto_streets(int index) const;
  ::valhalla::TripSignElement* add_guide_onto_streets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_onto_streets() const;

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  int guide_toward_locations_size() const;
  private:
  int _internal_guide_toward_locations_size() const;
  public:
  void clear_guide_toward_locations();
  ::valhalla::TripSignElement* mutable_guide_toward_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guide_toward_locations();
  private:
  const ::valhalla::TripSignElement& _internal_guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* _internal_add_guide_toward_locations();
  public:
  const ::valhalla::TripSignElement& guide_toward_locations(int index) const;
  ::valhalla::TripSignElement* add_guide_toward_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guide_toward_locations() const;

  // repeated .valhalla.TripSignElement junction_names = 7;
  int junction_names_size() const;
  private:
  int _internal_junction_names_size() const;
  public:
  void clear_junction_names();
  ::valhalla::TripSignElement* mutable_junction_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_junction_names();
  private:
  const ::valhalla::TripSignElement& _internal_junction_names(int index) const;
  ::valhalla::TripSignElement* _internal_add_junction_names();
  public:
  const ::valhalla::TripSignElement& junction_names(int index) const;
  ::valhalla::TripSignElement* add_junction_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      junction_names() const;

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  int guidance_view_junctions_size() const;
  private:
  int _internal_guidance_view_junctions_size() const;
  public:
  void clear_guidance_view_junctions();
  ::valhalla::TripSignElement* mutable_guidance_view_junctions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_junctions();
  private:
  const ::valhalla::TripSignElement& _internal_guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* _internal_add_guidance_view_junctions();
  public:
  const ::valhalla::TripSignElement& guidance_view_junctions(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_junctions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_junctions() const;

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  int guidance_view_signboards_size() const;
  private:
  int _internal_guidance_view_signboards_size() const;
  public:
  void clear_guidance_view_signboards();
  ::valhalla::TripSignElement* mutable_guidance_view_signboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
      mutable_guidance_view_signboards();
  private:
  const ::valhalla::TripSignElement& _internal_guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* _internal_add_guidance_view_signboards();
  public:
  const ::valhalla::TripSignElement& guidance_view_signboards(int index) const;
  ::valhalla::TripSignElement* add_guidance_view_signboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
      guidance_view_signboards() const;

  // @@protoc_insertion_point(class_scope:valhalla.TripSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_numbers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_onto_streets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_toward_locations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > exit_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guide_onto_streets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guide_toward_locations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > junction_names_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_junctions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement > guidance_view_signboards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TripSignElement

// string text = 1;
inline void TripSignElement::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TripSignElement::text() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TripSignElement::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.text)
}
inline std::string* TripSignElement::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.text)
  return _s;
}
inline const std::string& TripSignElement::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TripSignElement::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TripSignElement::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TripSignElement::release_text() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.text)
  return _impl_.text_.Release();
}
inline void TripSignElement::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.text)
}

// bool is_route_number = 2;
inline void TripSignElement::clear_is_route_number() {
  _impl_.is_route_number_ = false;
}
inline bool TripSignElement::_internal_is_route_number() const {
  return _impl_.is_route_number_;
}
inline bool TripSignElement::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.is_route_number)
  return _internal_is_route_number();
}
inline void TripSignElement::_internal_set_is_route_number(bool value) {
  
  _impl_.is_route_number_ = value;
}
inline void TripSignElement::set_is_route_number(bool value) {
  _internal_set_is_route_number(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.is_route_number)
}

// uint32 consecutive_count = 3;
inline void TripSignElement::clear_consecutive_count() {
  _impl_.consecutive_count_ = 0u;
}
inline uint32_t TripSignElement::_internal_consecutive_count() const {
  return _impl_.consecutive_count_;
}
inline uint32_t TripSignElement::consecutive_count() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.consecutive_count)
  return _internal_consecutive_count();
}
inline void TripSignElement::_internal_set_consecutive_count(uint32_t value) {
  
  _impl_.consecutive_count_ = value;
}
inline void TripSignElement::set_consecutive_count(uint32_t value) {
  _internal_set_consecutive_count(value);
  // @@protoc_insertion_point(field_set:valhalla.TripSignElement.consecutive_count)
}

// .valhalla.Pronunciation pronunciation = 4;
inline bool TripSignElement::_internal_has_pronunciation() const {
  return this != internal_default_instance() && _impl_.pronunciation_ != nullptr;
}
inline bool TripSignElement::has_pronunciation() const {
  return _internal_has_pronunciation();
}
inline const ::valhalla::Pronunciation& TripSignElement::_internal_pronunciation() const {
  const ::valhalla::Pronunciation* p = _impl_.pronunciation_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Pronunciation&>(
      ::valhalla::_Pronunciation_default_instance_);
}
inline const ::valhalla::Pronunciation& TripSignElement::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.TripSignElement.pronunciation)
  return _internal_pronunciation();
}
inline void TripSignElement::unsafe_arena_set_allocated_pronunciation(
    ::valhalla::Pronunciation* pronunciation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pronunciation_);
  }
  _impl_.pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TripSignElement.pronunciation)
}
inline ::valhalla::Pronunciation* TripSignElement::release_pronunciation() {
  
  ::valhalla::Pronunciation* temp = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::Pronunciation* TripSignElement::unsafe_arena_release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.TripSignElement.pronunciation)
  
  ::valhalla::Pronunciation* temp = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
  return temp;
}
inline ::valhalla::Pronunciation* TripSignElement::_internal_mutable_pronunciation() {
  
  if (_impl_.pronunciation_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Pronunciation>(GetArenaForAllocation());
    _impl_.pronunciation_ = p;
  }
  return _impl_.pronunciation_;
}
inline ::valhalla::Pronunciation* TripSignElement::mutable_pronunciation() {
  ::valhalla::Pronunciation* _msg = _internal_mutable_pronunciation();
  // @@protoc_insertion_point(field_mutable:valhalla.TripSignElement.pronunciation)
  return _msg;
}
inline void TripSignElement::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pronunciation_);
  }
  if (pronunciation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pronunciation));
    if (message_arena != submessage_arena) {
      pronunciation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pronunciation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pronunciation_ = pronunciation;
  // @@protoc_insertion_point(field_set_allocated:valhalla.TripSignElement.pronunciation)
}

// -------------------------------------------------------------------

// TripSign

// repeated .valhalla.TripSignElement exit_numbers = 1;
inline int TripSign::_internal_exit_numbers_size() const {
  return _impl_.exit_numbers_.size();
}
inline int TripSign::exit_numbers_size() const {
  return _internal_exit_numbers_size();
}
inline void TripSign::clear_exit_numbers() {
  _impl_.exit_numbers_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_numbers)
  return _impl_.exit_numbers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_numbers() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_numbers)
  return &_impl_.exit_numbers_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_numbers(int index) const {
  return _impl_.exit_numbers_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_numbers(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_numbers)
  return _internal_exit_numbers(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_numbers() {
  return _impl_.exit_numbers_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_numbers() {
  ::valhalla::TripSignElement* _add = _internal_add_exit_numbers();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_numbers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_numbers() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_numbers)
  return _impl_.exit_numbers_;
}

// repeated .valhalla.TripSignElement exit_onto_streets = 2;
inline int TripSign::_internal_exit_onto_streets_size() const {
  return _impl_.exit_onto_streets_.size();
}
inline int TripSign::exit_onto_streets_size() const {
  return _internal_exit_onto_streets_size();
}
inline void TripSign::clear_exit_onto_streets() {
  _impl_.exit_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_onto_streets)
  return _impl_.exit_onto_streets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_onto_streets)
  return &_impl_.exit_onto_streets_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_onto_streets(int index) const {
  return _impl_.exit_onto_streets_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_onto_streets)
  return _internal_exit_onto_streets(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_onto_streets() {
  return _impl_.exit_onto_streets_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_onto_streets() {
  ::valhalla::TripSignElement* _add = _internal_add_exit_onto_streets();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_onto_streets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_onto_streets)
  return _impl_.exit_onto_streets_;
}

// repeated .valhalla.TripSignElement exit_toward_locations = 3;
inline int TripSign::_internal_exit_toward_locations_size() const {
  return _impl_.exit_toward_locations_.size();
}
inline int TripSign::exit_toward_locations_size() const {
  return _internal_exit_toward_locations_size();
}
inline void TripSign::clear_exit_toward_locations() {
  _impl_.exit_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_toward_locations)
  return _impl_.exit_toward_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_toward_locations)
  return &_impl_.exit_toward_locations_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_toward_locations(int index) const {
  return _impl_.exit_toward_locations_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_toward_locations)
  return _internal_exit_toward_locations(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_toward_locations() {
  return _impl_.exit_toward_locations_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_toward_locations() {
  ::valhalla::TripSignElement* _add = _internal_add_exit_toward_locations();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_toward_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_toward_locations)
  return _impl_.exit_toward_locations_;
}

// repeated .valhalla.TripSignElement exit_names = 4;
inline int TripSign::_internal_exit_names_size() const {
  return _impl_.exit_names_.size();
}
inline int TripSign::exit_names_size() const {
  return _internal_exit_names_size();
}
inline void TripSign::clear_exit_names() {
  _impl_.exit_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_exit_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.exit_names)
  return _impl_.exit_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_exit_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.exit_names)
  return &_impl_.exit_names_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_exit_names(int index) const {
  return _impl_.exit_names_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::exit_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.exit_names)
  return _internal_exit_names(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_exit_names() {
  return _impl_.exit_names_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_exit_names() {
  ::valhalla::TripSignElement* _add = _internal_add_exit_names();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.exit_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::exit_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.exit_names)
  return _impl_.exit_names_;
}

// repeated .valhalla.TripSignElement guide_onto_streets = 5;
inline int TripSign::_internal_guide_onto_streets_size() const {
  return _impl_.guide_onto_streets_.size();
}
inline int TripSign::guide_onto_streets_size() const {
  return _internal_guide_onto_streets_size();
}
inline void TripSign::clear_guide_onto_streets() {
  _impl_.guide_onto_streets_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_onto_streets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_onto_streets)
  return _impl_.guide_onto_streets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_onto_streets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_onto_streets)
  return &_impl_.guide_onto_streets_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guide_onto_streets(int index) const {
  return _impl_.guide_onto_streets_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guide_onto_streets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_onto_streets)
  return _internal_guide_onto_streets(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guide_onto_streets() {
  return _impl_.guide_onto_streets_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guide_onto_streets() {
  ::valhalla::TripSignElement* _add = _internal_add_guide_onto_streets();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_onto_streets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_onto_streets() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_onto_streets)
  return _impl_.guide_onto_streets_;
}

// repeated .valhalla.TripSignElement guide_toward_locations = 6;
inline int TripSign::_internal_guide_toward_locations_size() const {
  return _impl_.guide_toward_locations_.size();
}
inline int TripSign::guide_toward_locations_size() const {
  return _internal_guide_toward_locations_size();
}
inline void TripSign::clear_guide_toward_locations() {
  _impl_.guide_toward_locations_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guide_toward_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guide_toward_locations)
  return _impl_.guide_toward_locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guide_toward_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guide_toward_locations)
  return &_impl_.guide_toward_locations_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guide_toward_locations(int index) const {
  return _impl_.guide_toward_locations_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guide_toward_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guide_toward_locations)
  return _internal_guide_toward_locations(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guide_toward_locations() {
  return _impl_.guide_toward_locations_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guide_toward_locations() {
  ::valhalla::TripSignElement* _add = _internal_add_guide_toward_locations();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guide_toward_locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guide_toward_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guide_toward_locations)
  return _impl_.guide_toward_locations_;
}

// repeated .valhalla.TripSignElement junction_names = 7;
inline int TripSign::_internal_junction_names_size() const {
  return _impl_.junction_names_.size();
}
inline int TripSign::junction_names_size() const {
  return _internal_junction_names_size();
}
inline void TripSign::clear_junction_names() {
  _impl_.junction_names_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_junction_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.junction_names)
  return _impl_.junction_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_junction_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.junction_names)
  return &_impl_.junction_names_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_junction_names(int index) const {
  return _impl_.junction_names_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::junction_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.junction_names)
  return _internal_junction_names(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_junction_names() {
  return _impl_.junction_names_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_junction_names() {
  ::valhalla::TripSignElement* _add = _internal_add_junction_names();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.junction_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::junction_names() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.junction_names)
  return _impl_.junction_names_;
}

// repeated .valhalla.TripSignElement guidance_view_junctions = 8;
inline int TripSign::_internal_guidance_view_junctions_size() const {
  return _impl_.guidance_view_junctions_.size();
}
inline int TripSign::guidance_view_junctions_size() const {
  return _internal_guidance_view_junctions_size();
}
inline void TripSign::clear_guidance_view_junctions() {
  _impl_.guidance_view_junctions_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_junctions)
  return _impl_.guidance_view_junctions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_junctions() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_junctions)
  return &_impl_.guidance_view_junctions_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guidance_view_junctions(int index) const {
  return _impl_.guidance_view_junctions_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_junctions(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_junctions)
  return _internal_guidance_view_junctions(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guidance_view_junctions() {
  return _impl_.guidance_view_junctions_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_junctions() {
  ::valhalla::TripSignElement* _add = _internal_add_guidance_view_junctions();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_junctions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_junctions() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_junctions)
  return _impl_.guidance_view_junctions_;
}

// repeated .valhalla.TripSignElement guidance_view_signboards = 9;
inline int TripSign::_internal_guidance_view_signboards_size() const {
  return _impl_.guidance_view_signboards_.size();
}
inline int TripSign::guidance_view_signboards_size() const {
  return _internal_guidance_view_signboards_size();
}
inline void TripSign::clear_guidance_view_signboards() {
  _impl_.guidance_view_signboards_.Clear();
}
inline ::valhalla::TripSignElement* TripSign::mutable_guidance_view_signboards(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TripSign.guidance_view_signboards)
  return _impl_.guidance_view_signboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >*
TripSign::mutable_guidance_view_signboards() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TripSign.guidance_view_signboards)
  return &_impl_.guidance_view_signboards_;
}
inline const ::valhalla::TripSignElement& TripSign::_internal_guidance_view_signboards(int index) const {
  return _impl_.guidance_view_signboards_.Get(index);
}
inline const ::valhalla::TripSignElement& TripSign::guidance_view_signboards(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TripSign.guidance_view_signboards)
  return _internal_guidance_view_signboards(index);
}
inline ::valhalla::TripSignElement* TripSign::_internal_add_guidance_view_signboards() {
  return _impl_.guidance_view_signboards_.Add();
}
inline ::valhalla::TripSignElement* TripSign::add_guidance_view_signboards() {
  ::valhalla::TripSignElement* _add = _internal_add_guidance_view_signboards();
  // @@protoc_insertion_point(field_add:valhalla.TripSign.guidance_view_signboards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TripSignElement >&
TripSign::guidance_view_signboards() const {
  // @@protoc_insertion_point(field_list:valhalla.TripSign.guidance_view_signboards)
  return _impl_.guidance_view_signboards_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sign_2eproto
