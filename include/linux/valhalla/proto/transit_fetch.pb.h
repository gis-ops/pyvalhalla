// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit_fetch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transit_5ffetch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transit_5ffetch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transit_5ffetch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transit_5ffetch_2eproto {
  static const uint32_t offsets[];
};
namespace valhalla {
namespace mjolnir {
class Transit_Fetch;
struct Transit_FetchDefaultTypeInternal;
extern Transit_FetchDefaultTypeInternal _Transit_Fetch_default_instance_;
class Transit_Fetch_Route;
struct Transit_Fetch_RouteDefaultTypeInternal;
extern Transit_Fetch_RouteDefaultTypeInternal _Transit_Fetch_Route_default_instance_;
class Transit_Fetch_Shape;
struct Transit_Fetch_ShapeDefaultTypeInternal;
extern Transit_Fetch_ShapeDefaultTypeInternal _Transit_Fetch_Shape_default_instance_;
class Transit_Fetch_Stop;
struct Transit_Fetch_StopDefaultTypeInternal;
extern Transit_Fetch_StopDefaultTypeInternal _Transit_Fetch_Stop_default_instance_;
class Transit_Fetch_StopPair;
struct Transit_Fetch_StopPairDefaultTypeInternal;
extern Transit_Fetch_StopPairDefaultTypeInternal _Transit_Fetch_StopPair_default_instance_;
}  // namespace mjolnir
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::mjolnir::Transit_Fetch* Arena::CreateMaybeMessage<::valhalla::mjolnir::Transit_Fetch>(Arena*);
template<> ::valhalla::mjolnir::Transit_Fetch_Route* Arena::CreateMaybeMessage<::valhalla::mjolnir::Transit_Fetch_Route>(Arena*);
template<> ::valhalla::mjolnir::Transit_Fetch_Shape* Arena::CreateMaybeMessage<::valhalla::mjolnir::Transit_Fetch_Shape>(Arena*);
template<> ::valhalla::mjolnir::Transit_Fetch_Stop* Arena::CreateMaybeMessage<::valhalla::mjolnir::Transit_Fetch_Stop>(Arena*);
template<> ::valhalla::mjolnir::Transit_Fetch_StopPair* Arena::CreateMaybeMessage<::valhalla::mjolnir::Transit_Fetch_StopPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {
namespace mjolnir {

enum Transit_Fetch_VehicleType : int {
  Transit_Fetch_VehicleType_kTram = 0,
  Transit_Fetch_VehicleType_kMetro = 1,
  Transit_Fetch_VehicleType_kRail = 2,
  Transit_Fetch_VehicleType_kBus = 3,
  Transit_Fetch_VehicleType_kFerry = 4,
  Transit_Fetch_VehicleType_kCableCar = 5,
  Transit_Fetch_VehicleType_kGondola = 6,
  Transit_Fetch_VehicleType_kFunicular = 7
};
bool Transit_Fetch_VehicleType_IsValid(int value);
constexpr Transit_Fetch_VehicleType Transit_Fetch_VehicleType_VehicleType_MIN = Transit_Fetch_VehicleType_kTram;
constexpr Transit_Fetch_VehicleType Transit_Fetch_VehicleType_VehicleType_MAX = Transit_Fetch_VehicleType_kFunicular;
constexpr int Transit_Fetch_VehicleType_VehicleType_ARRAYSIZE = Transit_Fetch_VehicleType_VehicleType_MAX + 1;

const std::string& Transit_Fetch_VehicleType_Name(Transit_Fetch_VehicleType value);
template<typename T>
inline const std::string& Transit_Fetch_VehicleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transit_Fetch_VehicleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transit_Fetch_VehicleType_Name.");
  return Transit_Fetch_VehicleType_Name(static_cast<Transit_Fetch_VehicleType>(enum_t_value));
}
bool Transit_Fetch_VehicleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transit_Fetch_VehicleType* value);
// ===================================================================

class Transit_Fetch_Stop final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit_Fetch.Stop) */ {
 public:
  inline Transit_Fetch_Stop() : Transit_Fetch_Stop(nullptr) {}
  ~Transit_Fetch_Stop() override;
  explicit PROTOBUF_CONSTEXPR Transit_Fetch_Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transit_Fetch_Stop(const Transit_Fetch_Stop& from);
  Transit_Fetch_Stop(Transit_Fetch_Stop&& from) noexcept
    : Transit_Fetch_Stop() {
    *this = ::std::move(from);
  }

  inline Transit_Fetch_Stop& operator=(const Transit_Fetch_Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit_Fetch_Stop& operator=(Transit_Fetch_Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transit_Fetch_Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit_Fetch_Stop* internal_default_instance() {
    return reinterpret_cast<const Transit_Fetch_Stop*>(
               &_Transit_Fetch_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transit_Fetch_Stop& a, Transit_Fetch_Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit_Fetch_Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit_Fetch_Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit_Fetch_Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transit_Fetch_Stop>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transit_Fetch_Stop& from);
  void MergeFrom(const Transit_Fetch_Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Fetch_Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.mjolnir.Transit_Fetch.Stop";
  }
  protected:
  explicit Transit_Fetch_Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kOnestopIdFieldNumber = 5,
    kTimezoneFieldNumber = 8,
    kLonFieldNumber = 1,
    kLatFieldNumber = 2,
    kGraphidFieldNumber = 3,
    kOsmWayIdFieldNumber = 6,
    kWheelchairBoardingFieldNumber = 9,
  };
  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string onestop_id = 5;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // optional string timezone = 8;
  bool has_timezone() const;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timezone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timezone();
  PROTOBUF_NODISCARD std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // optional float lon = 1;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  float lon() const;
  void set_lon(float value);
  private:
  float _internal_lon() const;
  void _internal_set_lon(float value);
  public:

  // optional float lat = 2;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  float lat() const;
  void set_lat(float value);
  private:
  float _internal_lat() const;
  void _internal_set_lat(float value);
  public:

  // optional uint64 graphid = 3;
  bool has_graphid() const;
  private:
  bool _internal_has_graphid() const;
  public:
  void clear_graphid();
  uint64_t graphid() const;
  void set_graphid(uint64_t value);
  private:
  uint64_t _internal_graphid() const;
  void _internal_set_graphid(uint64_t value);
  public:

  // optional uint64 osm_way_id = 6;
  bool has_osm_way_id() const;
  private:
  bool _internal_has_osm_way_id() const;
  public:
  void clear_osm_way_id();
  uint64_t osm_way_id() const;
  void set_osm_way_id(uint64_t value);
  private:
  uint64_t _internal_osm_way_id() const;
  void _internal_set_osm_way_id(uint64_t value);
  public:

  // optional bool wheelchair_boarding = 9;
  bool has_wheelchair_boarding() const;
  private:
  bool _internal_has_wheelchair_boarding() const;
  public:
  void clear_wheelchair_boarding();
  bool wheelchair_boarding() const;
  void set_wheelchair_boarding(bool value);
  private:
  bool _internal_wheelchair_boarding() const;
  void _internal_set_wheelchair_boarding(bool value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit_Fetch.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
    float lon_;
    float lat_;
    uint64_t graphid_;
    uint64_t osm_way_id_;
    bool wheelchair_boarding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transit_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class Transit_Fetch_StopPair final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit_Fetch.StopPair) */ {
 public:
  inline Transit_Fetch_StopPair() : Transit_Fetch_StopPair(nullptr) {}
  ~Transit_Fetch_StopPair() override;
  explicit PROTOBUF_CONSTEXPR Transit_Fetch_StopPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transit_Fetch_StopPair(const Transit_Fetch_StopPair& from);
  Transit_Fetch_StopPair(Transit_Fetch_StopPair&& from) noexcept
    : Transit_Fetch_StopPair() {
    *this = ::std::move(from);
  }

  inline Transit_Fetch_StopPair& operator=(const Transit_Fetch_StopPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit_Fetch_StopPair& operator=(Transit_Fetch_StopPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transit_Fetch_StopPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit_Fetch_StopPair* internal_default_instance() {
    return reinterpret_cast<const Transit_Fetch_StopPair*>(
               &_Transit_Fetch_StopPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transit_Fetch_StopPair& a, Transit_Fetch_StopPair& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit_Fetch_StopPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit_Fetch_StopPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit_Fetch_StopPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transit_Fetch_StopPair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transit_Fetch_StopPair& from);
  void MergeFrom(const Transit_Fetch_StopPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Fetch_StopPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.mjolnir.Transit_Fetch.StopPair";
  }
  protected:
  explicit Transit_Fetch_StopPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAddedDatesFieldNumber = 11,
    kServiceDaysOfWeekFieldNumber = 12,
    kServiceExceptDatesFieldNumber = 14,
    kDestinationOnestopIdFieldNumber = 5,
    kOperatedByOnestopIdFieldNumber = 6,
    kOriginOnestopIdFieldNumber = 9,
    kTripHeadsignFieldNumber = 16,
    kBlockIdFieldNumber = 2,
    kDestinationArrivalTimeFieldNumber = 3,
    kDestinationGraphidFieldNumber = 4,
    kOriginGraphidFieldNumber = 8,
    kOriginDepartureTimeFieldNumber = 7,
    kBikesAllowedFieldNumber = 1,
    kWheelchairAccessibleFieldNumber = 18,
    kRouteIndexFieldNumber = 10,
    kServiceEndDateFieldNumber = 13,
    kServiceStartDateFieldNumber = 15,
    kTripIdFieldNumber = 17,
    kShapeIdFieldNumber = 20,
    kOriginDistTraveledFieldNumber = 21,
    kDestinationDistTraveledFieldNumber = 22,
    kFrequencyEndTimeFieldNumber = 23,
    kFrequencyHeadwaySecondsFieldNumber = 24,
  };
  // repeated uint32 service_added_dates = 11;
  int service_added_dates_size() const;
  private:
  int _internal_service_added_dates_size() const;
  public:
  void clear_service_added_dates();
  private:
  uint32_t _internal_service_added_dates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_service_added_dates() const;
  void _internal_add_service_added_dates(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_service_added_dates();
  public:
  uint32_t service_added_dates(int index) const;
  void set_service_added_dates(int index, uint32_t value);
  void add_service_added_dates(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      service_added_dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_service_added_dates();

  // repeated bool service_days_of_week = 12;
  int service_days_of_week_size() const;
  private:
  int _internal_service_days_of_week_size() const;
  public:
  void clear_service_days_of_week();
  private:
  bool _internal_service_days_of_week(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_service_days_of_week() const;
  void _internal_add_service_days_of_week(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_service_days_of_week();
  public:
  bool service_days_of_week(int index) const;
  void set_service_days_of_week(int index, bool value);
  void add_service_days_of_week(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      service_days_of_week() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_service_days_of_week();

  // repeated uint32 service_except_dates = 14;
  int service_except_dates_size() const;
  private:
  int _internal_service_except_dates_size() const;
  public:
  void clear_service_except_dates();
  private:
  uint32_t _internal_service_except_dates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_service_except_dates() const;
  void _internal_add_service_except_dates(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_service_except_dates();
  public:
  uint32_t service_except_dates(int index) const;
  void set_service_except_dates(int index, uint32_t value);
  void add_service_except_dates(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      service_except_dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_service_except_dates();

  // optional string destination_onestop_id = 5;
  bool has_destination_onestop_id() const;
  private:
  bool _internal_has_destination_onestop_id() const;
  public:
  void clear_destination_onestop_id();
  const std::string& destination_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_onestop_id();
  PROTOBUF_NODISCARD std::string* release_destination_onestop_id();
  void set_allocated_destination_onestop_id(std::string* destination_onestop_id);
  private:
  const std::string& _internal_destination_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_onestop_id(const std::string& value);
  std::string* _internal_mutable_destination_onestop_id();
  public:

  // optional string operated_by_onestop_id = 6;
  bool has_operated_by_onestop_id() const;
  private:
  bool _internal_has_operated_by_onestop_id() const;
  public:
  void clear_operated_by_onestop_id();
  const std::string& operated_by_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operated_by_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operated_by_onestop_id();
  PROTOBUF_NODISCARD std::string* release_operated_by_onestop_id();
  void set_allocated_operated_by_onestop_id(std::string* operated_by_onestop_id);
  private:
  const std::string& _internal_operated_by_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operated_by_onestop_id(const std::string& value);
  std::string* _internal_mutable_operated_by_onestop_id();
  public:

  // optional string origin_onestop_id = 9;
  bool has_origin_onestop_id() const;
  private:
  bool _internal_has_origin_onestop_id() const;
  public:
  void clear_origin_onestop_id();
  const std::string& origin_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin_onestop_id();
  PROTOBUF_NODISCARD std::string* release_origin_onestop_id();
  void set_allocated_origin_onestop_id(std::string* origin_onestop_id);
  private:
  const std::string& _internal_origin_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_onestop_id(const std::string& value);
  std::string* _internal_mutable_origin_onestop_id();
  public:

  // optional string trip_headsign = 16;
  bool has_trip_headsign() const;
  private:
  bool _internal_has_trip_headsign() const;
  public:
  void clear_trip_headsign();
  const std::string& trip_headsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trip_headsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trip_headsign();
  PROTOBUF_NODISCARD std::string* release_trip_headsign();
  void set_allocated_trip_headsign(std::string* trip_headsign);
  private:
  const std::string& _internal_trip_headsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trip_headsign(const std::string& value);
  std::string* _internal_mutable_trip_headsign();
  public:

  // optional uint32 block_id = 2;
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  uint32_t block_id() const;
  void set_block_id(uint32_t value);
  private:
  uint32_t _internal_block_id() const;
  void _internal_set_block_id(uint32_t value);
  public:

  // optional uint32 destination_arrival_time = 3;
  bool has_destination_arrival_time() const;
  private:
  bool _internal_has_destination_arrival_time() const;
  public:
  void clear_destination_arrival_time();
  uint32_t destination_arrival_time() const;
  void set_destination_arrival_time(uint32_t value);
  private:
  uint32_t _internal_destination_arrival_time() const;
  void _internal_set_destination_arrival_time(uint32_t value);
  public:

  // optional uint64 destination_graphid = 4;
  bool has_destination_graphid() const;
  private:
  bool _internal_has_destination_graphid() const;
  public:
  void clear_destination_graphid();
  uint64_t destination_graphid() const;
  void set_destination_graphid(uint64_t value);
  private:
  uint64_t _internal_destination_graphid() const;
  void _internal_set_destination_graphid(uint64_t value);
  public:

  // optional uint64 origin_graphid = 8;
  bool has_origin_graphid() const;
  private:
  bool _internal_has_origin_graphid() const;
  public:
  void clear_origin_graphid();
  uint64_t origin_graphid() const;
  void set_origin_graphid(uint64_t value);
  private:
  uint64_t _internal_origin_graphid() const;
  void _internal_set_origin_graphid(uint64_t value);
  public:

  // optional uint32 origin_departure_time = 7;
  bool has_origin_departure_time() const;
  private:
  bool _internal_has_origin_departure_time() const;
  public:
  void clear_origin_departure_time();
  uint32_t origin_departure_time() const;
  void set_origin_departure_time(uint32_t value);
  private:
  uint32_t _internal_origin_departure_time() const;
  void _internal_set_origin_departure_time(uint32_t value);
  public:

  // optional bool bikes_allowed = 1;
  bool has_bikes_allowed() const;
  private:
  bool _internal_has_bikes_allowed() const;
  public:
  void clear_bikes_allowed();
  bool bikes_allowed() const;
  void set_bikes_allowed(bool value);
  private:
  bool _internal_bikes_allowed() const;
  void _internal_set_bikes_allowed(bool value);
  public:

  // optional bool wheelchair_accessible = 18;
  bool has_wheelchair_accessible() const;
  private:
  bool _internal_has_wheelchair_accessible() const;
  public:
  void clear_wheelchair_accessible();
  bool wheelchair_accessible() const;
  void set_wheelchair_accessible(bool value);
  private:
  bool _internal_wheelchair_accessible() const;
  void _internal_set_wheelchair_accessible(bool value);
  public:

  // optional uint32 route_index = 10;
  bool has_route_index() const;
  private:
  bool _internal_has_route_index() const;
  public:
  void clear_route_index();
  uint32_t route_index() const;
  void set_route_index(uint32_t value);
  private:
  uint32_t _internal_route_index() const;
  void _internal_set_route_index(uint32_t value);
  public:

  // optional uint32 service_end_date = 13;
  bool has_service_end_date() const;
  private:
  bool _internal_has_service_end_date() const;
  public:
  void clear_service_end_date();
  uint32_t service_end_date() const;
  void set_service_end_date(uint32_t value);
  private:
  uint32_t _internal_service_end_date() const;
  void _internal_set_service_end_date(uint32_t value);
  public:

  // optional uint32 service_start_date = 15;
  bool has_service_start_date() const;
  private:
  bool _internal_has_service_start_date() const;
  public:
  void clear_service_start_date();
  uint32_t service_start_date() const;
  void set_service_start_date(uint32_t value);
  private:
  uint32_t _internal_service_start_date() const;
  void _internal_set_service_start_date(uint32_t value);
  public:

  // optional uint32 trip_id = 17;
  bool has_trip_id() const;
  private:
  bool _internal_has_trip_id() const;
  public:
  void clear_trip_id();
  uint32_t trip_id() const;
  void set_trip_id(uint32_t value);
  private:
  uint32_t _internal_trip_id() const;
  void _internal_set_trip_id(uint32_t value);
  public:

  // optional uint32 shape_id = 20;
  bool has_shape_id() const;
  private:
  bool _internal_has_shape_id() const;
  public:
  void clear_shape_id();
  uint32_t shape_id() const;
  void set_shape_id(uint32_t value);
  private:
  uint32_t _internal_shape_id() const;
  void _internal_set_shape_id(uint32_t value);
  public:

  // optional float origin_dist_traveled = 21;
  bool has_origin_dist_traveled() const;
  private:
  bool _internal_has_origin_dist_traveled() const;
  public:
  void clear_origin_dist_traveled();
  float origin_dist_traveled() const;
  void set_origin_dist_traveled(float value);
  private:
  float _internal_origin_dist_traveled() const;
  void _internal_set_origin_dist_traveled(float value);
  public:

  // optional float destination_dist_traveled = 22;
  bool has_destination_dist_traveled() const;
  private:
  bool _internal_has_destination_dist_traveled() const;
  public:
  void clear_destination_dist_traveled();
  float destination_dist_traveled() const;
  void set_destination_dist_traveled(float value);
  private:
  float _internal_destination_dist_traveled() const;
  void _internal_set_destination_dist_traveled(float value);
  public:

  // optional uint32 frequency_end_time = 23;
  bool has_frequency_end_time() const;
  private:
  bool _internal_has_frequency_end_time() const;
  public:
  void clear_frequency_end_time();
  uint32_t frequency_end_time() const;
  void set_frequency_end_time(uint32_t value);
  private:
  uint32_t _internal_frequency_end_time() const;
  void _internal_set_frequency_end_time(uint32_t value);
  public:

  // optional uint32 frequency_headway_seconds = 24;
  bool has_frequency_headway_seconds() const;
  private:
  bool _internal_has_frequency_headway_seconds() const;
  public:
  void clear_frequency_headway_seconds();
  uint32_t frequency_headway_seconds() const;
  void set_frequency_headway_seconds(uint32_t value);
  private:
  uint32_t _internal_frequency_headway_seconds() const;
  void _internal_set_frequency_headway_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit_Fetch.StopPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > service_added_dates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > service_days_of_week_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > service_except_dates_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operated_by_onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trip_headsign_;
    uint32_t block_id_;
    uint32_t destination_arrival_time_;
    uint64_t destination_graphid_;
    uint64_t origin_graphid_;
    uint32_t origin_departure_time_;
    bool bikes_allowed_;
    bool wheelchair_accessible_;
    uint32_t route_index_;
    uint32_t service_end_date_;
    uint32_t service_start_date_;
    uint32_t trip_id_;
    uint32_t shape_id_;
    float origin_dist_traveled_;
    float destination_dist_traveled_;
    uint32_t frequency_end_time_;
    uint32_t frequency_headway_seconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transit_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class Transit_Fetch_Route final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit_Fetch.Route) */ {
 public:
  inline Transit_Fetch_Route() : Transit_Fetch_Route(nullptr) {}
  ~Transit_Fetch_Route() override;
  explicit PROTOBUF_CONSTEXPR Transit_Fetch_Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transit_Fetch_Route(const Transit_Fetch_Route& from);
  Transit_Fetch_Route(Transit_Fetch_Route&& from) noexcept
    : Transit_Fetch_Route() {
    *this = ::std::move(from);
  }

  inline Transit_Fetch_Route& operator=(const Transit_Fetch_Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit_Fetch_Route& operator=(Transit_Fetch_Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transit_Fetch_Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit_Fetch_Route* internal_default_instance() {
    return reinterpret_cast<const Transit_Fetch_Route*>(
               &_Transit_Fetch_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transit_Fetch_Route& a, Transit_Fetch_Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit_Fetch_Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit_Fetch_Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit_Fetch_Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transit_Fetch_Route>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transit_Fetch_Route& from);
  void MergeFrom(const Transit_Fetch_Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Fetch_Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.mjolnir.Transit_Fetch.Route";
  }
  protected:
  explicit Transit_Fetch_Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOnestopIdFieldNumber = 2,
    kOperatedByNameFieldNumber = 3,
    kOperatedByOnestopIdFieldNumber = 4,
    kOperatedByWebsiteFieldNumber = 5,
    kRouteDescFieldNumber = 7,
    kRouteLongNameFieldNumber = 8,
    kRouteColorFieldNumber = 6,
    kRouteTextColorFieldNumber = 9,
    kVehicleTypeFieldNumber = 10,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string onestop_id = 2;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // optional string operated_by_name = 3;
  bool has_operated_by_name() const;
  private:
  bool _internal_has_operated_by_name() const;
  public:
  void clear_operated_by_name();
  const std::string& operated_by_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operated_by_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operated_by_name();
  PROTOBUF_NODISCARD std::string* release_operated_by_name();
  void set_allocated_operated_by_name(std::string* operated_by_name);
  private:
  const std::string& _internal_operated_by_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operated_by_name(const std::string& value);
  std::string* _internal_mutable_operated_by_name();
  public:

  // optional string operated_by_onestop_id = 4;
  bool has_operated_by_onestop_id() const;
  private:
  bool _internal_has_operated_by_onestop_id() const;
  public:
  void clear_operated_by_onestop_id();
  const std::string& operated_by_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operated_by_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operated_by_onestop_id();
  PROTOBUF_NODISCARD std::string* release_operated_by_onestop_id();
  void set_allocated_operated_by_onestop_id(std::string* operated_by_onestop_id);
  private:
  const std::string& _internal_operated_by_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operated_by_onestop_id(const std::string& value);
  std::string* _internal_mutable_operated_by_onestop_id();
  public:

  // optional string operated_by_website = 5;
  bool has_operated_by_website() const;
  private:
  bool _internal_has_operated_by_website() const;
  public:
  void clear_operated_by_website();
  const std::string& operated_by_website() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operated_by_website(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operated_by_website();
  PROTOBUF_NODISCARD std::string* release_operated_by_website();
  void set_allocated_operated_by_website(std::string* operated_by_website);
  private:
  const std::string& _internal_operated_by_website() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operated_by_website(const std::string& value);
  std::string* _internal_mutable_operated_by_website();
  public:

  // optional string route_desc = 7;
  bool has_route_desc() const;
  private:
  bool _internal_has_route_desc() const;
  public:
  void clear_route_desc();
  const std::string& route_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route_desc();
  PROTOBUF_NODISCARD std::string* release_route_desc();
  void set_allocated_route_desc(std::string* route_desc);
  private:
  const std::string& _internal_route_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_desc(const std::string& value);
  std::string* _internal_mutable_route_desc();
  public:

  // optional string route_long_name = 8;
  bool has_route_long_name() const;
  private:
  bool _internal_has_route_long_name() const;
  public:
  void clear_route_long_name();
  const std::string& route_long_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route_long_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route_long_name();
  PROTOBUF_NODISCARD std::string* release_route_long_name();
  void set_allocated_route_long_name(std::string* route_long_name);
  private:
  const std::string& _internal_route_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_long_name(const std::string& value);
  std::string* _internal_mutable_route_long_name();
  public:

  // optional uint32 route_color = 6;
  bool has_route_color() const;
  private:
  bool _internal_has_route_color() const;
  public:
  void clear_route_color();
  uint32_t route_color() const;
  void set_route_color(uint32_t value);
  private:
  uint32_t _internal_route_color() const;
  void _internal_set_route_color(uint32_t value);
  public:

  // optional uint32 route_text_color = 9;
  bool has_route_text_color() const;
  private:
  bool _internal_has_route_text_color() const;
  public:
  void clear_route_text_color();
  uint32_t route_text_color() const;
  void set_route_text_color(uint32_t value);
  private:
  uint32_t _internal_route_text_color() const;
  void _internal_set_route_text_color(uint32_t value);
  public:

  // optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
  bool has_vehicle_type() const;
  private:
  bool _internal_has_vehicle_type() const;
  public:
  void clear_vehicle_type();
  ::valhalla::mjolnir::Transit_Fetch_VehicleType vehicle_type() const;
  void set_vehicle_type(::valhalla::mjolnir::Transit_Fetch_VehicleType value);
  private:
  ::valhalla::mjolnir::Transit_Fetch_VehicleType _internal_vehicle_type() const;
  void _internal_set_vehicle_type(::valhalla::mjolnir::Transit_Fetch_VehicleType value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit_Fetch.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operated_by_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operated_by_onestop_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operated_by_website_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_desc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_long_name_;
    uint32_t route_color_;
    uint32_t route_text_color_;
    int vehicle_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transit_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class Transit_Fetch_Shape final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit_Fetch.Shape) */ {
 public:
  inline Transit_Fetch_Shape() : Transit_Fetch_Shape(nullptr) {}
  ~Transit_Fetch_Shape() override;
  explicit PROTOBUF_CONSTEXPR Transit_Fetch_Shape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transit_Fetch_Shape(const Transit_Fetch_Shape& from);
  Transit_Fetch_Shape(Transit_Fetch_Shape&& from) noexcept
    : Transit_Fetch_Shape() {
    *this = ::std::move(from);
  }

  inline Transit_Fetch_Shape& operator=(const Transit_Fetch_Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit_Fetch_Shape& operator=(Transit_Fetch_Shape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transit_Fetch_Shape& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit_Fetch_Shape* internal_default_instance() {
    return reinterpret_cast<const Transit_Fetch_Shape*>(
               &_Transit_Fetch_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transit_Fetch_Shape& a, Transit_Fetch_Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit_Fetch_Shape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit_Fetch_Shape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit_Fetch_Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transit_Fetch_Shape>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transit_Fetch_Shape& from);
  void MergeFrom(const Transit_Fetch_Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Fetch_Shape* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.mjolnir.Transit_Fetch.Shape";
  }
  protected:
  explicit Transit_Fetch_Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedShapeFieldNumber = 2,
    kShapeIdFieldNumber = 1,
  };
  // optional bytes encoded_shape = 2;
  bool has_encoded_shape() const;
  private:
  bool _internal_has_encoded_shape() const;
  public:
  void clear_encoded_shape();
  const std::string& encoded_shape() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded_shape(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded_shape();
  PROTOBUF_NODISCARD std::string* release_encoded_shape();
  void set_allocated_encoded_shape(std::string* encoded_shape);
  private:
  const std::string& _internal_encoded_shape() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded_shape(const std::string& value);
  std::string* _internal_mutable_encoded_shape();
  public:

  // optional uint32 shape_id = 1;
  bool has_shape_id() const;
  private:
  bool _internal_has_shape_id() const;
  public:
  void clear_shape_id();
  uint32_t shape_id() const;
  void set_shape_id(uint32_t value);
  private:
  uint32_t _internal_shape_id() const;
  void _internal_set_shape_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit_Fetch.Shape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_shape_;
    uint32_t shape_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transit_5ffetch_2eproto;
};
// -------------------------------------------------------------------

class Transit_Fetch final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.mjolnir.Transit_Fetch) */ {
 public:
  inline Transit_Fetch() : Transit_Fetch(nullptr) {}
  ~Transit_Fetch() override;
  explicit PROTOBUF_CONSTEXPR Transit_Fetch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transit_Fetch(const Transit_Fetch& from);
  Transit_Fetch(Transit_Fetch&& from) noexcept
    : Transit_Fetch() {
    *this = ::std::move(from);
  }

  inline Transit_Fetch& operator=(const Transit_Fetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit_Fetch& operator=(Transit_Fetch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Transit_Fetch& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transit_Fetch* internal_default_instance() {
    return reinterpret_cast<const Transit_Fetch*>(
               &_Transit_Fetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transit_Fetch& a, Transit_Fetch& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit_Fetch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transit_Fetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transit_Fetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transit_Fetch>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Transit_Fetch& from);
  void MergeFrom(const Transit_Fetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transit_Fetch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.mjolnir.Transit_Fetch";
  }
  protected:
  explicit Transit_Fetch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Transit_Fetch_Stop Stop;
  typedef Transit_Fetch_StopPair StopPair;
  typedef Transit_Fetch_Route Route;
  typedef Transit_Fetch_Shape Shape;

  typedef Transit_Fetch_VehicleType VehicleType;
  static constexpr VehicleType kTram =
    Transit_Fetch_VehicleType_kTram;
  static constexpr VehicleType kMetro =
    Transit_Fetch_VehicleType_kMetro;
  static constexpr VehicleType kRail =
    Transit_Fetch_VehicleType_kRail;
  static constexpr VehicleType kBus =
    Transit_Fetch_VehicleType_kBus;
  static constexpr VehicleType kFerry =
    Transit_Fetch_VehicleType_kFerry;
  static constexpr VehicleType kCableCar =
    Transit_Fetch_VehicleType_kCableCar;
  static constexpr VehicleType kGondola =
    Transit_Fetch_VehicleType_kGondola;
  static constexpr VehicleType kFunicular =
    Transit_Fetch_VehicleType_kFunicular;
  static inline bool VehicleType_IsValid(int value) {
    return Transit_Fetch_VehicleType_IsValid(value);
  }
  static constexpr VehicleType VehicleType_MIN =
    Transit_Fetch_VehicleType_VehicleType_MIN;
  static constexpr VehicleType VehicleType_MAX =
    Transit_Fetch_VehicleType_VehicleType_MAX;
  static constexpr int VehicleType_ARRAYSIZE =
    Transit_Fetch_VehicleType_VehicleType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VehicleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehicleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehicleType_Name.");
    return Transit_Fetch_VehicleType_Name(enum_t_value);
  }
  static inline bool VehicleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VehicleType* value) {
    return Transit_Fetch_VehicleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kStopPairsFieldNumber = 2,
    kRoutesFieldNumber = 3,
    kShapesFieldNumber = 4,
  };
  // repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::valhalla::mjolnir::Transit_Fetch_Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >*
      mutable_stops();
  private:
  const ::valhalla::mjolnir::Transit_Fetch_Stop& _internal_stops(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Stop* _internal_add_stops();
  public:
  const ::valhalla::mjolnir::Transit_Fetch_Stop& stops(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >&
      stops() const;

  // repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
  int stop_pairs_size() const;
  private:
  int _internal_stop_pairs_size() const;
  public:
  void clear_stop_pairs();
  ::valhalla::mjolnir::Transit_Fetch_StopPair* mutable_stop_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >*
      mutable_stop_pairs();
  private:
  const ::valhalla::mjolnir::Transit_Fetch_StopPair& _internal_stop_pairs(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_StopPair* _internal_add_stop_pairs();
  public:
  const ::valhalla::mjolnir::Transit_Fetch_StopPair& stop_pairs(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_StopPair* add_stop_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >&
      stop_pairs() const;

  // repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::valhalla::mjolnir::Transit_Fetch_Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >*
      mutable_routes();
  private:
  const ::valhalla::mjolnir::Transit_Fetch_Route& _internal_routes(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Route* _internal_add_routes();
  public:
  const ::valhalla::mjolnir::Transit_Fetch_Route& routes(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >&
      routes() const;

  // repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;
  public:
  void clear_shapes();
  ::valhalla::mjolnir::Transit_Fetch_Shape* mutable_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >*
      mutable_shapes();
  private:
  const ::valhalla::mjolnir::Transit_Fetch_Shape& _internal_shapes(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Shape* _internal_add_shapes();
  public:
  const ::valhalla::mjolnir::Transit_Fetch_Shape& shapes(int index) const;
  ::valhalla::mjolnir::Transit_Fetch_Shape* add_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >&
      shapes() const;

  // @@protoc_insertion_point(class_scope:valhalla.mjolnir.Transit_Fetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair > stop_pairs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route > routes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape > shapes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transit_5ffetch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transit_Fetch_Stop

// optional float lon = 1;
inline bool Transit_Fetch_Stop::_internal_has_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_lon() const {
  return _internal_has_lon();
}
inline void Transit_Fetch_Stop::clear_lon() {
  _impl_.lon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Transit_Fetch_Stop::_internal_lon() const {
  return _impl_.lon_;
}
inline float Transit_Fetch_Stop::lon() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.lon)
  return _internal_lon();
}
inline void Transit_Fetch_Stop::_internal_set_lon(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lon_ = value;
}
inline void Transit_Fetch_Stop::set_lon(float value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.lon)
}

// optional float lat = 2;
inline bool Transit_Fetch_Stop::_internal_has_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_lat() const {
  return _internal_has_lat();
}
inline void Transit_Fetch_Stop::clear_lat() {
  _impl_.lat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Transit_Fetch_Stop::_internal_lat() const {
  return _impl_.lat_;
}
inline float Transit_Fetch_Stop::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.lat)
  return _internal_lat();
}
inline void Transit_Fetch_Stop::_internal_set_lat(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lat_ = value;
}
inline void Transit_Fetch_Stop::set_lat(float value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.lat)
}

// optional uint64 graphid = 3;
inline bool Transit_Fetch_Stop::_internal_has_graphid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_graphid() const {
  return _internal_has_graphid();
}
inline void Transit_Fetch_Stop::clear_graphid() {
  _impl_.graphid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Transit_Fetch_Stop::_internal_graphid() const {
  return _impl_.graphid_;
}
inline uint64_t Transit_Fetch_Stop::graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.graphid)
  return _internal_graphid();
}
inline void Transit_Fetch_Stop::_internal_set_graphid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.graphid_ = value;
}
inline void Transit_Fetch_Stop::set_graphid(uint64_t value) {
  _internal_set_graphid(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.graphid)
}

// optional string name = 4;
inline bool Transit_Fetch_Stop::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_name() const {
  return _internal_has_name();
}
inline void Transit_Fetch_Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transit_Fetch_Stop::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Stop::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.name)
}
inline std::string* Transit_Fetch_Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.name)
  return _s;
}
inline const std::string& Transit_Fetch_Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Transit_Fetch_Stop::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.name)
}

// optional string onestop_id = 5;
inline bool Transit_Fetch_Stop::_internal_has_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void Transit_Fetch_Stop::clear_onestop_id() {
  _impl_.onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transit_Fetch_Stop::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Stop::set_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}
inline std::string* Transit_Fetch_Stop::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_Stop::_internal_onestop_id() const {
  return _impl_.onestop_id_.Get();
}
inline void Transit_Fetch_Stop::_internal_set_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::_internal_mutable_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
  if (!_internal_has_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.onestop_id_.IsDefault()) {
    _impl_.onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Stop::set_allocated_onestop_id(std::string* onestop_id) {
  if (onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.onestop_id_.SetAllocated(onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.onestop_id_.IsDefault()) {
    _impl_.onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.onestop_id)
}

// optional uint64 osm_way_id = 6;
inline bool Transit_Fetch_Stop::_internal_has_osm_way_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_osm_way_id() const {
  return _internal_has_osm_way_id();
}
inline void Transit_Fetch_Stop::clear_osm_way_id() {
  _impl_.osm_way_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Transit_Fetch_Stop::_internal_osm_way_id() const {
  return _impl_.osm_way_id_;
}
inline uint64_t Transit_Fetch_Stop::osm_way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.osm_way_id)
  return _internal_osm_way_id();
}
inline void Transit_Fetch_Stop::_internal_set_osm_way_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.osm_way_id_ = value;
}
inline void Transit_Fetch_Stop::set_osm_way_id(uint64_t value) {
  _internal_set_osm_way_id(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.osm_way_id)
}

// optional string timezone = 8;
inline bool Transit_Fetch_Stop::_internal_has_timezone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_timezone() const {
  return _internal_has_timezone();
}
inline void Transit_Fetch_Stop::clear_timezone() {
  _impl_.timezone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Transit_Fetch_Stop::timezone() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  return _internal_timezone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Stop::set_timezone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.timezone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}
inline std::string* Transit_Fetch_Stop::mutable_timezone() {
  std::string* _s = _internal_mutable_timezone();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  return _s;
}
inline const std::string& Transit_Fetch_Stop::_internal_timezone() const {
  return _impl_.timezone_.Get();
}
inline void Transit_Fetch_Stop::_internal_set_timezone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timezone_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::_internal_mutable_timezone() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.timezone_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Stop::release_timezone() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
  if (!_internal_has_timezone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.timezone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Stop::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.timezone_.SetAllocated(timezone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timezone_.IsDefault()) {
    _impl_.timezone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Stop.timezone)
}

// optional bool wheelchair_boarding = 9;
inline bool Transit_Fetch_Stop::_internal_has_wheelchair_boarding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Transit_Fetch_Stop::has_wheelchair_boarding() const {
  return _internal_has_wheelchair_boarding();
}
inline void Transit_Fetch_Stop::clear_wheelchair_boarding() {
  _impl_.wheelchair_boarding_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Transit_Fetch_Stop::_internal_wheelchair_boarding() const {
  return _impl_.wheelchair_boarding_;
}
inline bool Transit_Fetch_Stop::wheelchair_boarding() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Stop.wheelchair_boarding)
  return _internal_wheelchair_boarding();
}
inline void Transit_Fetch_Stop::_internal_set_wheelchair_boarding(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.wheelchair_boarding_ = value;
}
inline void Transit_Fetch_Stop::set_wheelchair_boarding(bool value) {
  _internal_set_wheelchair_boarding(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Stop.wheelchair_boarding)
}

// -------------------------------------------------------------------

// Transit_Fetch_StopPair

// optional bool bikes_allowed = 1;
inline bool Transit_Fetch_StopPair::_internal_has_bikes_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_bikes_allowed() const {
  return _internal_has_bikes_allowed();
}
inline void Transit_Fetch_StopPair::clear_bikes_allowed() {
  _impl_.bikes_allowed_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Transit_Fetch_StopPair::_internal_bikes_allowed() const {
  return _impl_.bikes_allowed_;
}
inline bool Transit_Fetch_StopPair::bikes_allowed() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.bikes_allowed)
  return _internal_bikes_allowed();
}
inline void Transit_Fetch_StopPair::_internal_set_bikes_allowed(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bikes_allowed_ = value;
}
inline void Transit_Fetch_StopPair::set_bikes_allowed(bool value) {
  _internal_set_bikes_allowed(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.bikes_allowed)
}

// optional uint32 block_id = 2;
inline bool Transit_Fetch_StopPair::_internal_has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_block_id() const {
  return _internal_has_block_id();
}
inline void Transit_Fetch_StopPair::clear_block_id() {
  _impl_.block_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_block_id() const {
  return _impl_.block_id_;
}
inline uint32_t Transit_Fetch_StopPair::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.block_id)
  return _internal_block_id();
}
inline void Transit_Fetch_StopPair::_internal_set_block_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.block_id_ = value;
}
inline void Transit_Fetch_StopPair::set_block_id(uint32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.block_id)
}

// optional uint32 destination_arrival_time = 3;
inline bool Transit_Fetch_StopPair::_internal_has_destination_arrival_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_destination_arrival_time() const {
  return _internal_has_destination_arrival_time();
}
inline void Transit_Fetch_StopPair::clear_destination_arrival_time() {
  _impl_.destination_arrival_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_destination_arrival_time() const {
  return _impl_.destination_arrival_time_;
}
inline uint32_t Transit_Fetch_StopPair::destination_arrival_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_arrival_time)
  return _internal_destination_arrival_time();
}
inline void Transit_Fetch_StopPair::_internal_set_destination_arrival_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.destination_arrival_time_ = value;
}
inline void Transit_Fetch_StopPair::set_destination_arrival_time(uint32_t value) {
  _internal_set_destination_arrival_time(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_arrival_time)
}

// optional uint64 destination_graphid = 4;
inline bool Transit_Fetch_StopPair::_internal_has_destination_graphid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_destination_graphid() const {
  return _internal_has_destination_graphid();
}
inline void Transit_Fetch_StopPair::clear_destination_graphid() {
  _impl_.destination_graphid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t Transit_Fetch_StopPair::_internal_destination_graphid() const {
  return _impl_.destination_graphid_;
}
inline uint64_t Transit_Fetch_StopPair::destination_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_graphid)
  return _internal_destination_graphid();
}
inline void Transit_Fetch_StopPair::_internal_set_destination_graphid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.destination_graphid_ = value;
}
inline void Transit_Fetch_StopPair::set_destination_graphid(uint64_t value) {
  _internal_set_destination_graphid(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_graphid)
}

// optional string destination_onestop_id = 5;
inline bool Transit_Fetch_StopPair::_internal_has_destination_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_destination_onestop_id() const {
  return _internal_has_destination_onestop_id();
}
inline void Transit_Fetch_StopPair::clear_destination_onestop_id() {
  _impl_.destination_onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transit_Fetch_StopPair::destination_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  return _internal_destination_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_StopPair::set_destination_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.destination_onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}
inline std::string* Transit_Fetch_StopPair::mutable_destination_onestop_id() {
  std::string* _s = _internal_mutable_destination_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_StopPair::_internal_destination_onestop_id() const {
  return _impl_.destination_onestop_id_.Get();
}
inline void Transit_Fetch_StopPair::_internal_set_destination_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.destination_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::_internal_mutable_destination_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.destination_onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::release_destination_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
  if (!_internal_has_destination_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.destination_onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_onestop_id_.IsDefault()) {
    _impl_.destination_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_StopPair::set_allocated_destination_onestop_id(std::string* destination_onestop_id) {
  if (destination_onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.destination_onestop_id_.SetAllocated(destination_onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_onestop_id_.IsDefault()) {
    _impl_.destination_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.destination_onestop_id)
}

// optional string operated_by_onestop_id = 6;
inline bool Transit_Fetch_StopPair::_internal_has_operated_by_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_operated_by_onestop_id() const {
  return _internal_has_operated_by_onestop_id();
}
inline void Transit_Fetch_StopPair::clear_operated_by_onestop_id() {
  _impl_.operated_by_onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transit_Fetch_StopPair::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  return _internal_operated_by_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_StopPair::set_operated_by_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.operated_by_onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}
inline std::string* Transit_Fetch_StopPair::mutable_operated_by_onestop_id() {
  std::string* _s = _internal_mutable_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_StopPair::_internal_operated_by_onestop_id() const {
  return _impl_.operated_by_onestop_id_.Get();
}
inline void Transit_Fetch_StopPair::_internal_set_operated_by_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operated_by_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::_internal_mutable_operated_by_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.operated_by_onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
  if (!_internal_has_operated_by_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.operated_by_onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_onestop_id_.IsDefault()) {
    _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_StopPair::set_allocated_operated_by_onestop_id(std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.operated_by_onestop_id_.SetAllocated(operated_by_onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_onestop_id_.IsDefault()) {
    _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.operated_by_onestop_id)
}

// optional uint32 origin_departure_time = 7;
inline bool Transit_Fetch_StopPair::_internal_has_origin_departure_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_origin_departure_time() const {
  return _internal_has_origin_departure_time();
}
inline void Transit_Fetch_StopPair::clear_origin_departure_time() {
  _impl_.origin_departure_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_origin_departure_time() const {
  return _impl_.origin_departure_time_;
}
inline uint32_t Transit_Fetch_StopPair::origin_departure_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_departure_time)
  return _internal_origin_departure_time();
}
inline void Transit_Fetch_StopPair::_internal_set_origin_departure_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.origin_departure_time_ = value;
}
inline void Transit_Fetch_StopPair::set_origin_departure_time(uint32_t value) {
  _internal_set_origin_departure_time(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_departure_time)
}

// optional uint64 origin_graphid = 8;
inline bool Transit_Fetch_StopPair::_internal_has_origin_graphid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_origin_graphid() const {
  return _internal_has_origin_graphid();
}
inline void Transit_Fetch_StopPair::clear_origin_graphid() {
  _impl_.origin_graphid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t Transit_Fetch_StopPair::_internal_origin_graphid() const {
  return _impl_.origin_graphid_;
}
inline uint64_t Transit_Fetch_StopPair::origin_graphid() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_graphid)
  return _internal_origin_graphid();
}
inline void Transit_Fetch_StopPair::_internal_set_origin_graphid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.origin_graphid_ = value;
}
inline void Transit_Fetch_StopPair::set_origin_graphid(uint64_t value) {
  _internal_set_origin_graphid(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_graphid)
}

// optional string origin_onestop_id = 9;
inline bool Transit_Fetch_StopPair::_internal_has_origin_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_origin_onestop_id() const {
  return _internal_has_origin_onestop_id();
}
inline void Transit_Fetch_StopPair::clear_origin_onestop_id() {
  _impl_.origin_onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Transit_Fetch_StopPair::origin_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  return _internal_origin_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_StopPair::set_origin_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.origin_onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}
inline std::string* Transit_Fetch_StopPair::mutable_origin_onestop_id() {
  std::string* _s = _internal_mutable_origin_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_StopPair::_internal_origin_onestop_id() const {
  return _impl_.origin_onestop_id_.Get();
}
inline void Transit_Fetch_StopPair::_internal_set_origin_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.origin_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::_internal_mutable_origin_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.origin_onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::release_origin_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
  if (!_internal_has_origin_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.origin_onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_onestop_id_.IsDefault()) {
    _impl_.origin_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_StopPair::set_allocated_origin_onestop_id(std::string* origin_onestop_id) {
  if (origin_onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_onestop_id_.SetAllocated(origin_onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_onestop_id_.IsDefault()) {
    _impl_.origin_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.origin_onestop_id)
}

// optional uint32 route_index = 10;
inline bool Transit_Fetch_StopPair::_internal_has_route_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_route_index() const {
  return _internal_has_route_index();
}
inline void Transit_Fetch_StopPair::clear_route_index() {
  _impl_.route_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_route_index() const {
  return _impl_.route_index_;
}
inline uint32_t Transit_Fetch_StopPair::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.route_index)
  return _internal_route_index();
}
inline void Transit_Fetch_StopPair::_internal_set_route_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.route_index_ = value;
}
inline void Transit_Fetch_StopPair::set_route_index(uint32_t value) {
  _internal_set_route_index(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.route_index)
}

// repeated uint32 service_added_dates = 11;
inline int Transit_Fetch_StopPair::_internal_service_added_dates_size() const {
  return _impl_.service_added_dates_.size();
}
inline int Transit_Fetch_StopPair::service_added_dates_size() const {
  return _internal_service_added_dates_size();
}
inline void Transit_Fetch_StopPair::clear_service_added_dates() {
  _impl_.service_added_dates_.Clear();
}
inline uint32_t Transit_Fetch_StopPair::_internal_service_added_dates(int index) const {
  return _impl_.service_added_dates_.Get(index);
}
inline uint32_t Transit_Fetch_StopPair::service_added_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return _internal_service_added_dates(index);
}
inline void Transit_Fetch_StopPair::set_service_added_dates(int index, uint32_t value) {
  _impl_.service_added_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
}
inline void Transit_Fetch_StopPair::_internal_add_service_added_dates(uint32_t value) {
  _impl_.service_added_dates_.Add(value);
}
inline void Transit_Fetch_StopPair::add_service_added_dates(uint32_t value) {
  _internal_add_service_added_dates(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Transit_Fetch_StopPair::_internal_service_added_dates() const {
  return _impl_.service_added_dates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Transit_Fetch_StopPair::service_added_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return _internal_service_added_dates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Transit_Fetch_StopPair::_internal_mutable_service_added_dates() {
  return &_impl_.service_added_dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Transit_Fetch_StopPair::mutable_service_added_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_added_dates)
  return _internal_mutable_service_added_dates();
}

// repeated bool service_days_of_week = 12;
inline int Transit_Fetch_StopPair::_internal_service_days_of_week_size() const {
  return _impl_.service_days_of_week_.size();
}
inline int Transit_Fetch_StopPair::service_days_of_week_size() const {
  return _internal_service_days_of_week_size();
}
inline void Transit_Fetch_StopPair::clear_service_days_of_week() {
  _impl_.service_days_of_week_.Clear();
}
inline bool Transit_Fetch_StopPair::_internal_service_days_of_week(int index) const {
  return _impl_.service_days_of_week_.Get(index);
}
inline bool Transit_Fetch_StopPair::service_days_of_week(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return _internal_service_days_of_week(index);
}
inline void Transit_Fetch_StopPair::set_service_days_of_week(int index, bool value) {
  _impl_.service_days_of_week_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
}
inline void Transit_Fetch_StopPair::_internal_add_service_days_of_week(bool value) {
  _impl_.service_days_of_week_.Add(value);
}
inline void Transit_Fetch_StopPair::add_service_days_of_week(bool value) {
  _internal_add_service_days_of_week(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Transit_Fetch_StopPair::_internal_service_days_of_week() const {
  return _impl_.service_days_of_week_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Transit_Fetch_StopPair::service_days_of_week() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return _internal_service_days_of_week();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Transit_Fetch_StopPair::_internal_mutable_service_days_of_week() {
  return &_impl_.service_days_of_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Transit_Fetch_StopPair::mutable_service_days_of_week() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_days_of_week)
  return _internal_mutable_service_days_of_week();
}

// optional uint32 service_end_date = 13;
inline bool Transit_Fetch_StopPair::_internal_has_service_end_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_service_end_date() const {
  return _internal_has_service_end_date();
}
inline void Transit_Fetch_StopPair::clear_service_end_date() {
  _impl_.service_end_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_service_end_date() const {
  return _impl_.service_end_date_;
}
inline uint32_t Transit_Fetch_StopPair::service_end_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_end_date)
  return _internal_service_end_date();
}
inline void Transit_Fetch_StopPair::_internal_set_service_end_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.service_end_date_ = value;
}
inline void Transit_Fetch_StopPair::set_service_end_date(uint32_t value) {
  _internal_set_service_end_date(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_end_date)
}

// repeated uint32 service_except_dates = 14;
inline int Transit_Fetch_StopPair::_internal_service_except_dates_size() const {
  return _impl_.service_except_dates_.size();
}
inline int Transit_Fetch_StopPair::service_except_dates_size() const {
  return _internal_service_except_dates_size();
}
inline void Transit_Fetch_StopPair::clear_service_except_dates() {
  _impl_.service_except_dates_.Clear();
}
inline uint32_t Transit_Fetch_StopPair::_internal_service_except_dates(int index) const {
  return _impl_.service_except_dates_.Get(index);
}
inline uint32_t Transit_Fetch_StopPair::service_except_dates(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return _internal_service_except_dates(index);
}
inline void Transit_Fetch_StopPair::set_service_except_dates(int index, uint32_t value) {
  _impl_.service_except_dates_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
}
inline void Transit_Fetch_StopPair::_internal_add_service_except_dates(uint32_t value) {
  _impl_.service_except_dates_.Add(value);
}
inline void Transit_Fetch_StopPair::add_service_except_dates(uint32_t value) {
  _internal_add_service_except_dates(value);
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Transit_Fetch_StopPair::_internal_service_except_dates() const {
  return _impl_.service_except_dates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Transit_Fetch_StopPair::service_except_dates() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return _internal_service_except_dates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Transit_Fetch_StopPair::_internal_mutable_service_except_dates() {
  return &_impl_.service_except_dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Transit_Fetch_StopPair::mutable_service_except_dates() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.StopPair.service_except_dates)
  return _internal_mutable_service_except_dates();
}

// optional uint32 service_start_date = 15;
inline bool Transit_Fetch_StopPair::_internal_has_service_start_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_service_start_date() const {
  return _internal_has_service_start_date();
}
inline void Transit_Fetch_StopPair::clear_service_start_date() {
  _impl_.service_start_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_service_start_date() const {
  return _impl_.service_start_date_;
}
inline uint32_t Transit_Fetch_StopPair::service_start_date() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.service_start_date)
  return _internal_service_start_date();
}
inline void Transit_Fetch_StopPair::_internal_set_service_start_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.service_start_date_ = value;
}
inline void Transit_Fetch_StopPair::set_service_start_date(uint32_t value) {
  _internal_set_service_start_date(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.service_start_date)
}

// optional string trip_headsign = 16;
inline bool Transit_Fetch_StopPair::_internal_has_trip_headsign() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_trip_headsign() const {
  return _internal_has_trip_headsign();
}
inline void Transit_Fetch_StopPair::clear_trip_headsign() {
  _impl_.trip_headsign_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Transit_Fetch_StopPair::trip_headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  return _internal_trip_headsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_StopPair::set_trip_headsign(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.trip_headsign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}
inline std::string* Transit_Fetch_StopPair::mutable_trip_headsign() {
  std::string* _s = _internal_mutable_trip_headsign();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  return _s;
}
inline const std::string& Transit_Fetch_StopPair::_internal_trip_headsign() const {
  return _impl_.trip_headsign_.Get();
}
inline void Transit_Fetch_StopPair::_internal_set_trip_headsign(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.trip_headsign_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::_internal_mutable_trip_headsign() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.trip_headsign_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_StopPair::release_trip_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
  if (!_internal_has_trip_headsign()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.trip_headsign_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trip_headsign_.IsDefault()) {
    _impl_.trip_headsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_StopPair::set_allocated_trip_headsign(std::string* trip_headsign) {
  if (trip_headsign != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trip_headsign_.SetAllocated(trip_headsign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trip_headsign_.IsDefault()) {
    _impl_.trip_headsign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.StopPair.trip_headsign)
}

// optional uint32 trip_id = 17;
inline bool Transit_Fetch_StopPair::_internal_has_trip_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_trip_id() const {
  return _internal_has_trip_id();
}
inline void Transit_Fetch_StopPair::clear_trip_id() {
  _impl_.trip_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_trip_id() const {
  return _impl_.trip_id_;
}
inline uint32_t Transit_Fetch_StopPair::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.trip_id)
  return _internal_trip_id();
}
inline void Transit_Fetch_StopPair::_internal_set_trip_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.trip_id_ = value;
}
inline void Transit_Fetch_StopPair::set_trip_id(uint32_t value) {
  _internal_set_trip_id(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.trip_id)
}

// optional bool wheelchair_accessible = 18;
inline bool Transit_Fetch_StopPair::_internal_has_wheelchair_accessible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_wheelchair_accessible() const {
  return _internal_has_wheelchair_accessible();
}
inline void Transit_Fetch_StopPair::clear_wheelchair_accessible() {
  _impl_.wheelchair_accessible_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Transit_Fetch_StopPair::_internal_wheelchair_accessible() const {
  return _impl_.wheelchair_accessible_;
}
inline bool Transit_Fetch_StopPair::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.wheelchair_accessible)
  return _internal_wheelchair_accessible();
}
inline void Transit_Fetch_StopPair::_internal_set_wheelchair_accessible(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.wheelchair_accessible_ = value;
}
inline void Transit_Fetch_StopPair::set_wheelchair_accessible(bool value) {
  _internal_set_wheelchair_accessible(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.wheelchair_accessible)
}

// optional uint32 shape_id = 20;
inline bool Transit_Fetch_StopPair::_internal_has_shape_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_shape_id() const {
  return _internal_has_shape_id();
}
inline void Transit_Fetch_StopPair::clear_shape_id() {
  _impl_.shape_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_shape_id() const {
  return _impl_.shape_id_;
}
inline uint32_t Transit_Fetch_StopPair::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.shape_id)
  return _internal_shape_id();
}
inline void Transit_Fetch_StopPair::_internal_set_shape_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.shape_id_ = value;
}
inline void Transit_Fetch_StopPair::set_shape_id(uint32_t value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.shape_id)
}

// optional float origin_dist_traveled = 21;
inline bool Transit_Fetch_StopPair::_internal_has_origin_dist_traveled() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_origin_dist_traveled() const {
  return _internal_has_origin_dist_traveled();
}
inline void Transit_Fetch_StopPair::clear_origin_dist_traveled() {
  _impl_.origin_dist_traveled_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float Transit_Fetch_StopPair::_internal_origin_dist_traveled() const {
  return _impl_.origin_dist_traveled_;
}
inline float Transit_Fetch_StopPair::origin_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.origin_dist_traveled)
  return _internal_origin_dist_traveled();
}
inline void Transit_Fetch_StopPair::_internal_set_origin_dist_traveled(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.origin_dist_traveled_ = value;
}
inline void Transit_Fetch_StopPair::set_origin_dist_traveled(float value) {
  _internal_set_origin_dist_traveled(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.origin_dist_traveled)
}

// optional float destination_dist_traveled = 22;
inline bool Transit_Fetch_StopPair::_internal_has_destination_dist_traveled() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_destination_dist_traveled() const {
  return _internal_has_destination_dist_traveled();
}
inline void Transit_Fetch_StopPair::clear_destination_dist_traveled() {
  _impl_.destination_dist_traveled_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float Transit_Fetch_StopPair::_internal_destination_dist_traveled() const {
  return _impl_.destination_dist_traveled_;
}
inline float Transit_Fetch_StopPair::destination_dist_traveled() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.destination_dist_traveled)
  return _internal_destination_dist_traveled();
}
inline void Transit_Fetch_StopPair::_internal_set_destination_dist_traveled(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.destination_dist_traveled_ = value;
}
inline void Transit_Fetch_StopPair::set_destination_dist_traveled(float value) {
  _internal_set_destination_dist_traveled(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.destination_dist_traveled)
}

// optional uint32 frequency_end_time = 23;
inline bool Transit_Fetch_StopPair::_internal_has_frequency_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_frequency_end_time() const {
  return _internal_has_frequency_end_time();
}
inline void Transit_Fetch_StopPair::clear_frequency_end_time() {
  _impl_.frequency_end_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_frequency_end_time() const {
  return _impl_.frequency_end_time_;
}
inline uint32_t Transit_Fetch_StopPair::frequency_end_time() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_end_time)
  return _internal_frequency_end_time();
}
inline void Transit_Fetch_StopPair::_internal_set_frequency_end_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.frequency_end_time_ = value;
}
inline void Transit_Fetch_StopPair::set_frequency_end_time(uint32_t value) {
  _internal_set_frequency_end_time(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_end_time)
}

// optional uint32 frequency_headway_seconds = 24;
inline bool Transit_Fetch_StopPair::_internal_has_frequency_headway_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Transit_Fetch_StopPair::has_frequency_headway_seconds() const {
  return _internal_has_frequency_headway_seconds();
}
inline void Transit_Fetch_StopPair::clear_frequency_headway_seconds() {
  _impl_.frequency_headway_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t Transit_Fetch_StopPair::_internal_frequency_headway_seconds() const {
  return _impl_.frequency_headway_seconds_;
}
inline uint32_t Transit_Fetch_StopPair::frequency_headway_seconds() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_headway_seconds)
  return _internal_frequency_headway_seconds();
}
inline void Transit_Fetch_StopPair::_internal_set_frequency_headway_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.frequency_headway_seconds_ = value;
}
inline void Transit_Fetch_StopPair::set_frequency_headway_seconds(uint32_t value) {
  _internal_set_frequency_headway_seconds(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.StopPair.frequency_headway_seconds)
}

// -------------------------------------------------------------------

// Transit_Fetch_Route

// optional string name = 1;
inline bool Transit_Fetch_Route::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_name() const {
  return _internal_has_name();
}
inline void Transit_Fetch_Route::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transit_Fetch_Route::name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.name)
}
inline std::string* Transit_Fetch_Route::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.name)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Transit_Fetch_Route::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.name)
}

// optional string onestop_id = 2;
inline bool Transit_Fetch_Route::_internal_has_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void Transit_Fetch_Route::clear_onestop_id() {
  _impl_.onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transit_Fetch_Route::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}
inline std::string* Transit_Fetch_Route::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_onestop_id() const {
  return _impl_.onestop_id_.Get();
}
inline void Transit_Fetch_Route::_internal_set_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
  if (!_internal_has_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.onestop_id_.IsDefault()) {
    _impl_.onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_onestop_id(std::string* onestop_id) {
  if (onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.onestop_id_.SetAllocated(onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.onestop_id_.IsDefault()) {
    _impl_.onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.onestop_id)
}

// optional string operated_by_name = 3;
inline bool Transit_Fetch_Route::_internal_has_operated_by_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_operated_by_name() const {
  return _internal_has_operated_by_name();
}
inline void Transit_Fetch_Route::clear_operated_by_name() {
  _impl_.operated_by_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Transit_Fetch_Route::operated_by_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  return _internal_operated_by_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_operated_by_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.operated_by_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}
inline std::string* Transit_Fetch_Route::mutable_operated_by_name() {
  std::string* _s = _internal_mutable_operated_by_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_operated_by_name() const {
  return _impl_.operated_by_name_.Get();
}
inline void Transit_Fetch_Route::_internal_set_operated_by_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.operated_by_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_operated_by_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.operated_by_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_operated_by_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
  if (!_internal_has_operated_by_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.operated_by_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_name_.IsDefault()) {
    _impl_.operated_by_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_operated_by_name(std::string* operated_by_name) {
  if (operated_by_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.operated_by_name_.SetAllocated(operated_by_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_name_.IsDefault()) {
    _impl_.operated_by_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_name)
}

// optional string operated_by_onestop_id = 4;
inline bool Transit_Fetch_Route::_internal_has_operated_by_onestop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_operated_by_onestop_id() const {
  return _internal_has_operated_by_onestop_id();
}
inline void Transit_Fetch_Route::clear_operated_by_onestop_id() {
  _impl_.operated_by_onestop_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Transit_Fetch_Route::operated_by_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  return _internal_operated_by_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_operated_by_onestop_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.operated_by_onestop_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}
inline std::string* Transit_Fetch_Route::mutable_operated_by_onestop_id() {
  std::string* _s = _internal_mutable_operated_by_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_operated_by_onestop_id() const {
  return _impl_.operated_by_onestop_id_.Get();
}
inline void Transit_Fetch_Route::_internal_set_operated_by_onestop_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.operated_by_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_operated_by_onestop_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.operated_by_onestop_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_operated_by_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
  if (!_internal_has_operated_by_onestop_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.operated_by_onestop_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_onestop_id_.IsDefault()) {
    _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_operated_by_onestop_id(std::string* operated_by_onestop_id) {
  if (operated_by_onestop_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.operated_by_onestop_id_.SetAllocated(operated_by_onestop_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_onestop_id_.IsDefault()) {
    _impl_.operated_by_onestop_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_onestop_id)
}

// optional string operated_by_website = 5;
inline bool Transit_Fetch_Route::_internal_has_operated_by_website() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_operated_by_website() const {
  return _internal_has_operated_by_website();
}
inline void Transit_Fetch_Route::clear_operated_by_website() {
  _impl_.operated_by_website_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Transit_Fetch_Route::operated_by_website() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  return _internal_operated_by_website();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_operated_by_website(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.operated_by_website_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}
inline std::string* Transit_Fetch_Route::mutable_operated_by_website() {
  std::string* _s = _internal_mutable_operated_by_website();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_operated_by_website() const {
  return _impl_.operated_by_website_.Get();
}
inline void Transit_Fetch_Route::_internal_set_operated_by_website(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.operated_by_website_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_operated_by_website() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.operated_by_website_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_operated_by_website() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
  if (!_internal_has_operated_by_website()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.operated_by_website_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_website_.IsDefault()) {
    _impl_.operated_by_website_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_operated_by_website(std::string* operated_by_website) {
  if (operated_by_website != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.operated_by_website_.SetAllocated(operated_by_website, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.operated_by_website_.IsDefault()) {
    _impl_.operated_by_website_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.operated_by_website)
}

// optional uint32 route_color = 6;
inline bool Transit_Fetch_Route::_internal_has_route_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_route_color() const {
  return _internal_has_route_color();
}
inline void Transit_Fetch_Route::clear_route_color() {
  _impl_.route_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Transit_Fetch_Route::_internal_route_color() const {
  return _impl_.route_color_;
}
inline uint32_t Transit_Fetch_Route::route_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_color)
  return _internal_route_color();
}
inline void Transit_Fetch_Route::_internal_set_route_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.route_color_ = value;
}
inline void Transit_Fetch_Route::set_route_color(uint32_t value) {
  _internal_set_route_color(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_color)
}

// optional string route_desc = 7;
inline bool Transit_Fetch_Route::_internal_has_route_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_route_desc() const {
  return _internal_has_route_desc();
}
inline void Transit_Fetch_Route::clear_route_desc() {
  _impl_.route_desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Transit_Fetch_Route::route_desc() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  return _internal_route_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_route_desc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.route_desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}
inline std::string* Transit_Fetch_Route::mutable_route_desc() {
  std::string* _s = _internal_mutable_route_desc();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_route_desc() const {
  return _impl_.route_desc_.Get();
}
inline void Transit_Fetch_Route::_internal_set_route_desc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.route_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_route_desc() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.route_desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_route_desc() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
  if (!_internal_has_route_desc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.route_desc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_desc_.IsDefault()) {
    _impl_.route_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_route_desc(std::string* route_desc) {
  if (route_desc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.route_desc_.SetAllocated(route_desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_desc_.IsDefault()) {
    _impl_.route_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.route_desc)
}

// optional string route_long_name = 8;
inline bool Transit_Fetch_Route::_internal_has_route_long_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_route_long_name() const {
  return _internal_has_route_long_name();
}
inline void Transit_Fetch_Route::clear_route_long_name() {
  _impl_.route_long_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Transit_Fetch_Route::route_long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  return _internal_route_long_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Route::set_route_long_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.route_long_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}
inline std::string* Transit_Fetch_Route::mutable_route_long_name() {
  std::string* _s = _internal_mutable_route_long_name();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  return _s;
}
inline const std::string& Transit_Fetch_Route::_internal_route_long_name() const {
  return _impl_.route_long_name_.Get();
}
inline void Transit_Fetch_Route::_internal_set_route_long_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.route_long_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::_internal_mutable_route_long_name() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.route_long_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Route::release_route_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
  if (!_internal_has_route_long_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.route_long_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_long_name_.IsDefault()) {
    _impl_.route_long_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Route::set_allocated_route_long_name(std::string* route_long_name) {
  if (route_long_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.route_long_name_.SetAllocated(route_long_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_long_name_.IsDefault()) {
    _impl_.route_long_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Route.route_long_name)
}

// optional uint32 route_text_color = 9;
inline bool Transit_Fetch_Route::_internal_has_route_text_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_route_text_color() const {
  return _internal_has_route_text_color();
}
inline void Transit_Fetch_Route::clear_route_text_color() {
  _impl_.route_text_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Transit_Fetch_Route::_internal_route_text_color() const {
  return _impl_.route_text_color_;
}
inline uint32_t Transit_Fetch_Route::route_text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.route_text_color)
  return _internal_route_text_color();
}
inline void Transit_Fetch_Route::_internal_set_route_text_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.route_text_color_ = value;
}
inline void Transit_Fetch_Route::set_route_text_color(uint32_t value) {
  _internal_set_route_text_color(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.route_text_color)
}

// optional .valhalla.mjolnir.Transit_Fetch.VehicleType vehicle_type = 10;
inline bool Transit_Fetch_Route::_internal_has_vehicle_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Transit_Fetch_Route::has_vehicle_type() const {
  return _internal_has_vehicle_type();
}
inline void Transit_Fetch_Route::clear_vehicle_type() {
  _impl_.vehicle_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::valhalla::mjolnir::Transit_Fetch_VehicleType Transit_Fetch_Route::_internal_vehicle_type() const {
  return static_cast< ::valhalla::mjolnir::Transit_Fetch_VehicleType >(_impl_.vehicle_type_);
}
inline ::valhalla::mjolnir::Transit_Fetch_VehicleType Transit_Fetch_Route::vehicle_type() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Route.vehicle_type)
  return _internal_vehicle_type();
}
inline void Transit_Fetch_Route::_internal_set_vehicle_type(::valhalla::mjolnir::Transit_Fetch_VehicleType value) {
  assert(::valhalla::mjolnir::Transit_Fetch_VehicleType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.vehicle_type_ = value;
}
inline void Transit_Fetch_Route::set_vehicle_type(::valhalla::mjolnir::Transit_Fetch_VehicleType value) {
  _internal_set_vehicle_type(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Route.vehicle_type)
}

// -------------------------------------------------------------------

// Transit_Fetch_Shape

// optional uint32 shape_id = 1;
inline bool Transit_Fetch_Shape::_internal_has_shape_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transit_Fetch_Shape::has_shape_id() const {
  return _internal_has_shape_id();
}
inline void Transit_Fetch_Shape::clear_shape_id() {
  _impl_.shape_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Transit_Fetch_Shape::_internal_shape_id() const {
  return _impl_.shape_id_;
}
inline uint32_t Transit_Fetch_Shape::shape_id() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Shape.shape_id)
  return _internal_shape_id();
}
inline void Transit_Fetch_Shape::_internal_set_shape_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shape_id_ = value;
}
inline void Transit_Fetch_Shape::set_shape_id(uint32_t value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Shape.shape_id)
}

// optional bytes encoded_shape = 2;
inline bool Transit_Fetch_Shape::_internal_has_encoded_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transit_Fetch_Shape::has_encoded_shape() const {
  return _internal_has_encoded_shape();
}
inline void Transit_Fetch_Shape::clear_encoded_shape() {
  _impl_.encoded_shape_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transit_Fetch_Shape::encoded_shape() const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  return _internal_encoded_shape();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transit_Fetch_Shape::set_encoded_shape(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.encoded_shape_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}
inline std::string* Transit_Fetch_Shape::mutable_encoded_shape() {
  std::string* _s = _internal_mutable_encoded_shape();
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  return _s;
}
inline const std::string& Transit_Fetch_Shape::_internal_encoded_shape() const {
  return _impl_.encoded_shape_.Get();
}
inline void Transit_Fetch_Shape::_internal_set_encoded_shape(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.encoded_shape_.Set(value, GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Shape::_internal_mutable_encoded_shape() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.encoded_shape_.Mutable(GetArenaForAllocation());
}
inline std::string* Transit_Fetch_Shape::release_encoded_shape() {
  // @@protoc_insertion_point(field_release:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
  if (!_internal_has_encoded_shape()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.encoded_shape_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoded_shape_.IsDefault()) {
    _impl_.encoded_shape_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Transit_Fetch_Shape::set_allocated_encoded_shape(std::string* encoded_shape) {
  if (encoded_shape != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.encoded_shape_.SetAllocated(encoded_shape, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoded_shape_.IsDefault()) {
    _impl_.encoded_shape_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:valhalla.mjolnir.Transit_Fetch.Shape.encoded_shape)
}

// -------------------------------------------------------------------

// Transit_Fetch

// repeated .valhalla.mjolnir.Transit_Fetch.Stop stops = 1;
inline int Transit_Fetch::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Transit_Fetch::stops_size() const {
  return _internal_stops_size();
}
inline void Transit_Fetch::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::valhalla::mjolnir::Transit_Fetch_Stop* Transit_Fetch::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >*
Transit_Fetch::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.stops)
  return &_impl_.stops_;
}
inline const ::valhalla::mjolnir::Transit_Fetch_Stop& Transit_Fetch::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::valhalla::mjolnir::Transit_Fetch_Stop& Transit_Fetch::stops(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.stops)
  return _internal_stops(index);
}
inline ::valhalla::mjolnir::Transit_Fetch_Stop* Transit_Fetch::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::valhalla::mjolnir::Transit_Fetch_Stop* Transit_Fetch::add_stops() {
  ::valhalla::mjolnir::Transit_Fetch_Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Stop >&
Transit_Fetch::stops() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.stops)
  return _impl_.stops_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.StopPair stop_pairs = 2;
inline int Transit_Fetch::_internal_stop_pairs_size() const {
  return _impl_.stop_pairs_.size();
}
inline int Transit_Fetch::stop_pairs_size() const {
  return _internal_stop_pairs_size();
}
inline void Transit_Fetch::clear_stop_pairs() {
  _impl_.stop_pairs_.Clear();
}
inline ::valhalla::mjolnir::Transit_Fetch_StopPair* Transit_Fetch::mutable_stop_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return _impl_.stop_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >*
Transit_Fetch::mutable_stop_pairs() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return &_impl_.stop_pairs_;
}
inline const ::valhalla::mjolnir::Transit_Fetch_StopPair& Transit_Fetch::_internal_stop_pairs(int index) const {
  return _impl_.stop_pairs_.Get(index);
}
inline const ::valhalla::mjolnir::Transit_Fetch_StopPair& Transit_Fetch::stop_pairs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return _internal_stop_pairs(index);
}
inline ::valhalla::mjolnir::Transit_Fetch_StopPair* Transit_Fetch::_internal_add_stop_pairs() {
  return _impl_.stop_pairs_.Add();
}
inline ::valhalla::mjolnir::Transit_Fetch_StopPair* Transit_Fetch::add_stop_pairs() {
  ::valhalla::mjolnir::Transit_Fetch_StopPair* _add = _internal_add_stop_pairs();
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_StopPair >&
Transit_Fetch::stop_pairs() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.stop_pairs)
  return _impl_.stop_pairs_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.Route routes = 3;
inline int Transit_Fetch::_internal_routes_size() const {
  return _impl_.routes_.size();
}
inline int Transit_Fetch::routes_size() const {
  return _internal_routes_size();
}
inline void Transit_Fetch::clear_routes() {
  _impl_.routes_.Clear();
}
inline ::valhalla::mjolnir::Transit_Fetch_Route* Transit_Fetch::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.routes)
  return _impl_.routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >*
Transit_Fetch::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.routes)
  return &_impl_.routes_;
}
inline const ::valhalla::mjolnir::Transit_Fetch_Route& Transit_Fetch::_internal_routes(int index) const {
  return _impl_.routes_.Get(index);
}
inline const ::valhalla::mjolnir::Transit_Fetch_Route& Transit_Fetch::routes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.routes)
  return _internal_routes(index);
}
inline ::valhalla::mjolnir::Transit_Fetch_Route* Transit_Fetch::_internal_add_routes() {
  return _impl_.routes_.Add();
}
inline ::valhalla::mjolnir::Transit_Fetch_Route* Transit_Fetch::add_routes() {
  ::valhalla::mjolnir::Transit_Fetch_Route* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Route >&
Transit_Fetch::routes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.routes)
  return _impl_.routes_;
}

// repeated .valhalla.mjolnir.Transit_Fetch.Shape shapes = 4;
inline int Transit_Fetch::_internal_shapes_size() const {
  return _impl_.shapes_.size();
}
inline int Transit_Fetch::shapes_size() const {
  return _internal_shapes_size();
}
inline void Transit_Fetch::clear_shapes() {
  _impl_.shapes_.Clear();
}
inline ::valhalla::mjolnir::Transit_Fetch_Shape* Transit_Fetch::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.mjolnir.Transit_Fetch.shapes)
  return _impl_.shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >*
Transit_Fetch::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.mjolnir.Transit_Fetch.shapes)
  return &_impl_.shapes_;
}
inline const ::valhalla::mjolnir::Transit_Fetch_Shape& Transit_Fetch::_internal_shapes(int index) const {
  return _impl_.shapes_.Get(index);
}
inline const ::valhalla::mjolnir::Transit_Fetch_Shape& Transit_Fetch::shapes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.mjolnir.Transit_Fetch.shapes)
  return _internal_shapes(index);
}
inline ::valhalla::mjolnir::Transit_Fetch_Shape* Transit_Fetch::_internal_add_shapes() {
  return _impl_.shapes_.Add();
}
inline ::valhalla::mjolnir::Transit_Fetch_Shape* Transit_Fetch::add_shapes() {
  ::valhalla::mjolnir::Transit_Fetch_Shape* _add = _internal_add_shapes();
  // @@protoc_insertion_point(field_add:valhalla.mjolnir.Transit_Fetch.shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::mjolnir::Transit_Fetch_Shape >&
Transit_Fetch::shapes() const {
  // @@protoc_insertion_point(field_list:valhalla.mjolnir.Transit_Fetch.shapes)
  return _impl_.shapes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mjolnir
}  // namespace valhalla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::valhalla::mjolnir::Transit_Fetch_VehicleType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transit_5ffetch_2eproto
