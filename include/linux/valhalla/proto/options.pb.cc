// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace valhalla {

void protobuf_ShutdownFile_options_2eproto() {
  delete Contour::default_instance_;
  delete AvoidEdge::default_instance_;
  delete CostingOptions::default_instance_;
  delete Options::default_instance_;
  delete Options_Ring::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_options_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_options_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_options_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::valhalla::protobuf_AddDesc_tripcommon_2eproto();
  Contour::default_instance_ = new Contour();
  AvoidEdge::default_instance_ = new AvoidEdge();
  CostingOptions::default_instance_ = new CostingOptions();
  Options::default_instance_ = new Options();
  Options_Ring::default_instance_ = new Options_Ring();
  Contour::default_instance_->InitAsDefaultInstance();
  AvoidEdge::default_instance_->InitAsDefaultInstance();
  CostingOptions::default_instance_->InitAsDefaultInstance();
  Options::default_instance_->InitAsDefaultInstance();
  Options_Ring::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_options_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_options_2eproto_once_);
void protobuf_AddDesc_options_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_options_2eproto_once_,
                 &protobuf_AddDesc_options_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_options_2eproto {
  StaticDescriptorInitializer_options_2eproto() {
    protobuf_AddDesc_options_2eproto();
  }
} static_descriptor_initializer_options_2eproto_;
#endif
bool ShapeMatch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool FilterAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool DirectionsType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ShapeFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool Costing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contour::kTimeFieldNumber;
const int Contour::kColorFieldNumber;
const int Contour::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contour::Contour()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Contour)
}

void Contour::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Contour::Contour(const Contour& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Contour)
}

void Contour::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_has_time();
  clear_has_has_color();
  clear_has_has_distance();
}

Contour::~Contour() {
  // @@protoc_insertion_point(destructor:valhalla.Contour)
  SharedDtor();
}

void Contour::SharedDtor() {
  if (has_has_time()) {
    clear_has_time();
  }
  if (has_has_color()) {
    clear_has_color();
  }
  if (has_has_distance()) {
    clear_has_distance();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Contour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Contour& Contour::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_options_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_options_2eproto();
#endif
  return *default_instance_;
}

Contour* Contour::default_instance_ = NULL;

Contour* Contour::New(::google::protobuf::Arena* arena) const {
  Contour* n = new Contour;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Contour::clear_has_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Contour)
  switch(has_time_case()) {
    case kTime: {
      // No need to clear
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_TIME_NOT_SET;
}

void Contour::clear_has_color() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Contour)
  switch(has_color_case()) {
    case kColor: {
      has_color_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_COLOR_NOT_SET;
}

void Contour::clear_has_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Contour)
  switch(has_distance_case()) {
    case kDistance: {
      // No need to clear
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_DISTANCE_NOT_SET;
}


void Contour::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Contour)
  clear_has_time();
  clear_has_color();
  clear_has_distance();
}

bool Contour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Contour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time = 1;
      case 1: {
        if (tag == 13) {
          clear_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_time_.time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional string color = 2;
      case 2: {
        if (tag == 18) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Contour.color"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_distance;
        break;
      }

      // optional float distance = 3;
      case 3: {
        if (tag == 29) {
         parse_distance:
          clear_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_distance_.distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Contour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Contour)
  return false;
#undef DO_
}

void Contour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Contour)
  // optional float time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }

  // optional string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Contour.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color(), output);
  }

  // optional float distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Contour)
}

int Contour::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Contour)
  int total_size = 0;

  switch (has_time_case()) {
    // optional float time = 1;
    case kTime: {
      total_size += 1 + 4;
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_color_case()) {
    // optional string color = 2;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  switch (has_distance_case()) {
    // optional float distance = 3;
    case kDistance: {
      total_size += 1 + 4;
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contour::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Contour*>(&from));
}

void Contour::MergeFrom(const Contour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Contour)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_time_case()) {
    case kTime: {
      set_time(from.time());
      break;
    }
    case HAS_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_color_case()) {
    case kColor: {
      set_color(from.color());
      break;
    }
    case HAS_COLOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_distance_case()) {
    case kDistance: {
      set_distance(from.distance());
      break;
    }
    case HAS_DISTANCE_NOT_SET: {
      break;
    }
  }
}

void Contour::CopyFrom(const Contour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Contour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contour::IsInitialized() const {

  return true;
}

void Contour::Swap(Contour* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contour::InternalSwap(Contour* other) {
  std::swap(has_time_, other->has_time_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_color_, other->has_color_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_distance_, other->has_distance_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Contour::GetTypeName() const {
  return "valhalla.Contour";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Contour

// optional float time = 1;
bool Contour::has_time() const {
  return has_time_case() == kTime;
}
void Contour::set_has_time() {
  _oneof_case_[0] = kTime;
}
void Contour::clear_time() {
  if (has_time()) {
    has_time_.time_ = 0;
    clear_has_has_time();
  }
}
 float Contour::time() const {
  // @@protoc_insertion_point(field_get:valhalla.Contour.time)
  if (has_time()) {
    return has_time_.time_;
  }
  return 0;
}
 void Contour::set_time(float value) {
  if (!has_time()) {
    clear_has_time();
    set_has_time();
  }
  has_time_.time_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Contour.time)
}

// optional string color = 2;
bool Contour::has_color() const {
  return has_color_case() == kColor;
}
void Contour::set_has_color() {
  _oneof_case_[1] = kColor;
}
void Contour::clear_color() {
  if (has_color()) {
    has_color_.color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_color();
  }
}
 const ::std::string& Contour::color() const {
  // @@protoc_insertion_point(field_get:valhalla.Contour.color)
  if (has_color()) {
    return has_color_.color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Contour::set_color(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Contour.color)
  if (!has_color()) {
    clear_has_color();
    set_has_color();
    has_color_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_color_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Contour.color)
}
 void Contour::set_color(const char* value) {
  if (!has_color()) {
    clear_has_color();
    set_has_color();
    has_color_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_color_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Contour.color)
}
 void Contour::set_color(const char* value, size_t size) {
  if (!has_color()) {
    clear_has_color();
    set_has_color();
    has_color_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_color_.color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Contour.color)
}
 ::std::string* Contour::mutable_color() {
  if (!has_color()) {
    clear_has_color();
    set_has_color();
    has_color_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Contour.color)
  return has_color_.color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contour::release_color() {
  // @@protoc_insertion_point(field_release:valhalla.Contour.color)
  if (has_color()) {
    clear_has_has_color();
    return has_color_.color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Contour::set_allocated_color(::std::string* color) {
  if (!has_color()) {
    has_color_.color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_color();
  if (color != NULL) {
    set_has_color();
    has_color_.color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        color);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Contour.color)
}

// optional float distance = 3;
bool Contour::has_distance() const {
  return has_distance_case() == kDistance;
}
void Contour::set_has_distance() {
  _oneof_case_[2] = kDistance;
}
void Contour::clear_distance() {
  if (has_distance()) {
    has_distance_.distance_ = 0;
    clear_has_has_distance();
  }
}
 float Contour::distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Contour.distance)
  if (has_distance()) {
    return has_distance_.distance_;
  }
  return 0;
}
 void Contour::set_distance(float value) {
  if (!has_distance()) {
    clear_has_distance();
    set_has_distance();
  }
  has_distance_.distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Contour.distance)
}

bool Contour::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
void Contour::clear_has_has_time() {
  _oneof_case_[0] = HAS_TIME_NOT_SET;
}
bool Contour::has_has_color() const {
  return has_color_case() != HAS_COLOR_NOT_SET;
}
void Contour::clear_has_has_color() {
  _oneof_case_[1] = HAS_COLOR_NOT_SET;
}
bool Contour::has_has_distance() const {
  return has_distance_case() != HAS_DISTANCE_NOT_SET;
}
void Contour::clear_has_has_distance() {
  _oneof_case_[2] = HAS_DISTANCE_NOT_SET;
}
Contour::HasTimeCase Contour::has_time_case() const {
  return Contour::HasTimeCase(_oneof_case_[0]);
}
Contour::HasColorCase Contour::has_color_case() const {
  return Contour::HasColorCase(_oneof_case_[1]);
}
Contour::HasDistanceCase Contour::has_distance_case() const {
  return Contour::HasDistanceCase(_oneof_case_[2]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvoidEdge::kIdFieldNumber;
const int AvoidEdge::kPercentAlongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvoidEdge::AvoidEdge()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.AvoidEdge)
}

void AvoidEdge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AvoidEdge::AvoidEdge(const AvoidEdge& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.AvoidEdge)
}

void AvoidEdge::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_has_id();
  clear_has_has_percent_along();
}

AvoidEdge::~AvoidEdge() {
  // @@protoc_insertion_point(destructor:valhalla.AvoidEdge)
  SharedDtor();
}

void AvoidEdge::SharedDtor() {
  if (has_has_id()) {
    clear_has_id();
  }
  if (has_has_percent_along()) {
    clear_has_percent_along();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AvoidEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvoidEdge& AvoidEdge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_options_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_options_2eproto();
#endif
  return *default_instance_;
}

AvoidEdge* AvoidEdge::default_instance_ = NULL;

AvoidEdge* AvoidEdge::New(::google::protobuf::Arena* arena) const {
  AvoidEdge* n = new AvoidEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvoidEdge::clear_has_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.AvoidEdge)
  switch(has_id_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_ID_NOT_SET;
}

void AvoidEdge::clear_has_percent_along() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.AvoidEdge)
  switch(has_percent_along_case()) {
    case kPercentAlong: {
      // No need to clear
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}


void AvoidEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.AvoidEdge)
  clear_has_id();
  clear_has_percent_along();
}

bool AvoidEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.AvoidEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          clear_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &has_id_.id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_percent_along;
        break;
      }

      // optional float percent_along = 2;
      case 2: {
        if (tag == 21) {
         parse_percent_along:
          clear_has_percent_along();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_percent_along_.percent_along_)));
          set_has_percent_along();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.AvoidEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.AvoidEdge)
  return false;
#undef DO_
}

void AvoidEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.AvoidEdge)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional float percent_along = 2;
  if (has_percent_along()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percent_along(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.AvoidEdge)
}

int AvoidEdge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.AvoidEdge)
  int total_size = 0;

  switch (has_id_case()) {
    // optional uint64 id = 1;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  switch (has_percent_along_case()) {
    // optional float percent_along = 2;
    case kPercentAlong: {
      total_size += 1 + 4;
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvoidEdge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvoidEdge*>(&from));
}

void AvoidEdge::MergeFrom(const AvoidEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.AvoidEdge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.has_id_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_percent_along_case()) {
    case kPercentAlong: {
      set_percent_along(from.percent_along());
      break;
    }
    case HAS_PERCENT_ALONG_NOT_SET: {
      break;
    }
  }
}

void AvoidEdge::CopyFrom(const AvoidEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.AvoidEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidEdge::IsInitialized() const {

  return true;
}

void AvoidEdge::Swap(AvoidEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvoidEdge::InternalSwap(AvoidEdge* other) {
  std::swap(has_id_, other->has_id_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_percent_along_, other->has_percent_along_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AvoidEdge::GetTypeName() const {
  return "valhalla.AvoidEdge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvoidEdge

// optional uint64 id = 1;
bool AvoidEdge::has_id() const {
  return has_id_case() == kId;
}
void AvoidEdge::set_has_id() {
  _oneof_case_[0] = kId;
}
void AvoidEdge::clear_id() {
  if (has_id()) {
    has_id_.id_ = GOOGLE_ULONGLONG(0);
    clear_has_has_id();
  }
}
 ::google::protobuf::uint64 AvoidEdge::id() const {
  // @@protoc_insertion_point(field_get:valhalla.AvoidEdge.id)
  if (has_id()) {
    return has_id_.id_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void AvoidEdge::set_id(::google::protobuf::uint64 value) {
  if (!has_id()) {
    clear_has_id();
    set_has_id();
  }
  has_id_.id_ = value;
  // @@protoc_insertion_point(field_set:valhalla.AvoidEdge.id)
}

// optional float percent_along = 2;
bool AvoidEdge::has_percent_along() const {
  return has_percent_along_case() == kPercentAlong;
}
void AvoidEdge::set_has_percent_along() {
  _oneof_case_[1] = kPercentAlong;
}
void AvoidEdge::clear_percent_along() {
  if (has_percent_along()) {
    has_percent_along_.percent_along_ = 0;
    clear_has_has_percent_along();
  }
}
 float AvoidEdge::percent_along() const {
  // @@protoc_insertion_point(field_get:valhalla.AvoidEdge.percent_along)
  if (has_percent_along()) {
    return has_percent_along_.percent_along_;
  }
  return 0;
}
 void AvoidEdge::set_percent_along(float value) {
  if (!has_percent_along()) {
    clear_has_percent_along();
    set_has_percent_along();
  }
  has_percent_along_.percent_along_ = value;
  // @@protoc_insertion_point(field_set:valhalla.AvoidEdge.percent_along)
}

bool AvoidEdge::has_has_id() const {
  return has_id_case() != HAS_ID_NOT_SET;
}
void AvoidEdge::clear_has_has_id() {
  _oneof_case_[0] = HAS_ID_NOT_SET;
}
bool AvoidEdge::has_has_percent_along() const {
  return has_percent_along_case() != HAS_PERCENT_ALONG_NOT_SET;
}
void AvoidEdge::clear_has_has_percent_along() {
  _oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}
AvoidEdge::HasIdCase AvoidEdge::has_id_case() const {
  return AvoidEdge::HasIdCase(_oneof_case_[0]);
}
AvoidEdge::HasPercentAlongCase AvoidEdge::has_percent_along_case() const {
  return AvoidEdge::HasPercentAlongCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostingOptions::kManeuverPenaltyFieldNumber;
const int CostingOptions::kDestinationOnlyPenaltyFieldNumber;
const int CostingOptions::kGateCostFieldNumber;
const int CostingOptions::kGatePenaltyFieldNumber;
const int CostingOptions::kTollBoothCostFieldNumber;
const int CostingOptions::kTollBoothPenaltyFieldNumber;
const int CostingOptions::kAlleyPenaltyFieldNumber;
const int CostingOptions::kCountryCrossingCostFieldNumber;
const int CostingOptions::kCountryCrossingPenaltyFieldNumber;
const int CostingOptions::kFerryCostFieldNumber;
const int CostingOptions::kAvoidBadSurfacesFieldNumber;
const int CostingOptions::kUseFerryFieldNumber;
const int CostingOptions::kUseHighwaysFieldNumber;
const int CostingOptions::kUseTollsFieldNumber;
const int CostingOptions::kUseRoadsFieldNumber;
const int CostingOptions::kMaxDistanceFieldNumber;
const int CostingOptions::kWalkingSpeedFieldNumber;
const int CostingOptions::kStepPenaltyFieldNumber;
const int CostingOptions::kMaxGradeFieldNumber;
const int CostingOptions::kMaxHikingDifficultyFieldNumber;
const int CostingOptions::kModeFactorFieldNumber;
const int CostingOptions::kWalkwayFactorFieldNumber;
const int CostingOptions::kSidewalkFactorFieldNumber;
const int CostingOptions::kAlleyFactorFieldNumber;
const int CostingOptions::kDrivewayFactorFieldNumber;
const int CostingOptions::kDrivewayPenaltyFieldNumber;
const int CostingOptions::kTransitStartEndMaxDistanceFieldNumber;
const int CostingOptions::kTransitTransferMaxDistanceFieldNumber;
const int CostingOptions::kTransportTypeFieldNumber;
const int CostingOptions::kTopSpeedFieldNumber;
const int CostingOptions::kUseHillsFieldNumber;
const int CostingOptions::kUsePrimaryFieldNumber;
const int CostingOptions::kUseTrailsFieldNumber;
const int CostingOptions::kLowClassPenaltyFieldNumber;
const int CostingOptions::kHazmatFieldNumber;
const int CostingOptions::kWeightFieldNumber;
const int CostingOptions::kAxleLoadFieldNumber;
const int CostingOptions::kHeightFieldNumber;
const int CostingOptions::kWidthFieldNumber;
const int CostingOptions::kLengthFieldNumber;
const int CostingOptions::kCyclingSpeedFieldNumber;
const int CostingOptions::kWheelchairFieldNumber;
const int CostingOptions::kBicycleFieldNumber;
const int CostingOptions::kUseBusFieldNumber;
const int CostingOptions::kUseRailFieldNumber;
const int CostingOptions::kUseTransfersFieldNumber;
const int CostingOptions::kTransferCostFieldNumber;
const int CostingOptions::kTransferPenaltyFieldNumber;
const int CostingOptions::kFilterStopActionFieldNumber;
const int CostingOptions::kFilterStopIdsFieldNumber;
const int CostingOptions::kFilterOperatorActionFieldNumber;
const int CostingOptions::kFilterOperatorIdsFieldNumber;
const int CostingOptions::kFilterRouteActionFieldNumber;
const int CostingOptions::kFilterRouteIdsFieldNumber;
const int CostingOptions::kFlowMaskFieldNumber;
const int CostingOptions::kBikeShareCostFieldNumber;
const int CostingOptions::kBikeSharePenaltyFieldNumber;
const int CostingOptions::kRailFerryCostFieldNumber;
const int CostingOptions::kUseRailFerryFieldNumber;
const int CostingOptions::kIgnoreRestrictionsFieldNumber;
const int CostingOptions::kIgnoreOnewaysFieldNumber;
const int CostingOptions::kIgnoreAccessFieldNumber;
const int CostingOptions::kIgnoreClosuresFieldNumber;
const int CostingOptions::kShortestFieldNumber;
const int CostingOptions::kServicePenaltyFieldNumber;
const int CostingOptions::kUseTracksFieldNumber;
const int CostingOptions::kUseDistanceFieldNumber;
const int CostingOptions::kUseLivingStreetsFieldNumber;
const int CostingOptions::kServiceFactorFieldNumber;
const int CostingOptions::kClosureFactorFieldNumber;
const int CostingOptions::kPrivateAccessPenaltyFieldNumber;
const int CostingOptions::kExcludeUnpavedFieldNumber;
const int CostingOptions::kIncludeHotFieldNumber;
const int CostingOptions::kIncludeHov2FieldNumber;
const int CostingOptions::kIncludeHov3FieldNumber;
const int CostingOptions::kExcludeCashOnlyTollsFieldNumber;
const int CostingOptions::kRestrictionProbabilityFieldNumber;
const int CostingOptions::kCostingFieldNumber;
const int CostingOptions::kNameFieldNumber;
const int CostingOptions::kExcludeEdgesFieldNumber;
const int CostingOptions::kFilterClosuresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostingOptions::CostingOptions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.CostingOptions)
}

void CostingOptions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CostingOptions::CostingOptions(const CostingOptions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.CostingOptions)
}

void CostingOptions::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filter_stop_action_ = 0;
  filter_operator_action_ = 0;
  filter_route_action_ = 0;
  clear_has_has_maneuver_penalty();
  clear_has_has_destination_only_penalty();
  clear_has_has_gate_cost();
  clear_has_has_gate_penalty();
  clear_has_has_toll_booth_cost();
  clear_has_has_toll_booth_penalty();
  clear_has_has_alley_penalty();
  clear_has_has_country_crossing_cost();
  clear_has_has_country_crossing_penalty();
  clear_has_has_ferry_cost();
  clear_has_has_avoid_bad_surfaces();
  clear_has_has_use_ferry();
  clear_has_has_use_highways();
  clear_has_has_use_tolls();
  clear_has_has_use_roads();
  clear_has_has_max_distance();
  clear_has_has_walking_speed();
  clear_has_has_step_penalty();
  clear_has_has_max_grade();
  clear_has_has_max_hiking_difficulty();
  clear_has_has_mode_factor();
  clear_has_has_walkway_factor();
  clear_has_has_sidewalk_factor();
  clear_has_has_alley_factor();
  clear_has_has_driveway_factor();
  clear_has_has_driveway_penalty();
  clear_has_has_transit_start_end_max_distance();
  clear_has_has_transit_transfer_max_distance();
  clear_has_has_transport_type();
  clear_has_has_top_speed();
  clear_has_has_use_hills();
  clear_has_has_use_primary();
  clear_has_has_use_trails();
  clear_has_has_low_class_penalty();
  clear_has_has_hazmat();
  clear_has_has_weight();
  clear_has_has_axle_load();
  clear_has_has_height();
  clear_has_has_width();
  clear_has_has_length();
  clear_has_has_cycling_speed();
  clear_has_has_wheelchair();
  clear_has_has_bicycle();
  clear_has_has_use_bus();
  clear_has_has_use_rail();
  clear_has_has_use_transfers();
  clear_has_has_transfer_cost();
  clear_has_has_transfer_penalty();
  clear_has_has_flow_mask();
  clear_has_has_bike_share_cost();
  clear_has_has_bike_share_penalty();
  clear_has_has_rail_ferry_cost();
  clear_has_has_use_rail_ferry();
  clear_has_has_ignore_restrictions();
  clear_has_has_ignore_oneways();
  clear_has_has_ignore_access();
  clear_has_has_ignore_closures();
  clear_has_has_shortest();
  clear_has_has_service_penalty();
  clear_has_has_use_tracks();
  clear_has_has_use_distance();
  clear_has_has_use_living_streets();
  clear_has_has_service_factor();
  clear_has_has_closure_factor();
  clear_has_has_private_access_penalty();
  clear_has_has_exclude_unpaved();
  clear_has_has_include_hot();
  clear_has_has_include_hov2();
  clear_has_has_include_hov3();
  clear_has_has_exclude_cash_only_tolls();
  clear_has_has_restriction_probability();
  clear_has_has_costing();
  clear_has_has_name();
  clear_has_has_filter_closures();
}

CostingOptions::~CostingOptions() {
  // @@protoc_insertion_point(destructor:valhalla.CostingOptions)
  SharedDtor();
}

void CostingOptions::SharedDtor() {
  if (has_has_maneuver_penalty()) {
    clear_has_maneuver_penalty();
  }
  if (has_has_destination_only_penalty()) {
    clear_has_destination_only_penalty();
  }
  if (has_has_gate_cost()) {
    clear_has_gate_cost();
  }
  if (has_has_gate_penalty()) {
    clear_has_gate_penalty();
  }
  if (has_has_toll_booth_cost()) {
    clear_has_toll_booth_cost();
  }
  if (has_has_toll_booth_penalty()) {
    clear_has_toll_booth_penalty();
  }
  if (has_has_alley_penalty()) {
    clear_has_alley_penalty();
  }
  if (has_has_country_crossing_cost()) {
    clear_has_country_crossing_cost();
  }
  if (has_has_country_crossing_penalty()) {
    clear_has_country_crossing_penalty();
  }
  if (has_has_ferry_cost()) {
    clear_has_ferry_cost();
  }
  if (has_has_avoid_bad_surfaces()) {
    clear_has_avoid_bad_surfaces();
  }
  if (has_has_use_ferry()) {
    clear_has_use_ferry();
  }
  if (has_has_use_highways()) {
    clear_has_use_highways();
  }
  if (has_has_use_tolls()) {
    clear_has_use_tolls();
  }
  if (has_has_use_roads()) {
    clear_has_use_roads();
  }
  if (has_has_max_distance()) {
    clear_has_max_distance();
  }
  if (has_has_walking_speed()) {
    clear_has_walking_speed();
  }
  if (has_has_step_penalty()) {
    clear_has_step_penalty();
  }
  if (has_has_max_grade()) {
    clear_has_max_grade();
  }
  if (has_has_max_hiking_difficulty()) {
    clear_has_max_hiking_difficulty();
  }
  if (has_has_mode_factor()) {
    clear_has_mode_factor();
  }
  if (has_has_walkway_factor()) {
    clear_has_walkway_factor();
  }
  if (has_has_sidewalk_factor()) {
    clear_has_sidewalk_factor();
  }
  if (has_has_alley_factor()) {
    clear_has_alley_factor();
  }
  if (has_has_driveway_factor()) {
    clear_has_driveway_factor();
  }
  if (has_has_driveway_penalty()) {
    clear_has_driveway_penalty();
  }
  if (has_has_transit_start_end_max_distance()) {
    clear_has_transit_start_end_max_distance();
  }
  if (has_has_transit_transfer_max_distance()) {
    clear_has_transit_transfer_max_distance();
  }
  if (has_has_transport_type()) {
    clear_has_transport_type();
  }
  if (has_has_top_speed()) {
    clear_has_top_speed();
  }
  if (has_has_use_hills()) {
    clear_has_use_hills();
  }
  if (has_has_use_primary()) {
    clear_has_use_primary();
  }
  if (has_has_use_trails()) {
    clear_has_use_trails();
  }
  if (has_has_low_class_penalty()) {
    clear_has_low_class_penalty();
  }
  if (has_has_hazmat()) {
    clear_has_hazmat();
  }
  if (has_has_weight()) {
    clear_has_weight();
  }
  if (has_has_axle_load()) {
    clear_has_axle_load();
  }
  if (has_has_height()) {
    clear_has_height();
  }
  if (has_has_width()) {
    clear_has_width();
  }
  if (has_has_length()) {
    clear_has_length();
  }
  if (has_has_cycling_speed()) {
    clear_has_cycling_speed();
  }
  if (has_has_wheelchair()) {
    clear_has_wheelchair();
  }
  if (has_has_bicycle()) {
    clear_has_bicycle();
  }
  if (has_has_use_bus()) {
    clear_has_use_bus();
  }
  if (has_has_use_rail()) {
    clear_has_use_rail();
  }
  if (has_has_use_transfers()) {
    clear_has_use_transfers();
  }
  if (has_has_transfer_cost()) {
    clear_has_transfer_cost();
  }
  if (has_has_transfer_penalty()) {
    clear_has_transfer_penalty();
  }
  if (has_has_flow_mask()) {
    clear_has_flow_mask();
  }
  if (has_has_bike_share_cost()) {
    clear_has_bike_share_cost();
  }
  if (has_has_bike_share_penalty()) {
    clear_has_bike_share_penalty();
  }
  if (has_has_rail_ferry_cost()) {
    clear_has_rail_ferry_cost();
  }
  if (has_has_use_rail_ferry()) {
    clear_has_use_rail_ferry();
  }
  if (has_has_ignore_restrictions()) {
    clear_has_ignore_restrictions();
  }
  if (has_has_ignore_oneways()) {
    clear_has_ignore_oneways();
  }
  if (has_has_ignore_access()) {
    clear_has_ignore_access();
  }
  if (has_has_ignore_closures()) {
    clear_has_ignore_closures();
  }
  if (has_has_shortest()) {
    clear_has_shortest();
  }
  if (has_has_service_penalty()) {
    clear_has_service_penalty();
  }
  if (has_has_use_tracks()) {
    clear_has_use_tracks();
  }
  if (has_has_use_distance()) {
    clear_has_use_distance();
  }
  if (has_has_use_living_streets()) {
    clear_has_use_living_streets();
  }
  if (has_has_service_factor()) {
    clear_has_service_factor();
  }
  if (has_has_closure_factor()) {
    clear_has_closure_factor();
  }
  if (has_has_private_access_penalty()) {
    clear_has_private_access_penalty();
  }
  if (has_has_exclude_unpaved()) {
    clear_has_exclude_unpaved();
  }
  if (has_has_include_hot()) {
    clear_has_include_hot();
  }
  if (has_has_include_hov2()) {
    clear_has_include_hov2();
  }
  if (has_has_include_hov3()) {
    clear_has_include_hov3();
  }
  if (has_has_exclude_cash_only_tolls()) {
    clear_has_exclude_cash_only_tolls();
  }
  if (has_has_restriction_probability()) {
    clear_has_restriction_probability();
  }
  if (has_has_costing()) {
    clear_has_costing();
  }
  if (has_has_name()) {
    clear_has_name();
  }
  if (has_has_filter_closures()) {
    clear_has_filter_closures();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CostingOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CostingOptions& CostingOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_options_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_options_2eproto();
#endif
  return *default_instance_;
}

CostingOptions* CostingOptions::default_instance_ = NULL;

CostingOptions* CostingOptions::New(::google::protobuf::Arena* arena) const {
  CostingOptions* n = new CostingOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CostingOptions::clear_has_maneuver_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_maneuver_penalty_case()) {
    case kManeuverPenalty: {
      // No need to clear
      break;
    }
    case HAS_MANEUVER_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_MANEUVER_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_destination_only_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_destination_only_penalty_case()) {
    case kDestinationOnlyPenalty: {
      // No need to clear
      break;
    }
    case HAS_DESTINATION_ONLY_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_DESTINATION_ONLY_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_gate_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_gate_cost_case()) {
    case kGateCost: {
      // No need to clear
      break;
    }
    case HAS_GATE_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_GATE_COST_NOT_SET;
}

void CostingOptions::clear_has_gate_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_gate_penalty_case()) {
    case kGatePenalty: {
      // No need to clear
      break;
    }
    case HAS_GATE_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_GATE_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_toll_booth_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_toll_booth_cost_case()) {
    case kTollBoothCost: {
      // No need to clear
      break;
    }
    case HAS_TOLL_BOOTH_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_TOLL_BOOTH_COST_NOT_SET;
}

void CostingOptions::clear_has_toll_booth_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_toll_booth_penalty_case()) {
    case kTollBoothPenalty: {
      // No need to clear
      break;
    }
    case HAS_TOLL_BOOTH_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_TOLL_BOOTH_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_alley_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_alley_penalty_case()) {
    case kAlleyPenalty: {
      // No need to clear
      break;
    }
    case HAS_ALLEY_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_ALLEY_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_country_crossing_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_country_crossing_cost_case()) {
    case kCountryCrossingCost: {
      // No need to clear
      break;
    }
    case HAS_COUNTRY_CROSSING_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_COUNTRY_CROSSING_COST_NOT_SET;
}

void CostingOptions::clear_has_country_crossing_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_country_crossing_penalty_case()) {
    case kCountryCrossingPenalty: {
      // No need to clear
      break;
    }
    case HAS_COUNTRY_CROSSING_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_COUNTRY_CROSSING_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_ferry_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_ferry_cost_case()) {
    case kFerryCost: {
      // No need to clear
      break;
    }
    case HAS_FERRY_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_FERRY_COST_NOT_SET;
}

void CostingOptions::clear_has_avoid_bad_surfaces() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_avoid_bad_surfaces_case()) {
    case kAvoidBadSurfaces: {
      // No need to clear
      break;
    }
    case HAS_AVOID_BAD_SURFACES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_AVOID_BAD_SURFACES_NOT_SET;
}

void CostingOptions::clear_has_use_ferry() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_ferry_case()) {
    case kUseFerry: {
      // No need to clear
      break;
    }
    case HAS_USE_FERRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = HAS_USE_FERRY_NOT_SET;
}

void CostingOptions::clear_has_use_highways() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_highways_case()) {
    case kUseHighways: {
      // No need to clear
      break;
    }
    case HAS_USE_HIGHWAYS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[12] = HAS_USE_HIGHWAYS_NOT_SET;
}

void CostingOptions::clear_has_use_tolls() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_tolls_case()) {
    case kUseTolls: {
      // No need to clear
      break;
    }
    case HAS_USE_TOLLS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[13] = HAS_USE_TOLLS_NOT_SET;
}

void CostingOptions::clear_has_use_roads() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_roads_case()) {
    case kUseRoads: {
      // No need to clear
      break;
    }
    case HAS_USE_ROADS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[14] = HAS_USE_ROADS_NOT_SET;
}

void CostingOptions::clear_has_max_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_max_distance_case()) {
    case kMaxDistance: {
      // No need to clear
      break;
    }
    case HAS_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[15] = HAS_MAX_DISTANCE_NOT_SET;
}

void CostingOptions::clear_has_walking_speed() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_walking_speed_case()) {
    case kWalkingSpeed: {
      // No need to clear
      break;
    }
    case HAS_WALKING_SPEED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[16] = HAS_WALKING_SPEED_NOT_SET;
}

void CostingOptions::clear_has_step_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_step_penalty_case()) {
    case kStepPenalty: {
      // No need to clear
      break;
    }
    case HAS_STEP_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[17] = HAS_STEP_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_max_grade() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_max_grade_case()) {
    case kMaxGrade: {
      // No need to clear
      break;
    }
    case HAS_MAX_GRADE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[18] = HAS_MAX_GRADE_NOT_SET;
}

void CostingOptions::clear_has_max_hiking_difficulty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_max_hiking_difficulty_case()) {
    case kMaxHikingDifficulty: {
      // No need to clear
      break;
    }
    case HAS_MAX_HIKING_DIFFICULTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[19] = HAS_MAX_HIKING_DIFFICULTY_NOT_SET;
}

void CostingOptions::clear_has_mode_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_mode_factor_case()) {
    case kModeFactor: {
      // No need to clear
      break;
    }
    case HAS_MODE_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[20] = HAS_MODE_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_walkway_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_walkway_factor_case()) {
    case kWalkwayFactor: {
      // No need to clear
      break;
    }
    case HAS_WALKWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[21] = HAS_WALKWAY_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_sidewalk_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_sidewalk_factor_case()) {
    case kSidewalkFactor: {
      // No need to clear
      break;
    }
    case HAS_SIDEWALK_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[22] = HAS_SIDEWALK_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_alley_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_alley_factor_case()) {
    case kAlleyFactor: {
      // No need to clear
      break;
    }
    case HAS_ALLEY_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[23] = HAS_ALLEY_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_driveway_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_driveway_factor_case()) {
    case kDrivewayFactor: {
      // No need to clear
      break;
    }
    case HAS_DRIVEWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[24] = HAS_DRIVEWAY_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_driveway_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_driveway_penalty_case()) {
    case kDrivewayPenalty: {
      // No need to clear
      break;
    }
    case HAS_DRIVEWAY_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[25] = HAS_DRIVEWAY_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_transit_start_end_max_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_transit_start_end_max_distance_case()) {
    case kTransitStartEndMaxDistance: {
      // No need to clear
      break;
    }
    case HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[26] = HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET;
}

void CostingOptions::clear_has_transit_transfer_max_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_transit_transfer_max_distance_case()) {
    case kTransitTransferMaxDistance: {
      // No need to clear
      break;
    }
    case HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[27] = HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET;
}

void CostingOptions::clear_has_transport_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_transport_type_case()) {
    case kTransportType: {
      has_transport_type_.transport_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_TRANSPORT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[28] = HAS_TRANSPORT_TYPE_NOT_SET;
}

void CostingOptions::clear_has_top_speed() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_top_speed_case()) {
    case kTopSpeed: {
      // No need to clear
      break;
    }
    case HAS_TOP_SPEED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[29] = HAS_TOP_SPEED_NOT_SET;
}

void CostingOptions::clear_has_use_hills() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_hills_case()) {
    case kUseHills: {
      // No need to clear
      break;
    }
    case HAS_USE_HILLS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[30] = HAS_USE_HILLS_NOT_SET;
}

void CostingOptions::clear_has_use_primary() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_primary_case()) {
    case kUsePrimary: {
      // No need to clear
      break;
    }
    case HAS_USE_PRIMARY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[31] = HAS_USE_PRIMARY_NOT_SET;
}

void CostingOptions::clear_has_use_trails() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_trails_case()) {
    case kUseTrails: {
      // No need to clear
      break;
    }
    case HAS_USE_TRAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[32] = HAS_USE_TRAILS_NOT_SET;
}

void CostingOptions::clear_has_low_class_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_low_class_penalty_case()) {
    case kLowClassPenalty: {
      // No need to clear
      break;
    }
    case HAS_LOW_CLASS_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[33] = HAS_LOW_CLASS_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_hazmat() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_hazmat_case()) {
    case kHazmat: {
      // No need to clear
      break;
    }
    case HAS_HAZMAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[34] = HAS_HAZMAT_NOT_SET;
}

void CostingOptions::clear_has_weight() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_weight_case()) {
    case kWeight: {
      // No need to clear
      break;
    }
    case HAS_WEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[35] = HAS_WEIGHT_NOT_SET;
}

void CostingOptions::clear_has_axle_load() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_axle_load_case()) {
    case kAxleLoad: {
      // No need to clear
      break;
    }
    case HAS_AXLE_LOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[36] = HAS_AXLE_LOAD_NOT_SET;
}

void CostingOptions::clear_has_height() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_height_case()) {
    case kHeight: {
      // No need to clear
      break;
    }
    case HAS_HEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[37] = HAS_HEIGHT_NOT_SET;
}

void CostingOptions::clear_has_width() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_width_case()) {
    case kWidth: {
      // No need to clear
      break;
    }
    case HAS_WIDTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[38] = HAS_WIDTH_NOT_SET;
}

void CostingOptions::clear_has_length() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_length_case()) {
    case kLength: {
      // No need to clear
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[39] = HAS_LENGTH_NOT_SET;
}

void CostingOptions::clear_has_cycling_speed() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_cycling_speed_case()) {
    case kCyclingSpeed: {
      // No need to clear
      break;
    }
    case HAS_CYCLING_SPEED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[40] = HAS_CYCLING_SPEED_NOT_SET;
}

void CostingOptions::clear_has_wheelchair() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_wheelchair_case()) {
    case kWheelchair: {
      // No need to clear
      break;
    }
    case HAS_WHEELCHAIR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[41] = HAS_WHEELCHAIR_NOT_SET;
}

void CostingOptions::clear_has_bicycle() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_bicycle_case()) {
    case kBicycle: {
      // No need to clear
      break;
    }
    case HAS_BICYCLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[42] = HAS_BICYCLE_NOT_SET;
}

void CostingOptions::clear_has_use_bus() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_bus_case()) {
    case kUseBus: {
      // No need to clear
      break;
    }
    case HAS_USE_BUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[43] = HAS_USE_BUS_NOT_SET;
}

void CostingOptions::clear_has_use_rail() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_rail_case()) {
    case kUseRail: {
      // No need to clear
      break;
    }
    case HAS_USE_RAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[44] = HAS_USE_RAIL_NOT_SET;
}

void CostingOptions::clear_has_use_transfers() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_transfers_case()) {
    case kUseTransfers: {
      // No need to clear
      break;
    }
    case HAS_USE_TRANSFERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[45] = HAS_USE_TRANSFERS_NOT_SET;
}

void CostingOptions::clear_has_transfer_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_transfer_cost_case()) {
    case kTransferCost: {
      // No need to clear
      break;
    }
    case HAS_TRANSFER_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[46] = HAS_TRANSFER_COST_NOT_SET;
}

void CostingOptions::clear_has_transfer_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_transfer_penalty_case()) {
    case kTransferPenalty: {
      // No need to clear
      break;
    }
    case HAS_TRANSFER_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[47] = HAS_TRANSFER_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_flow_mask() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_flow_mask_case()) {
    case kFlowMask: {
      // No need to clear
      break;
    }
    case HAS_FLOW_MASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[48] = HAS_FLOW_MASK_NOT_SET;
}

void CostingOptions::clear_has_bike_share_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_bike_share_cost_case()) {
    case kBikeShareCost: {
      // No need to clear
      break;
    }
    case HAS_BIKE_SHARE_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[49] = HAS_BIKE_SHARE_COST_NOT_SET;
}

void CostingOptions::clear_has_bike_share_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_bike_share_penalty_case()) {
    case kBikeSharePenalty: {
      // No need to clear
      break;
    }
    case HAS_BIKE_SHARE_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[50] = HAS_BIKE_SHARE_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_rail_ferry_cost() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_rail_ferry_cost_case()) {
    case kRailFerryCost: {
      // No need to clear
      break;
    }
    case HAS_RAIL_FERRY_COST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[51] = HAS_RAIL_FERRY_COST_NOT_SET;
}

void CostingOptions::clear_has_use_rail_ferry() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_rail_ferry_case()) {
    case kUseRailFerry: {
      // No need to clear
      break;
    }
    case HAS_USE_RAIL_FERRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[52] = HAS_USE_RAIL_FERRY_NOT_SET;
}

void CostingOptions::clear_has_ignore_restrictions() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_ignore_restrictions_case()) {
    case kIgnoreRestrictions: {
      // No need to clear
      break;
    }
    case HAS_IGNORE_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[53] = HAS_IGNORE_RESTRICTIONS_NOT_SET;
}

void CostingOptions::clear_has_ignore_oneways() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_ignore_oneways_case()) {
    case kIgnoreOneways: {
      // No need to clear
      break;
    }
    case HAS_IGNORE_ONEWAYS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[54] = HAS_IGNORE_ONEWAYS_NOT_SET;
}

void CostingOptions::clear_has_ignore_access() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_ignore_access_case()) {
    case kIgnoreAccess: {
      // No need to clear
      break;
    }
    case HAS_IGNORE_ACCESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[55] = HAS_IGNORE_ACCESS_NOT_SET;
}

void CostingOptions::clear_has_ignore_closures() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_ignore_closures_case()) {
    case kIgnoreClosures: {
      // No need to clear
      break;
    }
    case HAS_IGNORE_CLOSURES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[56] = HAS_IGNORE_CLOSURES_NOT_SET;
}

void CostingOptions::clear_has_shortest() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_shortest_case()) {
    case kShortest: {
      // No need to clear
      break;
    }
    case HAS_SHORTEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[57] = HAS_SHORTEST_NOT_SET;
}

void CostingOptions::clear_has_service_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_service_penalty_case()) {
    case kServicePenalty: {
      // No need to clear
      break;
    }
    case HAS_SERVICE_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[58] = HAS_SERVICE_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_use_tracks() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_tracks_case()) {
    case kUseTracks: {
      // No need to clear
      break;
    }
    case HAS_USE_TRACKS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[59] = HAS_USE_TRACKS_NOT_SET;
}

void CostingOptions::clear_has_use_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_distance_case()) {
    case kUseDistance: {
      // No need to clear
      break;
    }
    case HAS_USE_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[60] = HAS_USE_DISTANCE_NOT_SET;
}

void CostingOptions::clear_has_use_living_streets() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_use_living_streets_case()) {
    case kUseLivingStreets: {
      // No need to clear
      break;
    }
    case HAS_USE_LIVING_STREETS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[61] = HAS_USE_LIVING_STREETS_NOT_SET;
}

void CostingOptions::clear_has_service_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_service_factor_case()) {
    case kServiceFactor: {
      // No need to clear
      break;
    }
    case HAS_SERVICE_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[62] = HAS_SERVICE_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_closure_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_closure_factor_case()) {
    case kClosureFactor: {
      // No need to clear
      break;
    }
    case HAS_CLOSURE_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[63] = HAS_CLOSURE_FACTOR_NOT_SET;
}

void CostingOptions::clear_has_private_access_penalty() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_private_access_penalty_case()) {
    case kPrivateAccessPenalty: {
      // No need to clear
      break;
    }
    case HAS_PRIVATE_ACCESS_PENALTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[64] = HAS_PRIVATE_ACCESS_PENALTY_NOT_SET;
}

void CostingOptions::clear_has_exclude_unpaved() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_exclude_unpaved_case()) {
    case kExcludeUnpaved: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_UNPAVED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[65] = HAS_EXCLUDE_UNPAVED_NOT_SET;
}

void CostingOptions::clear_has_include_hot() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_include_hot_case()) {
    case kIncludeHot: {
      // No need to clear
      break;
    }
    case HAS_INCLUDE_HOT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[66] = HAS_INCLUDE_HOT_NOT_SET;
}

void CostingOptions::clear_has_include_hov2() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_include_hov2_case()) {
    case kIncludeHov2: {
      // No need to clear
      break;
    }
    case HAS_INCLUDE_HOV2_NOT_SET: {
      break;
    }
  }
  _oneof_case_[67] = HAS_INCLUDE_HOV2_NOT_SET;
}

void CostingOptions::clear_has_include_hov3() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_include_hov3_case()) {
    case kIncludeHov3: {
      // No need to clear
      break;
    }
    case HAS_INCLUDE_HOV3_NOT_SET: {
      break;
    }
  }
  _oneof_case_[68] = HAS_INCLUDE_HOV3_NOT_SET;
}

void CostingOptions::clear_has_exclude_cash_only_tolls() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_exclude_cash_only_tolls_case()) {
    case kExcludeCashOnlyTolls: {
      // No need to clear
      break;
    }
    case HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[69] = HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET;
}

void CostingOptions::clear_has_restriction_probability() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_restriction_probability_case()) {
    case kRestrictionProbability: {
      // No need to clear
      break;
    }
    case HAS_RESTRICTION_PROBABILITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[70] = HAS_RESTRICTION_PROBABILITY_NOT_SET;
}

void CostingOptions::clear_has_costing() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_costing_case()) {
    case kCosting: {
      // No need to clear
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[71] = HAS_COSTING_NOT_SET;
}

void CostingOptions::clear_has_name() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_name_case()) {
    case kName: {
      has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[72] = HAS_NAME_NOT_SET;
}

void CostingOptions::clear_has_filter_closures() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.CostingOptions)
  switch(has_filter_closures_case()) {
    case kFilterClosures: {
      // No need to clear
      break;
    }
    case HAS_FILTER_CLOSURES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[73] = HAS_FILTER_CLOSURES_NOT_SET;
}


void CostingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.CostingOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CostingOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CostingOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(filter_stop_action_, filter_operator_action_);
  filter_route_action_ = 0;

#undef ZR_HELPER_
#undef ZR_

  filter_stop_ids_.Clear();
  filter_operator_ids_.Clear();
  filter_route_ids_.Clear();
  exclude_edges_.Clear();
  clear_has_maneuver_penalty();
  clear_has_destination_only_penalty();
  clear_has_gate_cost();
  clear_has_gate_penalty();
  clear_has_toll_booth_cost();
  clear_has_toll_booth_penalty();
  clear_has_alley_penalty();
  clear_has_country_crossing_cost();
  clear_has_country_crossing_penalty();
  clear_has_ferry_cost();
  clear_has_avoid_bad_surfaces();
  clear_has_use_ferry();
  clear_has_use_highways();
  clear_has_use_tolls();
  clear_has_use_roads();
  clear_has_max_distance();
  clear_has_walking_speed();
  clear_has_step_penalty();
  clear_has_max_grade();
  clear_has_max_hiking_difficulty();
  clear_has_mode_factor();
  clear_has_walkway_factor();
  clear_has_sidewalk_factor();
  clear_has_alley_factor();
  clear_has_driveway_factor();
  clear_has_driveway_penalty();
  clear_has_transit_start_end_max_distance();
  clear_has_transit_transfer_max_distance();
  clear_has_transport_type();
  clear_has_top_speed();
  clear_has_use_hills();
  clear_has_use_primary();
  clear_has_use_trails();
  clear_has_low_class_penalty();
  clear_has_hazmat();
  clear_has_weight();
  clear_has_axle_load();
  clear_has_height();
  clear_has_width();
  clear_has_length();
  clear_has_cycling_speed();
  clear_has_wheelchair();
  clear_has_bicycle();
  clear_has_use_bus();
  clear_has_use_rail();
  clear_has_use_transfers();
  clear_has_transfer_cost();
  clear_has_transfer_penalty();
  clear_has_flow_mask();
  clear_has_bike_share_cost();
  clear_has_bike_share_penalty();
  clear_has_rail_ferry_cost();
  clear_has_use_rail_ferry();
  clear_has_ignore_restrictions();
  clear_has_ignore_oneways();
  clear_has_ignore_access();
  clear_has_ignore_closures();
  clear_has_shortest();
  clear_has_service_penalty();
  clear_has_use_tracks();
  clear_has_use_distance();
  clear_has_use_living_streets();
  clear_has_service_factor();
  clear_has_closure_factor();
  clear_has_private_access_penalty();
  clear_has_exclude_unpaved();
  clear_has_include_hot();
  clear_has_include_hov2();
  clear_has_include_hov3();
  clear_has_exclude_cash_only_tolls();
  clear_has_restriction_probability();
  clear_has_costing();
  clear_has_name();
  clear_has_filter_closures();
}

bool CostingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.CostingOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float maneuver_penalty = 1;
      case 1: {
        if (tag == 13) {
          clear_has_maneuver_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_maneuver_penalty_.maneuver_penalty_)));
          set_has_maneuver_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_destination_only_penalty;
        break;
      }

      // optional float destination_only_penalty = 2;
      case 2: {
        if (tag == 21) {
         parse_destination_only_penalty:
          clear_has_destination_only_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_destination_only_penalty_.destination_only_penalty_)));
          set_has_destination_only_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_gate_cost;
        break;
      }

      // optional float gate_cost = 3;
      case 3: {
        if (tag == 29) {
         parse_gate_cost:
          clear_has_gate_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_gate_cost_.gate_cost_)));
          set_has_gate_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gate_penalty;
        break;
      }

      // optional float gate_penalty = 4;
      case 4: {
        if (tag == 37) {
         parse_gate_penalty:
          clear_has_gate_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_gate_penalty_.gate_penalty_)));
          set_has_gate_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_toll_booth_cost;
        break;
      }

      // optional float toll_booth_cost = 5;
      case 5: {
        if (tag == 45) {
         parse_toll_booth_cost:
          clear_has_toll_booth_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_toll_booth_cost_.toll_booth_cost_)));
          set_has_toll_booth_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_toll_booth_penalty;
        break;
      }

      // optional float toll_booth_penalty = 6;
      case 6: {
        if (tag == 53) {
         parse_toll_booth_penalty:
          clear_has_toll_booth_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_toll_booth_penalty_.toll_booth_penalty_)));
          set_has_toll_booth_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_alley_penalty;
        break;
      }

      // optional float alley_penalty = 7;
      case 7: {
        if (tag == 61) {
         parse_alley_penalty:
          clear_has_alley_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_alley_penalty_.alley_penalty_)));
          set_has_alley_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_country_crossing_cost;
        break;
      }

      // optional float country_crossing_cost = 8;
      case 8: {
        if (tag == 69) {
         parse_country_crossing_cost:
          clear_has_country_crossing_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_country_crossing_cost_.country_crossing_cost_)));
          set_has_country_crossing_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_country_crossing_penalty;
        break;
      }

      // optional float country_crossing_penalty = 9;
      case 9: {
        if (tag == 77) {
         parse_country_crossing_penalty:
          clear_has_country_crossing_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_country_crossing_penalty_.country_crossing_penalty_)));
          set_has_country_crossing_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_ferry_cost;
        break;
      }

      // optional float ferry_cost = 10;
      case 10: {
        if (tag == 85) {
         parse_ferry_cost:
          clear_has_ferry_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_ferry_cost_.ferry_cost_)));
          set_has_ferry_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_avoid_bad_surfaces;
        break;
      }

      // optional float avoid_bad_surfaces = 11;
      case 11: {
        if (tag == 93) {
         parse_avoid_bad_surfaces:
          clear_has_avoid_bad_surfaces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_avoid_bad_surfaces_.avoid_bad_surfaces_)));
          set_has_avoid_bad_surfaces();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_use_ferry;
        break;
      }

      // optional float use_ferry = 12;
      case 12: {
        if (tag == 101) {
         parse_use_ferry:
          clear_has_use_ferry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_ferry_.use_ferry_)));
          set_has_use_ferry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_use_highways;
        break;
      }

      // optional float use_highways = 13;
      case 13: {
        if (tag == 109) {
         parse_use_highways:
          clear_has_use_highways();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_highways_.use_highways_)));
          set_has_use_highways();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_use_tolls;
        break;
      }

      // optional float use_tolls = 14;
      case 14: {
        if (tag == 117) {
         parse_use_tolls:
          clear_has_use_tolls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_tolls_.use_tolls_)));
          set_has_use_tolls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_use_roads;
        break;
      }

      // optional float use_roads = 15;
      case 15: {
        if (tag == 125) {
         parse_use_roads:
          clear_has_use_roads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_roads_.use_roads_)));
          set_has_use_roads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_distance;
        break;
      }

      // optional uint32 max_distance = 16;
      case 16: {
        if (tag == 128) {
         parse_max_distance:
          clear_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_max_distance_.max_distance_)));
          set_has_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_walking_speed;
        break;
      }

      // optional float walking_speed = 17;
      case 17: {
        if (tag == 141) {
         parse_walking_speed:
          clear_has_walking_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_walking_speed_.walking_speed_)));
          set_has_walking_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_step_penalty;
        break;
      }

      // optional float step_penalty = 18;
      case 18: {
        if (tag == 149) {
         parse_step_penalty:
          clear_has_step_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_step_penalty_.step_penalty_)));
          set_has_step_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 19;
      case 19: {
        if (tag == 152) {
         parse_max_grade:
          clear_has_max_grade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_max_grade_.max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_max_hiking_difficulty;
        break;
      }

      // optional uint32 max_hiking_difficulty = 20;
      case 20: {
        if (tag == 160) {
         parse_max_hiking_difficulty:
          clear_has_max_hiking_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_max_hiking_difficulty_.max_hiking_difficulty_)));
          set_has_max_hiking_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_mode_factor;
        break;
      }

      // optional float mode_factor = 21;
      case 21: {
        if (tag == 173) {
         parse_mode_factor:
          clear_has_mode_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_mode_factor_.mode_factor_)));
          set_has_mode_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_walkway_factor;
        break;
      }

      // optional float walkway_factor = 22;
      case 22: {
        if (tag == 181) {
         parse_walkway_factor:
          clear_has_walkway_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_walkway_factor_.walkway_factor_)));
          set_has_walkway_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_sidewalk_factor;
        break;
      }

      // optional float sidewalk_factor = 23;
      case 23: {
        if (tag == 189) {
         parse_sidewalk_factor:
          clear_has_sidewalk_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_sidewalk_factor_.sidewalk_factor_)));
          set_has_sidewalk_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_alley_factor;
        break;
      }

      // optional float alley_factor = 24;
      case 24: {
        if (tag == 197) {
         parse_alley_factor:
          clear_has_alley_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_alley_factor_.alley_factor_)));
          set_has_alley_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_driveway_factor;
        break;
      }

      // optional float driveway_factor = 25;
      case 25: {
        if (tag == 205) {
         parse_driveway_factor:
          clear_has_driveway_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_driveway_factor_.driveway_factor_)));
          set_has_driveway_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_driveway_penalty;
        break;
      }

      // optional float driveway_penalty = 26;
      case 26: {
        if (tag == 213) {
         parse_driveway_penalty:
          clear_has_driveway_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_driveway_penalty_.driveway_penalty_)));
          set_has_driveway_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_transit_start_end_max_distance;
        break;
      }

      // optional uint32 transit_start_end_max_distance = 27;
      case 27: {
        if (tag == 216) {
         parse_transit_start_end_max_distance:
          clear_has_transit_start_end_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_transit_start_end_max_distance_.transit_start_end_max_distance_)));
          set_has_transit_start_end_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_transit_transfer_max_distance;
        break;
      }

      // optional uint32 transit_transfer_max_distance = 28;
      case 28: {
        if (tag == 224) {
         parse_transit_transfer_max_distance:
          clear_has_transit_transfer_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_transit_transfer_max_distance_.transit_transfer_max_distance_)));
          set_has_transit_transfer_max_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_transport_type;
        break;
      }

      // optional string transport_type = 29;
      case 29: {
        if (tag == 234) {
         parse_transport_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transport_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transport_type().data(), this->transport_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CostingOptions.transport_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_top_speed;
        break;
      }

      // optional float top_speed = 30;
      case 30: {
        if (tag == 245) {
         parse_top_speed:
          clear_has_top_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_top_speed_.top_speed_)));
          set_has_top_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_use_hills;
        break;
      }

      // optional float use_hills = 31;
      case 31: {
        if (tag == 253) {
         parse_use_hills:
          clear_has_use_hills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_hills_.use_hills_)));
          set_has_use_hills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_use_primary;
        break;
      }

      // optional float use_primary = 32;
      case 32: {
        if (tag == 261) {
         parse_use_primary:
          clear_has_use_primary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_primary_.use_primary_)));
          set_has_use_primary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_use_trails;
        break;
      }

      // optional float use_trails = 33;
      case 33: {
        if (tag == 269) {
         parse_use_trails:
          clear_has_use_trails();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_trails_.use_trails_)));
          set_has_use_trails();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_low_class_penalty;
        break;
      }

      // optional float low_class_penalty = 34;
      case 34: {
        if (tag == 277) {
         parse_low_class_penalty:
          clear_has_low_class_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_low_class_penalty_.low_class_penalty_)));
          set_has_low_class_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_hazmat;
        break;
      }

      // optional bool hazmat = 35;
      case 35: {
        if (tag == 280) {
         parse_hazmat:
          clear_has_hazmat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_hazmat_.hazmat_)));
          set_has_hazmat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_weight;
        break;
      }

      // optional float weight = 36;
      case 36: {
        if (tag == 293) {
         parse_weight:
          clear_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_weight_.weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_axle_load;
        break;
      }

      // optional float axle_load = 37;
      case 37: {
        if (tag == 301) {
         parse_axle_load:
          clear_has_axle_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_axle_load_.axle_load_)));
          set_has_axle_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_height;
        break;
      }

      // optional float height = 38;
      case 38: {
        if (tag == 309) {
         parse_height:
          clear_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_height_.height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_width;
        break;
      }

      // optional float width = 39;
      case 39: {
        if (tag == 317) {
         parse_width:
          clear_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_width_.width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_length;
        break;
      }

      // optional float length = 40;
      case 40: {
        if (tag == 325) {
         parse_length:
          clear_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_length_.length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_cycling_speed;
        break;
      }

      // optional float cycling_speed = 41;
      case 41: {
        if (tag == 333) {
         parse_cycling_speed:
          clear_has_cycling_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_cycling_speed_.cycling_speed_)));
          set_has_cycling_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_wheelchair;
        break;
      }

      // optional bool wheelchair = 42;
      case 42: {
        if (tag == 336) {
         parse_wheelchair:
          clear_has_wheelchair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wheelchair_.wheelchair_)));
          set_has_wheelchair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_bicycle;
        break;
      }

      // optional bool bicycle = 43;
      case 43: {
        if (tag == 344) {
         parse_bicycle:
          clear_has_bicycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_bicycle_.bicycle_)));
          set_has_bicycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_use_bus;
        break;
      }

      // optional float use_bus = 44;
      case 44: {
        if (tag == 357) {
         parse_use_bus:
          clear_has_use_bus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_bus_.use_bus_)));
          set_has_use_bus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(365)) goto parse_use_rail;
        break;
      }

      // optional float use_rail = 45;
      case 45: {
        if (tag == 365) {
         parse_use_rail:
          clear_has_use_rail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_rail_.use_rail_)));
          set_has_use_rail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(373)) goto parse_use_transfers;
        break;
      }

      // optional float use_transfers = 46;
      case 46: {
        if (tag == 373) {
         parse_use_transfers:
          clear_has_use_transfers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_transfers_.use_transfers_)));
          set_has_use_transfers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_transfer_cost;
        break;
      }

      // optional float transfer_cost = 47;
      case 47: {
        if (tag == 381) {
         parse_transfer_cost:
          clear_has_transfer_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_transfer_cost_.transfer_cost_)));
          set_has_transfer_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(389)) goto parse_transfer_penalty;
        break;
      }

      // optional float transfer_penalty = 48;
      case 48: {
        if (tag == 389) {
         parse_transfer_penalty:
          clear_has_transfer_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_transfer_penalty_.transfer_penalty_)));
          set_has_transfer_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_filter_stop_action;
        break;
      }

      // optional .valhalla.FilterAction filter_stop_action = 49;
      case 49: {
        if (tag == 392) {
         parse_filter_stop_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_stop_action(static_cast< ::valhalla::FilterAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_filter_stop_ids;
        break;
      }

      // repeated string filter_stop_ids = 50;
      case 50: {
        if (tag == 402) {
         parse_filter_stop_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_stop_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_stop_ids(this->filter_stop_ids_size() - 1).data(),
            this->filter_stop_ids(this->filter_stop_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CostingOptions.filter_stop_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_filter_stop_ids;
        if (input->ExpectTag(408)) goto parse_filter_operator_action;
        break;
      }

      // optional .valhalla.FilterAction filter_operator_action = 51;
      case 51: {
        if (tag == 408) {
         parse_filter_operator_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_operator_action(static_cast< ::valhalla::FilterAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_filter_operator_ids;
        break;
      }

      // repeated string filter_operator_ids = 52;
      case 52: {
        if (tag == 418) {
         parse_filter_operator_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_operator_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_operator_ids(this->filter_operator_ids_size() - 1).data(),
            this->filter_operator_ids(this->filter_operator_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CostingOptions.filter_operator_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_filter_operator_ids;
        if (input->ExpectTag(424)) goto parse_filter_route_action;
        break;
      }

      // optional .valhalla.FilterAction filter_route_action = 53;
      case 53: {
        if (tag == 424) {
         parse_filter_route_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_route_action(static_cast< ::valhalla::FilterAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_filter_route_ids;
        break;
      }

      // repeated string filter_route_ids = 54;
      case 54: {
        if (tag == 434) {
         parse_filter_route_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_route_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_route_ids(this->filter_route_ids_size() - 1).data(),
            this->filter_route_ids(this->filter_route_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CostingOptions.filter_route_ids"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_filter_route_ids;
        if (input->ExpectTag(440)) goto parse_flow_mask;
        break;
      }

      // optional uint32 flow_mask = 55;
      case 55: {
        if (tag == 440) {
         parse_flow_mask:
          clear_has_flow_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_flow_mask_.flow_mask_)));
          set_has_flow_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(453)) goto parse_bike_share_cost;
        break;
      }

      // optional float bike_share_cost = 56;
      case 56: {
        if (tag == 453) {
         parse_bike_share_cost:
          clear_has_bike_share_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_bike_share_cost_.bike_share_cost_)));
          set_has_bike_share_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(461)) goto parse_bike_share_penalty;
        break;
      }

      // optional float bike_share_penalty = 57;
      case 57: {
        if (tag == 461) {
         parse_bike_share_penalty:
          clear_has_bike_share_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_bike_share_penalty_.bike_share_penalty_)));
          set_has_bike_share_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(469)) goto parse_rail_ferry_cost;
        break;
      }

      // optional float rail_ferry_cost = 58;
      case 58: {
        if (tag == 469) {
         parse_rail_ferry_cost:
          clear_has_rail_ferry_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_rail_ferry_cost_.rail_ferry_cost_)));
          set_has_rail_ferry_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(477)) goto parse_use_rail_ferry;
        break;
      }

      // optional float use_rail_ferry = 59;
      case 59: {
        if (tag == 477) {
         parse_use_rail_ferry:
          clear_has_use_rail_ferry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_rail_ferry_.use_rail_ferry_)));
          set_has_use_rail_ferry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_ignore_restrictions;
        break;
      }

      // optional bool ignore_restrictions = 60;
      case 60: {
        if (tag == 480) {
         parse_ignore_restrictions:
          clear_has_ignore_restrictions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ignore_restrictions_.ignore_restrictions_)));
          set_has_ignore_restrictions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_ignore_oneways;
        break;
      }

      // optional bool ignore_oneways = 61;
      case 61: {
        if (tag == 488) {
         parse_ignore_oneways:
          clear_has_ignore_oneways();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ignore_oneways_.ignore_oneways_)));
          set_has_ignore_oneways();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_ignore_access;
        break;
      }

      // optional bool ignore_access = 62;
      case 62: {
        if (tag == 496) {
         parse_ignore_access:
          clear_has_ignore_access();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ignore_access_.ignore_access_)));
          set_has_ignore_access();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_ignore_closures;
        break;
      }

      // optional bool ignore_closures = 63;
      case 63: {
        if (tag == 504) {
         parse_ignore_closures:
          clear_has_ignore_closures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ignore_closures_.ignore_closures_)));
          set_has_ignore_closures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_shortest;
        break;
      }

      // optional bool shortest = 64;
      case 64: {
        if (tag == 512) {
         parse_shortest:
          clear_has_shortest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_shortest_.shortest_)));
          set_has_shortest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(525)) goto parse_service_penalty;
        break;
      }

      // optional float service_penalty = 65;
      case 65: {
        if (tag == 525) {
         parse_service_penalty:
          clear_has_service_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_service_penalty_.service_penalty_)));
          set_has_service_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(533)) goto parse_use_tracks;
        break;
      }

      // optional float use_tracks = 66;
      case 66: {
        if (tag == 533) {
         parse_use_tracks:
          clear_has_use_tracks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_tracks_.use_tracks_)));
          set_has_use_tracks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(541)) goto parse_use_distance;
        break;
      }

      // optional float use_distance = 67;
      case 67: {
        if (tag == 541) {
         parse_use_distance:
          clear_has_use_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_distance_.use_distance_)));
          set_has_use_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(549)) goto parse_use_living_streets;
        break;
      }

      // optional float use_living_streets = 68;
      case 68: {
        if (tag == 549) {
         parse_use_living_streets:
          clear_has_use_living_streets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_use_living_streets_.use_living_streets_)));
          set_has_use_living_streets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(557)) goto parse_service_factor;
        break;
      }

      // optional float service_factor = 69;
      case 69: {
        if (tag == 557) {
         parse_service_factor:
          clear_has_service_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_service_factor_.service_factor_)));
          set_has_service_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(565)) goto parse_closure_factor;
        break;
      }

      // optional float closure_factor = 70;
      case 70: {
        if (tag == 565) {
         parse_closure_factor:
          clear_has_closure_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_closure_factor_.closure_factor_)));
          set_has_closure_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(573)) goto parse_private_access_penalty;
        break;
      }

      // optional float private_access_penalty = 71;
      case 71: {
        if (tag == 573) {
         parse_private_access_penalty:
          clear_has_private_access_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_private_access_penalty_.private_access_penalty_)));
          set_has_private_access_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_exclude_unpaved;
        break;
      }

      // optional bool exclude_unpaved = 72;
      case 72: {
        if (tag == 576) {
         parse_exclude_unpaved:
          clear_has_exclude_unpaved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_unpaved_.exclude_unpaved_)));
          set_has_exclude_unpaved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_include_hot;
        break;
      }

      // optional bool include_hot = 73;
      case 73: {
        if (tag == 584) {
         parse_include_hot:
          clear_has_include_hot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_include_hot_.include_hot_)));
          set_has_include_hot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_include_hov2;
        break;
      }

      // optional bool include_hov2 = 74;
      case 74: {
        if (tag == 592) {
         parse_include_hov2:
          clear_has_include_hov2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_include_hov2_.include_hov2_)));
          set_has_include_hov2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_include_hov3;
        break;
      }

      // optional bool include_hov3 = 75;
      case 75: {
        if (tag == 600) {
         parse_include_hov3:
          clear_has_include_hov3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_include_hov3_.include_hov3_)));
          set_has_include_hov3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_exclude_cash_only_tolls;
        break;
      }

      // optional bool exclude_cash_only_tolls = 76;
      case 76: {
        if (tag == 608) {
         parse_exclude_cash_only_tolls:
          clear_has_exclude_cash_only_tolls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_exclude_cash_only_tolls_.exclude_cash_only_tolls_)));
          set_has_exclude_cash_only_tolls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_restriction_probability;
        break;
      }

      // optional uint32 restriction_probability = 77;
      case 77: {
        if (tag == 616) {
         parse_restriction_probability:
          clear_has_restriction_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_restriction_probability_.restriction_probability_)));
          set_has_restriction_probability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_costing;
        break;
      }

      // optional .valhalla.Costing costing = 90;
      case 90: {
        if (tag == 720) {
         parse_costing:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_costing(static_cast< ::valhalla::Costing >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_name;
        break;
      }

      // optional string name = 91;
      case 91: {
        if (tag == 730) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.CostingOptions.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_exclude_edges;
        break;
      }

      // repeated .valhalla.AvoidEdge exclude_edges = 92;
      case 92: {
        if (tag == 738) {
         parse_exclude_edges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_loop_exclude_edges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(744)) goto parse_filter_closures;
        break;
      }

      // optional bool filter_closures = 93;
      case 93: {
        if (tag == 744) {
         parse_filter_closures:
          clear_has_filter_closures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_filter_closures_.filter_closures_)));
          set_has_filter_closures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.CostingOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.CostingOptions)
  return false;
#undef DO_
}

void CostingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.CostingOptions)
  // optional float maneuver_penalty = 1;
  if (has_maneuver_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->maneuver_penalty(), output);
  }

  // optional float destination_only_penalty = 2;
  if (has_destination_only_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->destination_only_penalty(), output);
  }

  // optional float gate_cost = 3;
  if (has_gate_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gate_cost(), output);
  }

  // optional float gate_penalty = 4;
  if (has_gate_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gate_penalty(), output);
  }

  // optional float toll_booth_cost = 5;
  if (has_toll_booth_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->toll_booth_cost(), output);
  }

  // optional float toll_booth_penalty = 6;
  if (has_toll_booth_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->toll_booth_penalty(), output);
  }

  // optional float alley_penalty = 7;
  if (has_alley_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->alley_penalty(), output);
  }

  // optional float country_crossing_cost = 8;
  if (has_country_crossing_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->country_crossing_cost(), output);
  }

  // optional float country_crossing_penalty = 9;
  if (has_country_crossing_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->country_crossing_penalty(), output);
  }

  // optional float ferry_cost = 10;
  if (has_ferry_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ferry_cost(), output);
  }

  // optional float avoid_bad_surfaces = 11;
  if (has_avoid_bad_surfaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->avoid_bad_surfaces(), output);
  }

  // optional float use_ferry = 12;
  if (has_use_ferry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->use_ferry(), output);
  }

  // optional float use_highways = 13;
  if (has_use_highways()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->use_highways(), output);
  }

  // optional float use_tolls = 14;
  if (has_use_tolls()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->use_tolls(), output);
  }

  // optional float use_roads = 15;
  if (has_use_roads()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->use_roads(), output);
  }

  // optional uint32 max_distance = 16;
  if (has_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_distance(), output);
  }

  // optional float walking_speed = 17;
  if (has_walking_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->walking_speed(), output);
  }

  // optional float step_penalty = 18;
  if (has_step_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->step_penalty(), output);
  }

  // optional uint32 max_grade = 19;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->max_grade(), output);
  }

  // optional uint32 max_hiking_difficulty = 20;
  if (has_max_hiking_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->max_hiking_difficulty(), output);
  }

  // optional float mode_factor = 21;
  if (has_mode_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->mode_factor(), output);
  }

  // optional float walkway_factor = 22;
  if (has_walkway_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->walkway_factor(), output);
  }

  // optional float sidewalk_factor = 23;
  if (has_sidewalk_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->sidewalk_factor(), output);
  }

  // optional float alley_factor = 24;
  if (has_alley_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->alley_factor(), output);
  }

  // optional float driveway_factor = 25;
  if (has_driveway_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->driveway_factor(), output);
  }

  // optional float driveway_penalty = 26;
  if (has_driveway_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->driveway_penalty(), output);
  }

  // optional uint32 transit_start_end_max_distance = 27;
  if (has_transit_start_end_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->transit_start_end_max_distance(), output);
  }

  // optional uint32 transit_transfer_max_distance = 28;
  if (has_transit_transfer_max_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->transit_transfer_max_distance(), output);
  }

  // optional string transport_type = 29;
  if (has_transport_type()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transport_type().data(), this->transport_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CostingOptions.transport_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->transport_type(), output);
  }

  // optional float top_speed = 30;
  if (has_top_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->top_speed(), output);
  }

  // optional float use_hills = 31;
  if (has_use_hills()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->use_hills(), output);
  }

  // optional float use_primary = 32;
  if (has_use_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->use_primary(), output);
  }

  // optional float use_trails = 33;
  if (has_use_trails()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->use_trails(), output);
  }

  // optional float low_class_penalty = 34;
  if (has_low_class_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->low_class_penalty(), output);
  }

  // optional bool hazmat = 35;
  if (has_hazmat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->hazmat(), output);
  }

  // optional float weight = 36;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->weight(), output);
  }

  // optional float axle_load = 37;
  if (has_axle_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->axle_load(), output);
  }

  // optional float height = 38;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->height(), output);
  }

  // optional float width = 39;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->width(), output);
  }

  // optional float length = 40;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->length(), output);
  }

  // optional float cycling_speed = 41;
  if (has_cycling_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->cycling_speed(), output);
  }

  // optional bool wheelchair = 42;
  if (has_wheelchair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->wheelchair(), output);
  }

  // optional bool bicycle = 43;
  if (has_bicycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->bicycle(), output);
  }

  // optional float use_bus = 44;
  if (has_use_bus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->use_bus(), output);
  }

  // optional float use_rail = 45;
  if (has_use_rail()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->use_rail(), output);
  }

  // optional float use_transfers = 46;
  if (has_use_transfers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->use_transfers(), output);
  }

  // optional float transfer_cost = 47;
  if (has_transfer_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->transfer_cost(), output);
  }

  // optional float transfer_penalty = 48;
  if (has_transfer_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->transfer_penalty(), output);
  }

  // optional .valhalla.FilterAction filter_stop_action = 49;
  if (this->filter_stop_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->filter_stop_action(), output);
  }

  // repeated string filter_stop_ids = 50;
  for (int i = 0; i < this->filter_stop_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_stop_ids(i).data(), this->filter_stop_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CostingOptions.filter_stop_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->filter_stop_ids(i), output);
  }

  // optional .valhalla.FilterAction filter_operator_action = 51;
  if (this->filter_operator_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->filter_operator_action(), output);
  }

  // repeated string filter_operator_ids = 52;
  for (int i = 0; i < this->filter_operator_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_operator_ids(i).data(), this->filter_operator_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CostingOptions.filter_operator_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->filter_operator_ids(i), output);
  }

  // optional .valhalla.FilterAction filter_route_action = 53;
  if (this->filter_route_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->filter_route_action(), output);
  }

  // repeated string filter_route_ids = 54;
  for (int i = 0; i < this->filter_route_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_route_ids(i).data(), this->filter_route_ids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CostingOptions.filter_route_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->filter_route_ids(i), output);
  }

  // optional uint32 flow_mask = 55;
  if (has_flow_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->flow_mask(), output);
  }

  // optional float bike_share_cost = 56;
  if (has_bike_share_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->bike_share_cost(), output);
  }

  // optional float bike_share_penalty = 57;
  if (has_bike_share_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->bike_share_penalty(), output);
  }

  // optional float rail_ferry_cost = 58;
  if (has_rail_ferry_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->rail_ferry_cost(), output);
  }

  // optional float use_rail_ferry = 59;
  if (has_use_rail_ferry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->use_rail_ferry(), output);
  }

  // optional bool ignore_restrictions = 60;
  if (has_ignore_restrictions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->ignore_restrictions(), output);
  }

  // optional bool ignore_oneways = 61;
  if (has_ignore_oneways()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->ignore_oneways(), output);
  }

  // optional bool ignore_access = 62;
  if (has_ignore_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->ignore_access(), output);
  }

  // optional bool ignore_closures = 63;
  if (has_ignore_closures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->ignore_closures(), output);
  }

  // optional bool shortest = 64;
  if (has_shortest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->shortest(), output);
  }

  // optional float service_penalty = 65;
  if (has_service_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->service_penalty(), output);
  }

  // optional float use_tracks = 66;
  if (has_use_tracks()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->use_tracks(), output);
  }

  // optional float use_distance = 67;
  if (has_use_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->use_distance(), output);
  }

  // optional float use_living_streets = 68;
  if (has_use_living_streets()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->use_living_streets(), output);
  }

  // optional float service_factor = 69;
  if (has_service_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->service_factor(), output);
  }

  // optional float closure_factor = 70;
  if (has_closure_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->closure_factor(), output);
  }

  // optional float private_access_penalty = 71;
  if (has_private_access_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->private_access_penalty(), output);
  }

  // optional bool exclude_unpaved = 72;
  if (has_exclude_unpaved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->exclude_unpaved(), output);
  }

  // optional bool include_hot = 73;
  if (has_include_hot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->include_hot(), output);
  }

  // optional bool include_hov2 = 74;
  if (has_include_hov2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->include_hov2(), output);
  }

  // optional bool include_hov3 = 75;
  if (has_include_hov3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->include_hov3(), output);
  }

  // optional bool exclude_cash_only_tolls = 76;
  if (has_exclude_cash_only_tolls()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->exclude_cash_only_tolls(), output);
  }

  // optional uint32 restriction_probability = 77;
  if (has_restriction_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->restriction_probability(), output);
  }

  // optional .valhalla.Costing costing = 90;
  if (has_costing()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      90, this->costing(), output);
  }

  // optional string name = 91;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.CostingOptions.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      91, this->name(), output);
  }

  // repeated .valhalla.AvoidEdge exclude_edges = 92;
  for (unsigned int i = 0, n = this->exclude_edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      92, this->exclude_edges(i), output);
  }

  // optional bool filter_closures = 93;
  if (has_filter_closures()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->filter_closures(), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.CostingOptions)
}

int CostingOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.CostingOptions)
  int total_size = 0;

  // optional .valhalla.FilterAction filter_stop_action = 49;
  if (this->filter_stop_action() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_stop_action());
  }

  // optional .valhalla.FilterAction filter_operator_action = 51;
  if (this->filter_operator_action() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_operator_action());
  }

  // optional .valhalla.FilterAction filter_route_action = 53;
  if (this->filter_route_action() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_route_action());
  }

  // repeated string filter_stop_ids = 50;
  total_size += 2 * this->filter_stop_ids_size();
  for (int i = 0; i < this->filter_stop_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_stop_ids(i));
  }

  // repeated string filter_operator_ids = 52;
  total_size += 2 * this->filter_operator_ids_size();
  for (int i = 0; i < this->filter_operator_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_operator_ids(i));
  }

  // repeated string filter_route_ids = 54;
  total_size += 2 * this->filter_route_ids_size();
  for (int i = 0; i < this->filter_route_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_route_ids(i));
  }

  // repeated .valhalla.AvoidEdge exclude_edges = 92;
  total_size += 2 * this->exclude_edges_size();
  for (int i = 0; i < this->exclude_edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude_edges(i));
  }

  switch (has_maneuver_penalty_case()) {
    // optional float maneuver_penalty = 1;
    case kManeuverPenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_MANEUVER_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_destination_only_penalty_case()) {
    // optional float destination_only_penalty = 2;
    case kDestinationOnlyPenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_DESTINATION_ONLY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_gate_cost_case()) {
    // optional float gate_cost = 3;
    case kGateCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_GATE_COST_NOT_SET: {
      break;
    }
  }
  switch (has_gate_penalty_case()) {
    // optional float gate_penalty = 4;
    case kGatePenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_GATE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_toll_booth_cost_case()) {
    // optional float toll_booth_cost = 5;
    case kTollBoothCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_TOLL_BOOTH_COST_NOT_SET: {
      break;
    }
  }
  switch (has_toll_booth_penalty_case()) {
    // optional float toll_booth_penalty = 6;
    case kTollBoothPenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_TOLL_BOOTH_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_alley_penalty_case()) {
    // optional float alley_penalty = 7;
    case kAlleyPenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_ALLEY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_country_crossing_cost_case()) {
    // optional float country_crossing_cost = 8;
    case kCountryCrossingCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_COUNTRY_CROSSING_COST_NOT_SET: {
      break;
    }
  }
  switch (has_country_crossing_penalty_case()) {
    // optional float country_crossing_penalty = 9;
    case kCountryCrossingPenalty: {
      total_size += 1 + 4;
      break;
    }
    case HAS_COUNTRY_CROSSING_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_ferry_cost_case()) {
    // optional float ferry_cost = 10;
    case kFerryCost: {
      total_size += 1 + 4;
      break;
    }
    case HAS_FERRY_COST_NOT_SET: {
      break;
    }
  }
  switch (has_avoid_bad_surfaces_case()) {
    // optional float avoid_bad_surfaces = 11;
    case kAvoidBadSurfaces: {
      total_size += 1 + 4;
      break;
    }
    case HAS_AVOID_BAD_SURFACES_NOT_SET: {
      break;
    }
  }
  switch (has_use_ferry_case()) {
    // optional float use_ferry = 12;
    case kUseFerry: {
      total_size += 1 + 4;
      break;
    }
    case HAS_USE_FERRY_NOT_SET: {
      break;
    }
  }
  switch (has_use_highways_case()) {
    // optional float use_highways = 13;
    case kUseHighways: {
      total_size += 1 + 4;
      break;
    }
    case HAS_USE_HIGHWAYS_NOT_SET: {
      break;
    }
  }
  switch (has_use_tolls_case()) {
    // optional float use_tolls = 14;
    case kUseTolls: {
      total_size += 1 + 4;
      break;
    }
    case HAS_USE_TOLLS_NOT_SET: {
      break;
    }
  }
  switch (has_use_roads_case()) {
    // optional float use_roads = 15;
    case kUseRoads: {
      total_size += 1 + 4;
      break;
    }
    case HAS_USE_ROADS_NOT_SET: {
      break;
    }
  }
  switch (has_max_distance_case()) {
    // optional uint32 max_distance = 16;
    case kMaxDistance: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
      break;
    }
    case HAS_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_walking_speed_case()) {
    // optional float walking_speed = 17;
    case kWalkingSpeed: {
      total_size += 2 + 4;
      break;
    }
    case HAS_WALKING_SPEED_NOT_SET: {
      break;
    }
  }
  switch (has_step_penalty_case()) {
    // optional float step_penalty = 18;
    case kStepPenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_STEP_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_max_grade_case()) {
    // optional uint32 max_grade = 19;
    case kMaxGrade: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
      break;
    }
    case HAS_MAX_GRADE_NOT_SET: {
      break;
    }
  }
  switch (has_max_hiking_difficulty_case()) {
    // optional uint32 max_hiking_difficulty = 20;
    case kMaxHikingDifficulty: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hiking_difficulty());
      break;
    }
    case HAS_MAX_HIKING_DIFFICULTY_NOT_SET: {
      break;
    }
  }
  switch (has_mode_factor_case()) {
    // optional float mode_factor = 21;
    case kModeFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_MODE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_walkway_factor_case()) {
    // optional float walkway_factor = 22;
    case kWalkwayFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_WALKWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_sidewalk_factor_case()) {
    // optional float sidewalk_factor = 23;
    case kSidewalkFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_SIDEWALK_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_alley_factor_case()) {
    // optional float alley_factor = 24;
    case kAlleyFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_ALLEY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_driveway_factor_case()) {
    // optional float driveway_factor = 25;
    case kDrivewayFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_DRIVEWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_driveway_penalty_case()) {
    // optional float driveway_penalty = 26;
    case kDrivewayPenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_DRIVEWAY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_transit_start_end_max_distance_case()) {
    // optional uint32 transit_start_end_max_distance = 27;
    case kTransitStartEndMaxDistance: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transit_start_end_max_distance());
      break;
    }
    case HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_transit_transfer_max_distance_case()) {
    // optional uint32 transit_transfer_max_distance = 28;
    case kTransitTransferMaxDistance: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transit_transfer_max_distance());
      break;
    }
    case HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_transport_type_case()) {
    // optional string transport_type = 29;
    case kTransportType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transport_type());
      break;
    }
    case HAS_TRANSPORT_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_top_speed_case()) {
    // optional float top_speed = 30;
    case kTopSpeed: {
      total_size += 2 + 4;
      break;
    }
    case HAS_TOP_SPEED_NOT_SET: {
      break;
    }
  }
  switch (has_use_hills_case()) {
    // optional float use_hills = 31;
    case kUseHills: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_HILLS_NOT_SET: {
      break;
    }
  }
  switch (has_use_primary_case()) {
    // optional float use_primary = 32;
    case kUsePrimary: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_PRIMARY_NOT_SET: {
      break;
    }
  }
  switch (has_use_trails_case()) {
    // optional float use_trails = 33;
    case kUseTrails: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_TRAILS_NOT_SET: {
      break;
    }
  }
  switch (has_low_class_penalty_case()) {
    // optional float low_class_penalty = 34;
    case kLowClassPenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_LOW_CLASS_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_hazmat_case()) {
    // optional bool hazmat = 35;
    case kHazmat: {
      total_size += 2 + 1;
      break;
    }
    case HAS_HAZMAT_NOT_SET: {
      break;
    }
  }
  switch (has_weight_case()) {
    // optional float weight = 36;
    case kWeight: {
      total_size += 2 + 4;
      break;
    }
    case HAS_WEIGHT_NOT_SET: {
      break;
    }
  }
  switch (has_axle_load_case()) {
    // optional float axle_load = 37;
    case kAxleLoad: {
      total_size += 2 + 4;
      break;
    }
    case HAS_AXLE_LOAD_NOT_SET: {
      break;
    }
  }
  switch (has_height_case()) {
    // optional float height = 38;
    case kHeight: {
      total_size += 2 + 4;
      break;
    }
    case HAS_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (has_width_case()) {
    // optional float width = 39;
    case kWidth: {
      total_size += 2 + 4;
      break;
    }
    case HAS_WIDTH_NOT_SET: {
      break;
    }
  }
  switch (has_length_case()) {
    // optional float length = 40;
    case kLength: {
      total_size += 2 + 4;
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (has_cycling_speed_case()) {
    // optional float cycling_speed = 41;
    case kCyclingSpeed: {
      total_size += 2 + 4;
      break;
    }
    case HAS_CYCLING_SPEED_NOT_SET: {
      break;
    }
  }
  switch (has_wheelchair_case()) {
    // optional bool wheelchair = 42;
    case kWheelchair: {
      total_size += 2 + 1;
      break;
    }
    case HAS_WHEELCHAIR_NOT_SET: {
      break;
    }
  }
  switch (has_bicycle_case()) {
    // optional bool bicycle = 43;
    case kBicycle: {
      total_size += 2 + 1;
      break;
    }
    case HAS_BICYCLE_NOT_SET: {
      break;
    }
  }
  switch (has_use_bus_case()) {
    // optional float use_bus = 44;
    case kUseBus: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_BUS_NOT_SET: {
      break;
    }
  }
  switch (has_use_rail_case()) {
    // optional float use_rail = 45;
    case kUseRail: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_RAIL_NOT_SET: {
      break;
    }
  }
  switch (has_use_transfers_case()) {
    // optional float use_transfers = 46;
    case kUseTransfers: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_TRANSFERS_NOT_SET: {
      break;
    }
  }
  switch (has_transfer_cost_case()) {
    // optional float transfer_cost = 47;
    case kTransferCost: {
      total_size += 2 + 4;
      break;
    }
    case HAS_TRANSFER_COST_NOT_SET: {
      break;
    }
  }
  switch (has_transfer_penalty_case()) {
    // optional float transfer_penalty = 48;
    case kTransferPenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_TRANSFER_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_flow_mask_case()) {
    // optional uint32 flow_mask = 55;
    case kFlowMask: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flow_mask());
      break;
    }
    case HAS_FLOW_MASK_NOT_SET: {
      break;
    }
  }
  switch (has_bike_share_cost_case()) {
    // optional float bike_share_cost = 56;
    case kBikeShareCost: {
      total_size += 2 + 4;
      break;
    }
    case HAS_BIKE_SHARE_COST_NOT_SET: {
      break;
    }
  }
  switch (has_bike_share_penalty_case()) {
    // optional float bike_share_penalty = 57;
    case kBikeSharePenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_BIKE_SHARE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_rail_ferry_cost_case()) {
    // optional float rail_ferry_cost = 58;
    case kRailFerryCost: {
      total_size += 2 + 4;
      break;
    }
    case HAS_RAIL_FERRY_COST_NOT_SET: {
      break;
    }
  }
  switch (has_use_rail_ferry_case()) {
    // optional float use_rail_ferry = 59;
    case kUseRailFerry: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_RAIL_FERRY_NOT_SET: {
      break;
    }
  }
  switch (has_ignore_restrictions_case()) {
    // optional bool ignore_restrictions = 60;
    case kIgnoreRestrictions: {
      total_size += 2 + 1;
      break;
    }
    case HAS_IGNORE_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  switch (has_ignore_oneways_case()) {
    // optional bool ignore_oneways = 61;
    case kIgnoreOneways: {
      total_size += 2 + 1;
      break;
    }
    case HAS_IGNORE_ONEWAYS_NOT_SET: {
      break;
    }
  }
  switch (has_ignore_access_case()) {
    // optional bool ignore_access = 62;
    case kIgnoreAccess: {
      total_size += 2 + 1;
      break;
    }
    case HAS_IGNORE_ACCESS_NOT_SET: {
      break;
    }
  }
  switch (has_ignore_closures_case()) {
    // optional bool ignore_closures = 63;
    case kIgnoreClosures: {
      total_size += 2 + 1;
      break;
    }
    case HAS_IGNORE_CLOSURES_NOT_SET: {
      break;
    }
  }
  switch (has_shortest_case()) {
    // optional bool shortest = 64;
    case kShortest: {
      total_size += 2 + 1;
      break;
    }
    case HAS_SHORTEST_NOT_SET: {
      break;
    }
  }
  switch (has_service_penalty_case()) {
    // optional float service_penalty = 65;
    case kServicePenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_SERVICE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_use_tracks_case()) {
    // optional float use_tracks = 66;
    case kUseTracks: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_TRACKS_NOT_SET: {
      break;
    }
  }
  switch (has_use_distance_case()) {
    // optional float use_distance = 67;
    case kUseDistance: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_use_living_streets_case()) {
    // optional float use_living_streets = 68;
    case kUseLivingStreets: {
      total_size += 2 + 4;
      break;
    }
    case HAS_USE_LIVING_STREETS_NOT_SET: {
      break;
    }
  }
  switch (has_service_factor_case()) {
    // optional float service_factor = 69;
    case kServiceFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_SERVICE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_closure_factor_case()) {
    // optional float closure_factor = 70;
    case kClosureFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_CLOSURE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_private_access_penalty_case()) {
    // optional float private_access_penalty = 71;
    case kPrivateAccessPenalty: {
      total_size += 2 + 4;
      break;
    }
    case HAS_PRIVATE_ACCESS_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_unpaved_case()) {
    // optional bool exclude_unpaved = 72;
    case kExcludeUnpaved: {
      total_size += 2 + 1;
      break;
    }
    case HAS_EXCLUDE_UNPAVED_NOT_SET: {
      break;
    }
  }
  switch (has_include_hot_case()) {
    // optional bool include_hot = 73;
    case kIncludeHot: {
      total_size += 2 + 1;
      break;
    }
    case HAS_INCLUDE_HOT_NOT_SET: {
      break;
    }
  }
  switch (has_include_hov2_case()) {
    // optional bool include_hov2 = 74;
    case kIncludeHov2: {
      total_size += 2 + 1;
      break;
    }
    case HAS_INCLUDE_HOV2_NOT_SET: {
      break;
    }
  }
  switch (has_include_hov3_case()) {
    // optional bool include_hov3 = 75;
    case kIncludeHov3: {
      total_size += 2 + 1;
      break;
    }
    case HAS_INCLUDE_HOV3_NOT_SET: {
      break;
    }
  }
  switch (has_exclude_cash_only_tolls_case()) {
    // optional bool exclude_cash_only_tolls = 76;
    case kExcludeCashOnlyTolls: {
      total_size += 2 + 1;
      break;
    }
    case HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET: {
      break;
    }
  }
  switch (has_restriction_probability_case()) {
    // optional uint32 restriction_probability = 77;
    case kRestrictionProbability: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restriction_probability());
      break;
    }
    case HAS_RESTRICTION_PROBABILITY_NOT_SET: {
      break;
    }
  }
  switch (has_costing_case()) {
    // optional .valhalla.Costing costing = 90;
    case kCosting: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->costing());
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  switch (has_name_case()) {
    // optional string name = 91;
    case kName: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (has_filter_closures_case()) {
    // optional bool filter_closures = 93;
    case kFilterClosures: {
      total_size += 2 + 1;
      break;
    }
    case HAS_FILTER_CLOSURES_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostingOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CostingOptions*>(&from));
}

void CostingOptions::MergeFrom(const CostingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.CostingOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  filter_stop_ids_.MergeFrom(from.filter_stop_ids_);
  filter_operator_ids_.MergeFrom(from.filter_operator_ids_);
  filter_route_ids_.MergeFrom(from.filter_route_ids_);
  exclude_edges_.MergeFrom(from.exclude_edges_);
  switch (from.has_maneuver_penalty_case()) {
    case kManeuverPenalty: {
      set_maneuver_penalty(from.maneuver_penalty());
      break;
    }
    case HAS_MANEUVER_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_destination_only_penalty_case()) {
    case kDestinationOnlyPenalty: {
      set_destination_only_penalty(from.destination_only_penalty());
      break;
    }
    case HAS_DESTINATION_ONLY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_gate_cost_case()) {
    case kGateCost: {
      set_gate_cost(from.gate_cost());
      break;
    }
    case HAS_GATE_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_gate_penalty_case()) {
    case kGatePenalty: {
      set_gate_penalty(from.gate_penalty());
      break;
    }
    case HAS_GATE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_toll_booth_cost_case()) {
    case kTollBoothCost: {
      set_toll_booth_cost(from.toll_booth_cost());
      break;
    }
    case HAS_TOLL_BOOTH_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_toll_booth_penalty_case()) {
    case kTollBoothPenalty: {
      set_toll_booth_penalty(from.toll_booth_penalty());
      break;
    }
    case HAS_TOLL_BOOTH_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_alley_penalty_case()) {
    case kAlleyPenalty: {
      set_alley_penalty(from.alley_penalty());
      break;
    }
    case HAS_ALLEY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_country_crossing_cost_case()) {
    case kCountryCrossingCost: {
      set_country_crossing_cost(from.country_crossing_cost());
      break;
    }
    case HAS_COUNTRY_CROSSING_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_country_crossing_penalty_case()) {
    case kCountryCrossingPenalty: {
      set_country_crossing_penalty(from.country_crossing_penalty());
      break;
    }
    case HAS_COUNTRY_CROSSING_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_ferry_cost_case()) {
    case kFerryCost: {
      set_ferry_cost(from.ferry_cost());
      break;
    }
    case HAS_FERRY_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_avoid_bad_surfaces_case()) {
    case kAvoidBadSurfaces: {
      set_avoid_bad_surfaces(from.avoid_bad_surfaces());
      break;
    }
    case HAS_AVOID_BAD_SURFACES_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_ferry_case()) {
    case kUseFerry: {
      set_use_ferry(from.use_ferry());
      break;
    }
    case HAS_USE_FERRY_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_highways_case()) {
    case kUseHighways: {
      set_use_highways(from.use_highways());
      break;
    }
    case HAS_USE_HIGHWAYS_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_tolls_case()) {
    case kUseTolls: {
      set_use_tolls(from.use_tolls());
      break;
    }
    case HAS_USE_TOLLS_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_roads_case()) {
    case kUseRoads: {
      set_use_roads(from.use_roads());
      break;
    }
    case HAS_USE_ROADS_NOT_SET: {
      break;
    }
  }
  switch (from.has_max_distance_case()) {
    case kMaxDistance: {
      set_max_distance(from.max_distance());
      break;
    }
    case HAS_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_walking_speed_case()) {
    case kWalkingSpeed: {
      set_walking_speed(from.walking_speed());
      break;
    }
    case HAS_WALKING_SPEED_NOT_SET: {
      break;
    }
  }
  switch (from.has_step_penalty_case()) {
    case kStepPenalty: {
      set_step_penalty(from.step_penalty());
      break;
    }
    case HAS_STEP_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_max_grade_case()) {
    case kMaxGrade: {
      set_max_grade(from.max_grade());
      break;
    }
    case HAS_MAX_GRADE_NOT_SET: {
      break;
    }
  }
  switch (from.has_max_hiking_difficulty_case()) {
    case kMaxHikingDifficulty: {
      set_max_hiking_difficulty(from.max_hiking_difficulty());
      break;
    }
    case HAS_MAX_HIKING_DIFFICULTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_mode_factor_case()) {
    case kModeFactor: {
      set_mode_factor(from.mode_factor());
      break;
    }
    case HAS_MODE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_walkway_factor_case()) {
    case kWalkwayFactor: {
      set_walkway_factor(from.walkway_factor());
      break;
    }
    case HAS_WALKWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_sidewalk_factor_case()) {
    case kSidewalkFactor: {
      set_sidewalk_factor(from.sidewalk_factor());
      break;
    }
    case HAS_SIDEWALK_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_alley_factor_case()) {
    case kAlleyFactor: {
      set_alley_factor(from.alley_factor());
      break;
    }
    case HAS_ALLEY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_driveway_factor_case()) {
    case kDrivewayFactor: {
      set_driveway_factor(from.driveway_factor());
      break;
    }
    case HAS_DRIVEWAY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_driveway_penalty_case()) {
    case kDrivewayPenalty: {
      set_driveway_penalty(from.driveway_penalty());
      break;
    }
    case HAS_DRIVEWAY_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_transit_start_end_max_distance_case()) {
    case kTransitStartEndMaxDistance: {
      set_transit_start_end_max_distance(from.transit_start_end_max_distance());
      break;
    }
    case HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_transit_transfer_max_distance_case()) {
    case kTransitTransferMaxDistance: {
      set_transit_transfer_max_distance(from.transit_transfer_max_distance());
      break;
    }
    case HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_transport_type_case()) {
    case kTransportType: {
      set_transport_type(from.transport_type());
      break;
    }
    case HAS_TRANSPORT_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_top_speed_case()) {
    case kTopSpeed: {
      set_top_speed(from.top_speed());
      break;
    }
    case HAS_TOP_SPEED_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_hills_case()) {
    case kUseHills: {
      set_use_hills(from.use_hills());
      break;
    }
    case HAS_USE_HILLS_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_primary_case()) {
    case kUsePrimary: {
      set_use_primary(from.use_primary());
      break;
    }
    case HAS_USE_PRIMARY_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_trails_case()) {
    case kUseTrails: {
      set_use_trails(from.use_trails());
      break;
    }
    case HAS_USE_TRAILS_NOT_SET: {
      break;
    }
  }
  switch (from.has_low_class_penalty_case()) {
    case kLowClassPenalty: {
      set_low_class_penalty(from.low_class_penalty());
      break;
    }
    case HAS_LOW_CLASS_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_hazmat_case()) {
    case kHazmat: {
      set_hazmat(from.hazmat());
      break;
    }
    case HAS_HAZMAT_NOT_SET: {
      break;
    }
  }
  switch (from.has_weight_case()) {
    case kWeight: {
      set_weight(from.weight());
      break;
    }
    case HAS_WEIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.has_axle_load_case()) {
    case kAxleLoad: {
      set_axle_load(from.axle_load());
      break;
    }
    case HAS_AXLE_LOAD_NOT_SET: {
      break;
    }
  }
  switch (from.has_height_case()) {
    case kHeight: {
      set_height(from.height());
      break;
    }
    case HAS_HEIGHT_NOT_SET: {
      break;
    }
  }
  switch (from.has_width_case()) {
    case kWidth: {
      set_width(from.width());
      break;
    }
    case HAS_WIDTH_NOT_SET: {
      break;
    }
  }
  switch (from.has_length_case()) {
    case kLength: {
      set_length(from.length());
      break;
    }
    case HAS_LENGTH_NOT_SET: {
      break;
    }
  }
  switch (from.has_cycling_speed_case()) {
    case kCyclingSpeed: {
      set_cycling_speed(from.cycling_speed());
      break;
    }
    case HAS_CYCLING_SPEED_NOT_SET: {
      break;
    }
  }
  switch (from.has_wheelchair_case()) {
    case kWheelchair: {
      set_wheelchair(from.wheelchair());
      break;
    }
    case HAS_WHEELCHAIR_NOT_SET: {
      break;
    }
  }
  switch (from.has_bicycle_case()) {
    case kBicycle: {
      set_bicycle(from.bicycle());
      break;
    }
    case HAS_BICYCLE_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_bus_case()) {
    case kUseBus: {
      set_use_bus(from.use_bus());
      break;
    }
    case HAS_USE_BUS_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_rail_case()) {
    case kUseRail: {
      set_use_rail(from.use_rail());
      break;
    }
    case HAS_USE_RAIL_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_transfers_case()) {
    case kUseTransfers: {
      set_use_transfers(from.use_transfers());
      break;
    }
    case HAS_USE_TRANSFERS_NOT_SET: {
      break;
    }
  }
  switch (from.has_transfer_cost_case()) {
    case kTransferCost: {
      set_transfer_cost(from.transfer_cost());
      break;
    }
    case HAS_TRANSFER_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_transfer_penalty_case()) {
    case kTransferPenalty: {
      set_transfer_penalty(from.transfer_penalty());
      break;
    }
    case HAS_TRANSFER_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_flow_mask_case()) {
    case kFlowMask: {
      set_flow_mask(from.flow_mask());
      break;
    }
    case HAS_FLOW_MASK_NOT_SET: {
      break;
    }
  }
  switch (from.has_bike_share_cost_case()) {
    case kBikeShareCost: {
      set_bike_share_cost(from.bike_share_cost());
      break;
    }
    case HAS_BIKE_SHARE_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_bike_share_penalty_case()) {
    case kBikeSharePenalty: {
      set_bike_share_penalty(from.bike_share_penalty());
      break;
    }
    case HAS_BIKE_SHARE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_rail_ferry_cost_case()) {
    case kRailFerryCost: {
      set_rail_ferry_cost(from.rail_ferry_cost());
      break;
    }
    case HAS_RAIL_FERRY_COST_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_rail_ferry_case()) {
    case kUseRailFerry: {
      set_use_rail_ferry(from.use_rail_ferry());
      break;
    }
    case HAS_USE_RAIL_FERRY_NOT_SET: {
      break;
    }
  }
  switch (from.has_ignore_restrictions_case()) {
    case kIgnoreRestrictions: {
      set_ignore_restrictions(from.ignore_restrictions());
      break;
    }
    case HAS_IGNORE_RESTRICTIONS_NOT_SET: {
      break;
    }
  }
  switch (from.has_ignore_oneways_case()) {
    case kIgnoreOneways: {
      set_ignore_oneways(from.ignore_oneways());
      break;
    }
    case HAS_IGNORE_ONEWAYS_NOT_SET: {
      break;
    }
  }
  switch (from.has_ignore_access_case()) {
    case kIgnoreAccess: {
      set_ignore_access(from.ignore_access());
      break;
    }
    case HAS_IGNORE_ACCESS_NOT_SET: {
      break;
    }
  }
  switch (from.has_ignore_closures_case()) {
    case kIgnoreClosures: {
      set_ignore_closures(from.ignore_closures());
      break;
    }
    case HAS_IGNORE_CLOSURES_NOT_SET: {
      break;
    }
  }
  switch (from.has_shortest_case()) {
    case kShortest: {
      set_shortest(from.shortest());
      break;
    }
    case HAS_SHORTEST_NOT_SET: {
      break;
    }
  }
  switch (from.has_service_penalty_case()) {
    case kServicePenalty: {
      set_service_penalty(from.service_penalty());
      break;
    }
    case HAS_SERVICE_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_tracks_case()) {
    case kUseTracks: {
      set_use_tracks(from.use_tracks());
      break;
    }
    case HAS_USE_TRACKS_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_distance_case()) {
    case kUseDistance: {
      set_use_distance(from.use_distance());
      break;
    }
    case HAS_USE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_living_streets_case()) {
    case kUseLivingStreets: {
      set_use_living_streets(from.use_living_streets());
      break;
    }
    case HAS_USE_LIVING_STREETS_NOT_SET: {
      break;
    }
  }
  switch (from.has_service_factor_case()) {
    case kServiceFactor: {
      set_service_factor(from.service_factor());
      break;
    }
    case HAS_SERVICE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_closure_factor_case()) {
    case kClosureFactor: {
      set_closure_factor(from.closure_factor());
      break;
    }
    case HAS_CLOSURE_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_private_access_penalty_case()) {
    case kPrivateAccessPenalty: {
      set_private_access_penalty(from.private_access_penalty());
      break;
    }
    case HAS_PRIVATE_ACCESS_PENALTY_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_unpaved_case()) {
    case kExcludeUnpaved: {
      set_exclude_unpaved(from.exclude_unpaved());
      break;
    }
    case HAS_EXCLUDE_UNPAVED_NOT_SET: {
      break;
    }
  }
  switch (from.has_include_hot_case()) {
    case kIncludeHot: {
      set_include_hot(from.include_hot());
      break;
    }
    case HAS_INCLUDE_HOT_NOT_SET: {
      break;
    }
  }
  switch (from.has_include_hov2_case()) {
    case kIncludeHov2: {
      set_include_hov2(from.include_hov2());
      break;
    }
    case HAS_INCLUDE_HOV2_NOT_SET: {
      break;
    }
  }
  switch (from.has_include_hov3_case()) {
    case kIncludeHov3: {
      set_include_hov3(from.include_hov3());
      break;
    }
    case HAS_INCLUDE_HOV3_NOT_SET: {
      break;
    }
  }
  switch (from.has_exclude_cash_only_tolls_case()) {
    case kExcludeCashOnlyTolls: {
      set_exclude_cash_only_tolls(from.exclude_cash_only_tolls());
      break;
    }
    case HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET: {
      break;
    }
  }
  switch (from.has_restriction_probability_case()) {
    case kRestrictionProbability: {
      set_restriction_probability(from.restriction_probability());
      break;
    }
    case HAS_RESTRICTION_PROBABILITY_NOT_SET: {
      break;
    }
  }
  switch (from.has_costing_case()) {
    case kCosting: {
      set_costing(from.costing());
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  switch (from.has_name_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case HAS_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.has_filter_closures_case()) {
    case kFilterClosures: {
      set_filter_closures(from.filter_closures());
      break;
    }
    case HAS_FILTER_CLOSURES_NOT_SET: {
      break;
    }
  }
  if (from.filter_stop_action() != 0) {
    set_filter_stop_action(from.filter_stop_action());
  }
  if (from.filter_operator_action() != 0) {
    set_filter_operator_action(from.filter_operator_action());
  }
  if (from.filter_route_action() != 0) {
    set_filter_route_action(from.filter_route_action());
  }
}

void CostingOptions::CopyFrom(const CostingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.CostingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostingOptions::IsInitialized() const {

  return true;
}

void CostingOptions::Swap(CostingOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CostingOptions::InternalSwap(CostingOptions* other) {
  std::swap(filter_stop_action_, other->filter_stop_action_);
  filter_stop_ids_.UnsafeArenaSwap(&other->filter_stop_ids_);
  std::swap(filter_operator_action_, other->filter_operator_action_);
  filter_operator_ids_.UnsafeArenaSwap(&other->filter_operator_ids_);
  std::swap(filter_route_action_, other->filter_route_action_);
  filter_route_ids_.UnsafeArenaSwap(&other->filter_route_ids_);
  exclude_edges_.UnsafeArenaSwap(&other->exclude_edges_);
  std::swap(has_maneuver_penalty_, other->has_maneuver_penalty_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_destination_only_penalty_, other->has_destination_only_penalty_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_gate_cost_, other->has_gate_cost_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_gate_penalty_, other->has_gate_penalty_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_toll_booth_cost_, other->has_toll_booth_cost_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_toll_booth_penalty_, other->has_toll_booth_penalty_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_alley_penalty_, other->has_alley_penalty_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_country_crossing_cost_, other->has_country_crossing_cost_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_country_crossing_penalty_, other->has_country_crossing_penalty_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_ferry_cost_, other->has_ferry_cost_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  std::swap(has_avoid_bad_surfaces_, other->has_avoid_bad_surfaces_);
  std::swap(_oneof_case_[10], other->_oneof_case_[10]);
  std::swap(has_use_ferry_, other->has_use_ferry_);
  std::swap(_oneof_case_[11], other->_oneof_case_[11]);
  std::swap(has_use_highways_, other->has_use_highways_);
  std::swap(_oneof_case_[12], other->_oneof_case_[12]);
  std::swap(has_use_tolls_, other->has_use_tolls_);
  std::swap(_oneof_case_[13], other->_oneof_case_[13]);
  std::swap(has_use_roads_, other->has_use_roads_);
  std::swap(_oneof_case_[14], other->_oneof_case_[14]);
  std::swap(has_max_distance_, other->has_max_distance_);
  std::swap(_oneof_case_[15], other->_oneof_case_[15]);
  std::swap(has_walking_speed_, other->has_walking_speed_);
  std::swap(_oneof_case_[16], other->_oneof_case_[16]);
  std::swap(has_step_penalty_, other->has_step_penalty_);
  std::swap(_oneof_case_[17], other->_oneof_case_[17]);
  std::swap(has_max_grade_, other->has_max_grade_);
  std::swap(_oneof_case_[18], other->_oneof_case_[18]);
  std::swap(has_max_hiking_difficulty_, other->has_max_hiking_difficulty_);
  std::swap(_oneof_case_[19], other->_oneof_case_[19]);
  std::swap(has_mode_factor_, other->has_mode_factor_);
  std::swap(_oneof_case_[20], other->_oneof_case_[20]);
  std::swap(has_walkway_factor_, other->has_walkway_factor_);
  std::swap(_oneof_case_[21], other->_oneof_case_[21]);
  std::swap(has_sidewalk_factor_, other->has_sidewalk_factor_);
  std::swap(_oneof_case_[22], other->_oneof_case_[22]);
  std::swap(has_alley_factor_, other->has_alley_factor_);
  std::swap(_oneof_case_[23], other->_oneof_case_[23]);
  std::swap(has_driveway_factor_, other->has_driveway_factor_);
  std::swap(_oneof_case_[24], other->_oneof_case_[24]);
  std::swap(has_driveway_penalty_, other->has_driveway_penalty_);
  std::swap(_oneof_case_[25], other->_oneof_case_[25]);
  std::swap(has_transit_start_end_max_distance_, other->has_transit_start_end_max_distance_);
  std::swap(_oneof_case_[26], other->_oneof_case_[26]);
  std::swap(has_transit_transfer_max_distance_, other->has_transit_transfer_max_distance_);
  std::swap(_oneof_case_[27], other->_oneof_case_[27]);
  std::swap(has_transport_type_, other->has_transport_type_);
  std::swap(_oneof_case_[28], other->_oneof_case_[28]);
  std::swap(has_top_speed_, other->has_top_speed_);
  std::swap(_oneof_case_[29], other->_oneof_case_[29]);
  std::swap(has_use_hills_, other->has_use_hills_);
  std::swap(_oneof_case_[30], other->_oneof_case_[30]);
  std::swap(has_use_primary_, other->has_use_primary_);
  std::swap(_oneof_case_[31], other->_oneof_case_[31]);
  std::swap(has_use_trails_, other->has_use_trails_);
  std::swap(_oneof_case_[32], other->_oneof_case_[32]);
  std::swap(has_low_class_penalty_, other->has_low_class_penalty_);
  std::swap(_oneof_case_[33], other->_oneof_case_[33]);
  std::swap(has_hazmat_, other->has_hazmat_);
  std::swap(_oneof_case_[34], other->_oneof_case_[34]);
  std::swap(has_weight_, other->has_weight_);
  std::swap(_oneof_case_[35], other->_oneof_case_[35]);
  std::swap(has_axle_load_, other->has_axle_load_);
  std::swap(_oneof_case_[36], other->_oneof_case_[36]);
  std::swap(has_height_, other->has_height_);
  std::swap(_oneof_case_[37], other->_oneof_case_[37]);
  std::swap(has_width_, other->has_width_);
  std::swap(_oneof_case_[38], other->_oneof_case_[38]);
  std::swap(has_length_, other->has_length_);
  std::swap(_oneof_case_[39], other->_oneof_case_[39]);
  std::swap(has_cycling_speed_, other->has_cycling_speed_);
  std::swap(_oneof_case_[40], other->_oneof_case_[40]);
  std::swap(has_wheelchair_, other->has_wheelchair_);
  std::swap(_oneof_case_[41], other->_oneof_case_[41]);
  std::swap(has_bicycle_, other->has_bicycle_);
  std::swap(_oneof_case_[42], other->_oneof_case_[42]);
  std::swap(has_use_bus_, other->has_use_bus_);
  std::swap(_oneof_case_[43], other->_oneof_case_[43]);
  std::swap(has_use_rail_, other->has_use_rail_);
  std::swap(_oneof_case_[44], other->_oneof_case_[44]);
  std::swap(has_use_transfers_, other->has_use_transfers_);
  std::swap(_oneof_case_[45], other->_oneof_case_[45]);
  std::swap(has_transfer_cost_, other->has_transfer_cost_);
  std::swap(_oneof_case_[46], other->_oneof_case_[46]);
  std::swap(has_transfer_penalty_, other->has_transfer_penalty_);
  std::swap(_oneof_case_[47], other->_oneof_case_[47]);
  std::swap(has_flow_mask_, other->has_flow_mask_);
  std::swap(_oneof_case_[48], other->_oneof_case_[48]);
  std::swap(has_bike_share_cost_, other->has_bike_share_cost_);
  std::swap(_oneof_case_[49], other->_oneof_case_[49]);
  std::swap(has_bike_share_penalty_, other->has_bike_share_penalty_);
  std::swap(_oneof_case_[50], other->_oneof_case_[50]);
  std::swap(has_rail_ferry_cost_, other->has_rail_ferry_cost_);
  std::swap(_oneof_case_[51], other->_oneof_case_[51]);
  std::swap(has_use_rail_ferry_, other->has_use_rail_ferry_);
  std::swap(_oneof_case_[52], other->_oneof_case_[52]);
  std::swap(has_ignore_restrictions_, other->has_ignore_restrictions_);
  std::swap(_oneof_case_[53], other->_oneof_case_[53]);
  std::swap(has_ignore_oneways_, other->has_ignore_oneways_);
  std::swap(_oneof_case_[54], other->_oneof_case_[54]);
  std::swap(has_ignore_access_, other->has_ignore_access_);
  std::swap(_oneof_case_[55], other->_oneof_case_[55]);
  std::swap(has_ignore_closures_, other->has_ignore_closures_);
  std::swap(_oneof_case_[56], other->_oneof_case_[56]);
  std::swap(has_shortest_, other->has_shortest_);
  std::swap(_oneof_case_[57], other->_oneof_case_[57]);
  std::swap(has_service_penalty_, other->has_service_penalty_);
  std::swap(_oneof_case_[58], other->_oneof_case_[58]);
  std::swap(has_use_tracks_, other->has_use_tracks_);
  std::swap(_oneof_case_[59], other->_oneof_case_[59]);
  std::swap(has_use_distance_, other->has_use_distance_);
  std::swap(_oneof_case_[60], other->_oneof_case_[60]);
  std::swap(has_use_living_streets_, other->has_use_living_streets_);
  std::swap(_oneof_case_[61], other->_oneof_case_[61]);
  std::swap(has_service_factor_, other->has_service_factor_);
  std::swap(_oneof_case_[62], other->_oneof_case_[62]);
  std::swap(has_closure_factor_, other->has_closure_factor_);
  std::swap(_oneof_case_[63], other->_oneof_case_[63]);
  std::swap(has_private_access_penalty_, other->has_private_access_penalty_);
  std::swap(_oneof_case_[64], other->_oneof_case_[64]);
  std::swap(has_exclude_unpaved_, other->has_exclude_unpaved_);
  std::swap(_oneof_case_[65], other->_oneof_case_[65]);
  std::swap(has_include_hot_, other->has_include_hot_);
  std::swap(_oneof_case_[66], other->_oneof_case_[66]);
  std::swap(has_include_hov2_, other->has_include_hov2_);
  std::swap(_oneof_case_[67], other->_oneof_case_[67]);
  std::swap(has_include_hov3_, other->has_include_hov3_);
  std::swap(_oneof_case_[68], other->_oneof_case_[68]);
  std::swap(has_exclude_cash_only_tolls_, other->has_exclude_cash_only_tolls_);
  std::swap(_oneof_case_[69], other->_oneof_case_[69]);
  std::swap(has_restriction_probability_, other->has_restriction_probability_);
  std::swap(_oneof_case_[70], other->_oneof_case_[70]);
  std::swap(has_costing_, other->has_costing_);
  std::swap(_oneof_case_[71], other->_oneof_case_[71]);
  std::swap(has_name_, other->has_name_);
  std::swap(_oneof_case_[72], other->_oneof_case_[72]);
  std::swap(has_filter_closures_, other->has_filter_closures_);
  std::swap(_oneof_case_[73], other->_oneof_case_[73]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CostingOptions::GetTypeName() const {
  return "valhalla.CostingOptions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CostingOptions

// optional float maneuver_penalty = 1;
bool CostingOptions::has_maneuver_penalty() const {
  return has_maneuver_penalty_case() == kManeuverPenalty;
}
void CostingOptions::set_has_maneuver_penalty() {
  _oneof_case_[0] = kManeuverPenalty;
}
void CostingOptions::clear_maneuver_penalty() {
  if (has_maneuver_penalty()) {
    has_maneuver_penalty_.maneuver_penalty_ = 0;
    clear_has_has_maneuver_penalty();
  }
}
 float CostingOptions::maneuver_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.maneuver_penalty)
  if (has_maneuver_penalty()) {
    return has_maneuver_penalty_.maneuver_penalty_;
  }
  return 0;
}
 void CostingOptions::set_maneuver_penalty(float value) {
  if (!has_maneuver_penalty()) {
    clear_has_maneuver_penalty();
    set_has_maneuver_penalty();
  }
  has_maneuver_penalty_.maneuver_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.maneuver_penalty)
}

// optional float destination_only_penalty = 2;
bool CostingOptions::has_destination_only_penalty() const {
  return has_destination_only_penalty_case() == kDestinationOnlyPenalty;
}
void CostingOptions::set_has_destination_only_penalty() {
  _oneof_case_[1] = kDestinationOnlyPenalty;
}
void CostingOptions::clear_destination_only_penalty() {
  if (has_destination_only_penalty()) {
    has_destination_only_penalty_.destination_only_penalty_ = 0;
    clear_has_has_destination_only_penalty();
  }
}
 float CostingOptions::destination_only_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.destination_only_penalty)
  if (has_destination_only_penalty()) {
    return has_destination_only_penalty_.destination_only_penalty_;
  }
  return 0;
}
 void CostingOptions::set_destination_only_penalty(float value) {
  if (!has_destination_only_penalty()) {
    clear_has_destination_only_penalty();
    set_has_destination_only_penalty();
  }
  has_destination_only_penalty_.destination_only_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.destination_only_penalty)
}

// optional float gate_cost = 3;
bool CostingOptions::has_gate_cost() const {
  return has_gate_cost_case() == kGateCost;
}
void CostingOptions::set_has_gate_cost() {
  _oneof_case_[2] = kGateCost;
}
void CostingOptions::clear_gate_cost() {
  if (has_gate_cost()) {
    has_gate_cost_.gate_cost_ = 0;
    clear_has_has_gate_cost();
  }
}
 float CostingOptions::gate_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.gate_cost)
  if (has_gate_cost()) {
    return has_gate_cost_.gate_cost_;
  }
  return 0;
}
 void CostingOptions::set_gate_cost(float value) {
  if (!has_gate_cost()) {
    clear_has_gate_cost();
    set_has_gate_cost();
  }
  has_gate_cost_.gate_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.gate_cost)
}

// optional float gate_penalty = 4;
bool CostingOptions::has_gate_penalty() const {
  return has_gate_penalty_case() == kGatePenalty;
}
void CostingOptions::set_has_gate_penalty() {
  _oneof_case_[3] = kGatePenalty;
}
void CostingOptions::clear_gate_penalty() {
  if (has_gate_penalty()) {
    has_gate_penalty_.gate_penalty_ = 0;
    clear_has_has_gate_penalty();
  }
}
 float CostingOptions::gate_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.gate_penalty)
  if (has_gate_penalty()) {
    return has_gate_penalty_.gate_penalty_;
  }
  return 0;
}
 void CostingOptions::set_gate_penalty(float value) {
  if (!has_gate_penalty()) {
    clear_has_gate_penalty();
    set_has_gate_penalty();
  }
  has_gate_penalty_.gate_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.gate_penalty)
}

// optional float toll_booth_cost = 5;
bool CostingOptions::has_toll_booth_cost() const {
  return has_toll_booth_cost_case() == kTollBoothCost;
}
void CostingOptions::set_has_toll_booth_cost() {
  _oneof_case_[4] = kTollBoothCost;
}
void CostingOptions::clear_toll_booth_cost() {
  if (has_toll_booth_cost()) {
    has_toll_booth_cost_.toll_booth_cost_ = 0;
    clear_has_has_toll_booth_cost();
  }
}
 float CostingOptions::toll_booth_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.toll_booth_cost)
  if (has_toll_booth_cost()) {
    return has_toll_booth_cost_.toll_booth_cost_;
  }
  return 0;
}
 void CostingOptions::set_toll_booth_cost(float value) {
  if (!has_toll_booth_cost()) {
    clear_has_toll_booth_cost();
    set_has_toll_booth_cost();
  }
  has_toll_booth_cost_.toll_booth_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.toll_booth_cost)
}

// optional float toll_booth_penalty = 6;
bool CostingOptions::has_toll_booth_penalty() const {
  return has_toll_booth_penalty_case() == kTollBoothPenalty;
}
void CostingOptions::set_has_toll_booth_penalty() {
  _oneof_case_[5] = kTollBoothPenalty;
}
void CostingOptions::clear_toll_booth_penalty() {
  if (has_toll_booth_penalty()) {
    has_toll_booth_penalty_.toll_booth_penalty_ = 0;
    clear_has_has_toll_booth_penalty();
  }
}
 float CostingOptions::toll_booth_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.toll_booth_penalty)
  if (has_toll_booth_penalty()) {
    return has_toll_booth_penalty_.toll_booth_penalty_;
  }
  return 0;
}
 void CostingOptions::set_toll_booth_penalty(float value) {
  if (!has_toll_booth_penalty()) {
    clear_has_toll_booth_penalty();
    set_has_toll_booth_penalty();
  }
  has_toll_booth_penalty_.toll_booth_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.toll_booth_penalty)
}

// optional float alley_penalty = 7;
bool CostingOptions::has_alley_penalty() const {
  return has_alley_penalty_case() == kAlleyPenalty;
}
void CostingOptions::set_has_alley_penalty() {
  _oneof_case_[6] = kAlleyPenalty;
}
void CostingOptions::clear_alley_penalty() {
  if (has_alley_penalty()) {
    has_alley_penalty_.alley_penalty_ = 0;
    clear_has_has_alley_penalty();
  }
}
 float CostingOptions::alley_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.alley_penalty)
  if (has_alley_penalty()) {
    return has_alley_penalty_.alley_penalty_;
  }
  return 0;
}
 void CostingOptions::set_alley_penalty(float value) {
  if (!has_alley_penalty()) {
    clear_has_alley_penalty();
    set_has_alley_penalty();
  }
  has_alley_penalty_.alley_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.alley_penalty)
}

// optional float country_crossing_cost = 8;
bool CostingOptions::has_country_crossing_cost() const {
  return has_country_crossing_cost_case() == kCountryCrossingCost;
}
void CostingOptions::set_has_country_crossing_cost() {
  _oneof_case_[7] = kCountryCrossingCost;
}
void CostingOptions::clear_country_crossing_cost() {
  if (has_country_crossing_cost()) {
    has_country_crossing_cost_.country_crossing_cost_ = 0;
    clear_has_has_country_crossing_cost();
  }
}
 float CostingOptions::country_crossing_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.country_crossing_cost)
  if (has_country_crossing_cost()) {
    return has_country_crossing_cost_.country_crossing_cost_;
  }
  return 0;
}
 void CostingOptions::set_country_crossing_cost(float value) {
  if (!has_country_crossing_cost()) {
    clear_has_country_crossing_cost();
    set_has_country_crossing_cost();
  }
  has_country_crossing_cost_.country_crossing_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.country_crossing_cost)
}

// optional float country_crossing_penalty = 9;
bool CostingOptions::has_country_crossing_penalty() const {
  return has_country_crossing_penalty_case() == kCountryCrossingPenalty;
}
void CostingOptions::set_has_country_crossing_penalty() {
  _oneof_case_[8] = kCountryCrossingPenalty;
}
void CostingOptions::clear_country_crossing_penalty() {
  if (has_country_crossing_penalty()) {
    has_country_crossing_penalty_.country_crossing_penalty_ = 0;
    clear_has_has_country_crossing_penalty();
  }
}
 float CostingOptions::country_crossing_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.country_crossing_penalty)
  if (has_country_crossing_penalty()) {
    return has_country_crossing_penalty_.country_crossing_penalty_;
  }
  return 0;
}
 void CostingOptions::set_country_crossing_penalty(float value) {
  if (!has_country_crossing_penalty()) {
    clear_has_country_crossing_penalty();
    set_has_country_crossing_penalty();
  }
  has_country_crossing_penalty_.country_crossing_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.country_crossing_penalty)
}

// optional float ferry_cost = 10;
bool CostingOptions::has_ferry_cost() const {
  return has_ferry_cost_case() == kFerryCost;
}
void CostingOptions::set_has_ferry_cost() {
  _oneof_case_[9] = kFerryCost;
}
void CostingOptions::clear_ferry_cost() {
  if (has_ferry_cost()) {
    has_ferry_cost_.ferry_cost_ = 0;
    clear_has_has_ferry_cost();
  }
}
 float CostingOptions::ferry_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.ferry_cost)
  if (has_ferry_cost()) {
    return has_ferry_cost_.ferry_cost_;
  }
  return 0;
}
 void CostingOptions::set_ferry_cost(float value) {
  if (!has_ferry_cost()) {
    clear_has_ferry_cost();
    set_has_ferry_cost();
  }
  has_ferry_cost_.ferry_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.ferry_cost)
}

// optional float avoid_bad_surfaces = 11;
bool CostingOptions::has_avoid_bad_surfaces() const {
  return has_avoid_bad_surfaces_case() == kAvoidBadSurfaces;
}
void CostingOptions::set_has_avoid_bad_surfaces() {
  _oneof_case_[10] = kAvoidBadSurfaces;
}
void CostingOptions::clear_avoid_bad_surfaces() {
  if (has_avoid_bad_surfaces()) {
    has_avoid_bad_surfaces_.avoid_bad_surfaces_ = 0;
    clear_has_has_avoid_bad_surfaces();
  }
}
 float CostingOptions::avoid_bad_surfaces() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.avoid_bad_surfaces)
  if (has_avoid_bad_surfaces()) {
    return has_avoid_bad_surfaces_.avoid_bad_surfaces_;
  }
  return 0;
}
 void CostingOptions::set_avoid_bad_surfaces(float value) {
  if (!has_avoid_bad_surfaces()) {
    clear_has_avoid_bad_surfaces();
    set_has_avoid_bad_surfaces();
  }
  has_avoid_bad_surfaces_.avoid_bad_surfaces_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.avoid_bad_surfaces)
}

// optional float use_ferry = 12;
bool CostingOptions::has_use_ferry() const {
  return has_use_ferry_case() == kUseFerry;
}
void CostingOptions::set_has_use_ferry() {
  _oneof_case_[11] = kUseFerry;
}
void CostingOptions::clear_use_ferry() {
  if (has_use_ferry()) {
    has_use_ferry_.use_ferry_ = 0;
    clear_has_has_use_ferry();
  }
}
 float CostingOptions::use_ferry() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_ferry)
  if (has_use_ferry()) {
    return has_use_ferry_.use_ferry_;
  }
  return 0;
}
 void CostingOptions::set_use_ferry(float value) {
  if (!has_use_ferry()) {
    clear_has_use_ferry();
    set_has_use_ferry();
  }
  has_use_ferry_.use_ferry_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_ferry)
}

// optional float use_highways = 13;
bool CostingOptions::has_use_highways() const {
  return has_use_highways_case() == kUseHighways;
}
void CostingOptions::set_has_use_highways() {
  _oneof_case_[12] = kUseHighways;
}
void CostingOptions::clear_use_highways() {
  if (has_use_highways()) {
    has_use_highways_.use_highways_ = 0;
    clear_has_has_use_highways();
  }
}
 float CostingOptions::use_highways() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_highways)
  if (has_use_highways()) {
    return has_use_highways_.use_highways_;
  }
  return 0;
}
 void CostingOptions::set_use_highways(float value) {
  if (!has_use_highways()) {
    clear_has_use_highways();
    set_has_use_highways();
  }
  has_use_highways_.use_highways_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_highways)
}

// optional float use_tolls = 14;
bool CostingOptions::has_use_tolls() const {
  return has_use_tolls_case() == kUseTolls;
}
void CostingOptions::set_has_use_tolls() {
  _oneof_case_[13] = kUseTolls;
}
void CostingOptions::clear_use_tolls() {
  if (has_use_tolls()) {
    has_use_tolls_.use_tolls_ = 0;
    clear_has_has_use_tolls();
  }
}
 float CostingOptions::use_tolls() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_tolls)
  if (has_use_tolls()) {
    return has_use_tolls_.use_tolls_;
  }
  return 0;
}
 void CostingOptions::set_use_tolls(float value) {
  if (!has_use_tolls()) {
    clear_has_use_tolls();
    set_has_use_tolls();
  }
  has_use_tolls_.use_tolls_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_tolls)
}

// optional float use_roads = 15;
bool CostingOptions::has_use_roads() const {
  return has_use_roads_case() == kUseRoads;
}
void CostingOptions::set_has_use_roads() {
  _oneof_case_[14] = kUseRoads;
}
void CostingOptions::clear_use_roads() {
  if (has_use_roads()) {
    has_use_roads_.use_roads_ = 0;
    clear_has_has_use_roads();
  }
}
 float CostingOptions::use_roads() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_roads)
  if (has_use_roads()) {
    return has_use_roads_.use_roads_;
  }
  return 0;
}
 void CostingOptions::set_use_roads(float value) {
  if (!has_use_roads()) {
    clear_has_use_roads();
    set_has_use_roads();
  }
  has_use_roads_.use_roads_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_roads)
}

// optional uint32 max_distance = 16;
bool CostingOptions::has_max_distance() const {
  return has_max_distance_case() == kMaxDistance;
}
void CostingOptions::set_has_max_distance() {
  _oneof_case_[15] = kMaxDistance;
}
void CostingOptions::clear_max_distance() {
  if (has_max_distance()) {
    has_max_distance_.max_distance_ = 0u;
    clear_has_has_max_distance();
  }
}
 ::google::protobuf::uint32 CostingOptions::max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.max_distance)
  if (has_max_distance()) {
    return has_max_distance_.max_distance_;
  }
  return 0u;
}
 void CostingOptions::set_max_distance(::google::protobuf::uint32 value) {
  if (!has_max_distance()) {
    clear_has_max_distance();
    set_has_max_distance();
  }
  has_max_distance_.max_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.max_distance)
}

// optional float walking_speed = 17;
bool CostingOptions::has_walking_speed() const {
  return has_walking_speed_case() == kWalkingSpeed;
}
void CostingOptions::set_has_walking_speed() {
  _oneof_case_[16] = kWalkingSpeed;
}
void CostingOptions::clear_walking_speed() {
  if (has_walking_speed()) {
    has_walking_speed_.walking_speed_ = 0;
    clear_has_has_walking_speed();
  }
}
 float CostingOptions::walking_speed() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.walking_speed)
  if (has_walking_speed()) {
    return has_walking_speed_.walking_speed_;
  }
  return 0;
}
 void CostingOptions::set_walking_speed(float value) {
  if (!has_walking_speed()) {
    clear_has_walking_speed();
    set_has_walking_speed();
  }
  has_walking_speed_.walking_speed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.walking_speed)
}

// optional float step_penalty = 18;
bool CostingOptions::has_step_penalty() const {
  return has_step_penalty_case() == kStepPenalty;
}
void CostingOptions::set_has_step_penalty() {
  _oneof_case_[17] = kStepPenalty;
}
void CostingOptions::clear_step_penalty() {
  if (has_step_penalty()) {
    has_step_penalty_.step_penalty_ = 0;
    clear_has_has_step_penalty();
  }
}
 float CostingOptions::step_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.step_penalty)
  if (has_step_penalty()) {
    return has_step_penalty_.step_penalty_;
  }
  return 0;
}
 void CostingOptions::set_step_penalty(float value) {
  if (!has_step_penalty()) {
    clear_has_step_penalty();
    set_has_step_penalty();
  }
  has_step_penalty_.step_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.step_penalty)
}

// optional uint32 max_grade = 19;
bool CostingOptions::has_max_grade() const {
  return has_max_grade_case() == kMaxGrade;
}
void CostingOptions::set_has_max_grade() {
  _oneof_case_[18] = kMaxGrade;
}
void CostingOptions::clear_max_grade() {
  if (has_max_grade()) {
    has_max_grade_.max_grade_ = 0u;
    clear_has_has_max_grade();
  }
}
 ::google::protobuf::uint32 CostingOptions::max_grade() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.max_grade)
  if (has_max_grade()) {
    return has_max_grade_.max_grade_;
  }
  return 0u;
}
 void CostingOptions::set_max_grade(::google::protobuf::uint32 value) {
  if (!has_max_grade()) {
    clear_has_max_grade();
    set_has_max_grade();
  }
  has_max_grade_.max_grade_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.max_grade)
}

// optional uint32 max_hiking_difficulty = 20;
bool CostingOptions::has_max_hiking_difficulty() const {
  return has_max_hiking_difficulty_case() == kMaxHikingDifficulty;
}
void CostingOptions::set_has_max_hiking_difficulty() {
  _oneof_case_[19] = kMaxHikingDifficulty;
}
void CostingOptions::clear_max_hiking_difficulty() {
  if (has_max_hiking_difficulty()) {
    has_max_hiking_difficulty_.max_hiking_difficulty_ = 0u;
    clear_has_has_max_hiking_difficulty();
  }
}
 ::google::protobuf::uint32 CostingOptions::max_hiking_difficulty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.max_hiking_difficulty)
  if (has_max_hiking_difficulty()) {
    return has_max_hiking_difficulty_.max_hiking_difficulty_;
  }
  return 0u;
}
 void CostingOptions::set_max_hiking_difficulty(::google::protobuf::uint32 value) {
  if (!has_max_hiking_difficulty()) {
    clear_has_max_hiking_difficulty();
    set_has_max_hiking_difficulty();
  }
  has_max_hiking_difficulty_.max_hiking_difficulty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.max_hiking_difficulty)
}

// optional float mode_factor = 21;
bool CostingOptions::has_mode_factor() const {
  return has_mode_factor_case() == kModeFactor;
}
void CostingOptions::set_has_mode_factor() {
  _oneof_case_[20] = kModeFactor;
}
void CostingOptions::clear_mode_factor() {
  if (has_mode_factor()) {
    has_mode_factor_.mode_factor_ = 0;
    clear_has_has_mode_factor();
  }
}
 float CostingOptions::mode_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.mode_factor)
  if (has_mode_factor()) {
    return has_mode_factor_.mode_factor_;
  }
  return 0;
}
 void CostingOptions::set_mode_factor(float value) {
  if (!has_mode_factor()) {
    clear_has_mode_factor();
    set_has_mode_factor();
  }
  has_mode_factor_.mode_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.mode_factor)
}

// optional float walkway_factor = 22;
bool CostingOptions::has_walkway_factor() const {
  return has_walkway_factor_case() == kWalkwayFactor;
}
void CostingOptions::set_has_walkway_factor() {
  _oneof_case_[21] = kWalkwayFactor;
}
void CostingOptions::clear_walkway_factor() {
  if (has_walkway_factor()) {
    has_walkway_factor_.walkway_factor_ = 0;
    clear_has_has_walkway_factor();
  }
}
 float CostingOptions::walkway_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.walkway_factor)
  if (has_walkway_factor()) {
    return has_walkway_factor_.walkway_factor_;
  }
  return 0;
}
 void CostingOptions::set_walkway_factor(float value) {
  if (!has_walkway_factor()) {
    clear_has_walkway_factor();
    set_has_walkway_factor();
  }
  has_walkway_factor_.walkway_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.walkway_factor)
}

// optional float sidewalk_factor = 23;
bool CostingOptions::has_sidewalk_factor() const {
  return has_sidewalk_factor_case() == kSidewalkFactor;
}
void CostingOptions::set_has_sidewalk_factor() {
  _oneof_case_[22] = kSidewalkFactor;
}
void CostingOptions::clear_sidewalk_factor() {
  if (has_sidewalk_factor()) {
    has_sidewalk_factor_.sidewalk_factor_ = 0;
    clear_has_has_sidewalk_factor();
  }
}
 float CostingOptions::sidewalk_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.sidewalk_factor)
  if (has_sidewalk_factor()) {
    return has_sidewalk_factor_.sidewalk_factor_;
  }
  return 0;
}
 void CostingOptions::set_sidewalk_factor(float value) {
  if (!has_sidewalk_factor()) {
    clear_has_sidewalk_factor();
    set_has_sidewalk_factor();
  }
  has_sidewalk_factor_.sidewalk_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.sidewalk_factor)
}

// optional float alley_factor = 24;
bool CostingOptions::has_alley_factor() const {
  return has_alley_factor_case() == kAlleyFactor;
}
void CostingOptions::set_has_alley_factor() {
  _oneof_case_[23] = kAlleyFactor;
}
void CostingOptions::clear_alley_factor() {
  if (has_alley_factor()) {
    has_alley_factor_.alley_factor_ = 0;
    clear_has_has_alley_factor();
  }
}
 float CostingOptions::alley_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.alley_factor)
  if (has_alley_factor()) {
    return has_alley_factor_.alley_factor_;
  }
  return 0;
}
 void CostingOptions::set_alley_factor(float value) {
  if (!has_alley_factor()) {
    clear_has_alley_factor();
    set_has_alley_factor();
  }
  has_alley_factor_.alley_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.alley_factor)
}

// optional float driveway_factor = 25;
bool CostingOptions::has_driveway_factor() const {
  return has_driveway_factor_case() == kDrivewayFactor;
}
void CostingOptions::set_has_driveway_factor() {
  _oneof_case_[24] = kDrivewayFactor;
}
void CostingOptions::clear_driveway_factor() {
  if (has_driveway_factor()) {
    has_driveway_factor_.driveway_factor_ = 0;
    clear_has_has_driveway_factor();
  }
}
 float CostingOptions::driveway_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.driveway_factor)
  if (has_driveway_factor()) {
    return has_driveway_factor_.driveway_factor_;
  }
  return 0;
}
 void CostingOptions::set_driveway_factor(float value) {
  if (!has_driveway_factor()) {
    clear_has_driveway_factor();
    set_has_driveway_factor();
  }
  has_driveway_factor_.driveway_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.driveway_factor)
}

// optional float driveway_penalty = 26;
bool CostingOptions::has_driveway_penalty() const {
  return has_driveway_penalty_case() == kDrivewayPenalty;
}
void CostingOptions::set_has_driveway_penalty() {
  _oneof_case_[25] = kDrivewayPenalty;
}
void CostingOptions::clear_driveway_penalty() {
  if (has_driveway_penalty()) {
    has_driveway_penalty_.driveway_penalty_ = 0;
    clear_has_has_driveway_penalty();
  }
}
 float CostingOptions::driveway_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.driveway_penalty)
  if (has_driveway_penalty()) {
    return has_driveway_penalty_.driveway_penalty_;
  }
  return 0;
}
 void CostingOptions::set_driveway_penalty(float value) {
  if (!has_driveway_penalty()) {
    clear_has_driveway_penalty();
    set_has_driveway_penalty();
  }
  has_driveway_penalty_.driveway_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.driveway_penalty)
}

// optional uint32 transit_start_end_max_distance = 27;
bool CostingOptions::has_transit_start_end_max_distance() const {
  return has_transit_start_end_max_distance_case() == kTransitStartEndMaxDistance;
}
void CostingOptions::set_has_transit_start_end_max_distance() {
  _oneof_case_[26] = kTransitStartEndMaxDistance;
}
void CostingOptions::clear_transit_start_end_max_distance() {
  if (has_transit_start_end_max_distance()) {
    has_transit_start_end_max_distance_.transit_start_end_max_distance_ = 0u;
    clear_has_has_transit_start_end_max_distance();
  }
}
 ::google::protobuf::uint32 CostingOptions::transit_start_end_max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.transit_start_end_max_distance)
  if (has_transit_start_end_max_distance()) {
    return has_transit_start_end_max_distance_.transit_start_end_max_distance_;
  }
  return 0u;
}
 void CostingOptions::set_transit_start_end_max_distance(::google::protobuf::uint32 value) {
  if (!has_transit_start_end_max_distance()) {
    clear_has_transit_start_end_max_distance();
    set_has_transit_start_end_max_distance();
  }
  has_transit_start_end_max_distance_.transit_start_end_max_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transit_start_end_max_distance)
}

// optional uint32 transit_transfer_max_distance = 28;
bool CostingOptions::has_transit_transfer_max_distance() const {
  return has_transit_transfer_max_distance_case() == kTransitTransferMaxDistance;
}
void CostingOptions::set_has_transit_transfer_max_distance() {
  _oneof_case_[27] = kTransitTransferMaxDistance;
}
void CostingOptions::clear_transit_transfer_max_distance() {
  if (has_transit_transfer_max_distance()) {
    has_transit_transfer_max_distance_.transit_transfer_max_distance_ = 0u;
    clear_has_has_transit_transfer_max_distance();
  }
}
 ::google::protobuf::uint32 CostingOptions::transit_transfer_max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.transit_transfer_max_distance)
  if (has_transit_transfer_max_distance()) {
    return has_transit_transfer_max_distance_.transit_transfer_max_distance_;
  }
  return 0u;
}
 void CostingOptions::set_transit_transfer_max_distance(::google::protobuf::uint32 value) {
  if (!has_transit_transfer_max_distance()) {
    clear_has_transit_transfer_max_distance();
    set_has_transit_transfer_max_distance();
  }
  has_transit_transfer_max_distance_.transit_transfer_max_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transit_transfer_max_distance)
}

// optional string transport_type = 29;
bool CostingOptions::has_transport_type() const {
  return has_transport_type_case() == kTransportType;
}
void CostingOptions::set_has_transport_type() {
  _oneof_case_[28] = kTransportType;
}
void CostingOptions::clear_transport_type() {
  if (has_transport_type()) {
    has_transport_type_.transport_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_transport_type();
  }
}
 const ::std::string& CostingOptions::transport_type() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.transport_type)
  if (has_transport_type()) {
    return has_transport_type_.transport_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void CostingOptions::set_transport_type(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transport_type)
  if (!has_transport_type()) {
    clear_has_transport_type();
    set_has_transport_type();
    has_transport_type_.transport_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_transport_type_.transport_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transport_type)
}
 void CostingOptions::set_transport_type(const char* value) {
  if (!has_transport_type()) {
    clear_has_transport_type();
    set_has_transport_type();
    has_transport_type_.transport_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_transport_type_.transport_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.CostingOptions.transport_type)
}
 void CostingOptions::set_transport_type(const char* value, size_t size) {
  if (!has_transport_type()) {
    clear_has_transport_type();
    set_has_transport_type();
    has_transport_type_.transport_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_transport_type_.transport_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.CostingOptions.transport_type)
}
 ::std::string* CostingOptions::mutable_transport_type() {
  if (!has_transport_type()) {
    clear_has_transport_type();
    set_has_transport_type();
    has_transport_type_.transport_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.transport_type)
  return has_transport_type_.transport_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CostingOptions::release_transport_type() {
  // @@protoc_insertion_point(field_release:valhalla.CostingOptions.transport_type)
  if (has_transport_type()) {
    clear_has_has_transport_type();
    return has_transport_type_.transport_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void CostingOptions::set_allocated_transport_type(::std::string* transport_type) {
  if (!has_transport_type()) {
    has_transport_type_.transport_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_transport_type();
  if (transport_type != NULL) {
    set_has_transport_type();
    has_transport_type_.transport_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        transport_type);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.CostingOptions.transport_type)
}

// optional float top_speed = 30;
bool CostingOptions::has_top_speed() const {
  return has_top_speed_case() == kTopSpeed;
}
void CostingOptions::set_has_top_speed() {
  _oneof_case_[29] = kTopSpeed;
}
void CostingOptions::clear_top_speed() {
  if (has_top_speed()) {
    has_top_speed_.top_speed_ = 0;
    clear_has_has_top_speed();
  }
}
 float CostingOptions::top_speed() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.top_speed)
  if (has_top_speed()) {
    return has_top_speed_.top_speed_;
  }
  return 0;
}
 void CostingOptions::set_top_speed(float value) {
  if (!has_top_speed()) {
    clear_has_top_speed();
    set_has_top_speed();
  }
  has_top_speed_.top_speed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.top_speed)
}

// optional float use_hills = 31;
bool CostingOptions::has_use_hills() const {
  return has_use_hills_case() == kUseHills;
}
void CostingOptions::set_has_use_hills() {
  _oneof_case_[30] = kUseHills;
}
void CostingOptions::clear_use_hills() {
  if (has_use_hills()) {
    has_use_hills_.use_hills_ = 0;
    clear_has_has_use_hills();
  }
}
 float CostingOptions::use_hills() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_hills)
  if (has_use_hills()) {
    return has_use_hills_.use_hills_;
  }
  return 0;
}
 void CostingOptions::set_use_hills(float value) {
  if (!has_use_hills()) {
    clear_has_use_hills();
    set_has_use_hills();
  }
  has_use_hills_.use_hills_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_hills)
}

// optional float use_primary = 32;
bool CostingOptions::has_use_primary() const {
  return has_use_primary_case() == kUsePrimary;
}
void CostingOptions::set_has_use_primary() {
  _oneof_case_[31] = kUsePrimary;
}
void CostingOptions::clear_use_primary() {
  if (has_use_primary()) {
    has_use_primary_.use_primary_ = 0;
    clear_has_has_use_primary();
  }
}
 float CostingOptions::use_primary() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_primary)
  if (has_use_primary()) {
    return has_use_primary_.use_primary_;
  }
  return 0;
}
 void CostingOptions::set_use_primary(float value) {
  if (!has_use_primary()) {
    clear_has_use_primary();
    set_has_use_primary();
  }
  has_use_primary_.use_primary_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_primary)
}

// optional float use_trails = 33;
bool CostingOptions::has_use_trails() const {
  return has_use_trails_case() == kUseTrails;
}
void CostingOptions::set_has_use_trails() {
  _oneof_case_[32] = kUseTrails;
}
void CostingOptions::clear_use_trails() {
  if (has_use_trails()) {
    has_use_trails_.use_trails_ = 0;
    clear_has_has_use_trails();
  }
}
 float CostingOptions::use_trails() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_trails)
  if (has_use_trails()) {
    return has_use_trails_.use_trails_;
  }
  return 0;
}
 void CostingOptions::set_use_trails(float value) {
  if (!has_use_trails()) {
    clear_has_use_trails();
    set_has_use_trails();
  }
  has_use_trails_.use_trails_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_trails)
}

// optional float low_class_penalty = 34;
bool CostingOptions::has_low_class_penalty() const {
  return has_low_class_penalty_case() == kLowClassPenalty;
}
void CostingOptions::set_has_low_class_penalty() {
  _oneof_case_[33] = kLowClassPenalty;
}
void CostingOptions::clear_low_class_penalty() {
  if (has_low_class_penalty()) {
    has_low_class_penalty_.low_class_penalty_ = 0;
    clear_has_has_low_class_penalty();
  }
}
 float CostingOptions::low_class_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.low_class_penalty)
  if (has_low_class_penalty()) {
    return has_low_class_penalty_.low_class_penalty_;
  }
  return 0;
}
 void CostingOptions::set_low_class_penalty(float value) {
  if (!has_low_class_penalty()) {
    clear_has_low_class_penalty();
    set_has_low_class_penalty();
  }
  has_low_class_penalty_.low_class_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.low_class_penalty)
}

// optional bool hazmat = 35;
bool CostingOptions::has_hazmat() const {
  return has_hazmat_case() == kHazmat;
}
void CostingOptions::set_has_hazmat() {
  _oneof_case_[34] = kHazmat;
}
void CostingOptions::clear_hazmat() {
  if (has_hazmat()) {
    has_hazmat_.hazmat_ = false;
    clear_has_has_hazmat();
  }
}
 bool CostingOptions::hazmat() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.hazmat)
  if (has_hazmat()) {
    return has_hazmat_.hazmat_;
  }
  return false;
}
 void CostingOptions::set_hazmat(bool value) {
  if (!has_hazmat()) {
    clear_has_hazmat();
    set_has_hazmat();
  }
  has_hazmat_.hazmat_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.hazmat)
}

// optional float weight = 36;
bool CostingOptions::has_weight() const {
  return has_weight_case() == kWeight;
}
void CostingOptions::set_has_weight() {
  _oneof_case_[35] = kWeight;
}
void CostingOptions::clear_weight() {
  if (has_weight()) {
    has_weight_.weight_ = 0;
    clear_has_has_weight();
  }
}
 float CostingOptions::weight() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.weight)
  if (has_weight()) {
    return has_weight_.weight_;
  }
  return 0;
}
 void CostingOptions::set_weight(float value) {
  if (!has_weight()) {
    clear_has_weight();
    set_has_weight();
  }
  has_weight_.weight_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.weight)
}

// optional float axle_load = 37;
bool CostingOptions::has_axle_load() const {
  return has_axle_load_case() == kAxleLoad;
}
void CostingOptions::set_has_axle_load() {
  _oneof_case_[36] = kAxleLoad;
}
void CostingOptions::clear_axle_load() {
  if (has_axle_load()) {
    has_axle_load_.axle_load_ = 0;
    clear_has_has_axle_load();
  }
}
 float CostingOptions::axle_load() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.axle_load)
  if (has_axle_load()) {
    return has_axle_load_.axle_load_;
  }
  return 0;
}
 void CostingOptions::set_axle_load(float value) {
  if (!has_axle_load()) {
    clear_has_axle_load();
    set_has_axle_load();
  }
  has_axle_load_.axle_load_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.axle_load)
}

// optional float height = 38;
bool CostingOptions::has_height() const {
  return has_height_case() == kHeight;
}
void CostingOptions::set_has_height() {
  _oneof_case_[37] = kHeight;
}
void CostingOptions::clear_height() {
  if (has_height()) {
    has_height_.height_ = 0;
    clear_has_has_height();
  }
}
 float CostingOptions::height() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.height)
  if (has_height()) {
    return has_height_.height_;
  }
  return 0;
}
 void CostingOptions::set_height(float value) {
  if (!has_height()) {
    clear_has_height();
    set_has_height();
  }
  has_height_.height_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.height)
}

// optional float width = 39;
bool CostingOptions::has_width() const {
  return has_width_case() == kWidth;
}
void CostingOptions::set_has_width() {
  _oneof_case_[38] = kWidth;
}
void CostingOptions::clear_width() {
  if (has_width()) {
    has_width_.width_ = 0;
    clear_has_has_width();
  }
}
 float CostingOptions::width() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.width)
  if (has_width()) {
    return has_width_.width_;
  }
  return 0;
}
 void CostingOptions::set_width(float value) {
  if (!has_width()) {
    clear_has_width();
    set_has_width();
  }
  has_width_.width_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.width)
}

// optional float length = 40;
bool CostingOptions::has_length() const {
  return has_length_case() == kLength;
}
void CostingOptions::set_has_length() {
  _oneof_case_[39] = kLength;
}
void CostingOptions::clear_length() {
  if (has_length()) {
    has_length_.length_ = 0;
    clear_has_has_length();
  }
}
 float CostingOptions::length() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.length)
  if (has_length()) {
    return has_length_.length_;
  }
  return 0;
}
 void CostingOptions::set_length(float value) {
  if (!has_length()) {
    clear_has_length();
    set_has_length();
  }
  has_length_.length_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.length)
}

// optional float cycling_speed = 41;
bool CostingOptions::has_cycling_speed() const {
  return has_cycling_speed_case() == kCyclingSpeed;
}
void CostingOptions::set_has_cycling_speed() {
  _oneof_case_[40] = kCyclingSpeed;
}
void CostingOptions::clear_cycling_speed() {
  if (has_cycling_speed()) {
    has_cycling_speed_.cycling_speed_ = 0;
    clear_has_has_cycling_speed();
  }
}
 float CostingOptions::cycling_speed() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.cycling_speed)
  if (has_cycling_speed()) {
    return has_cycling_speed_.cycling_speed_;
  }
  return 0;
}
 void CostingOptions::set_cycling_speed(float value) {
  if (!has_cycling_speed()) {
    clear_has_cycling_speed();
    set_has_cycling_speed();
  }
  has_cycling_speed_.cycling_speed_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.cycling_speed)
}

// optional bool wheelchair = 42;
bool CostingOptions::has_wheelchair() const {
  return has_wheelchair_case() == kWheelchair;
}
void CostingOptions::set_has_wheelchair() {
  _oneof_case_[41] = kWheelchair;
}
void CostingOptions::clear_wheelchair() {
  if (has_wheelchair()) {
    has_wheelchair_.wheelchair_ = false;
    clear_has_has_wheelchair();
  }
}
 bool CostingOptions::wheelchair() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.wheelchair)
  if (has_wheelchair()) {
    return has_wheelchair_.wheelchair_;
  }
  return false;
}
 void CostingOptions::set_wheelchair(bool value) {
  if (!has_wheelchair()) {
    clear_has_wheelchair();
    set_has_wheelchair();
  }
  has_wheelchair_.wheelchair_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.wheelchair)
}

// optional bool bicycle = 43;
bool CostingOptions::has_bicycle() const {
  return has_bicycle_case() == kBicycle;
}
void CostingOptions::set_has_bicycle() {
  _oneof_case_[42] = kBicycle;
}
void CostingOptions::clear_bicycle() {
  if (has_bicycle()) {
    has_bicycle_.bicycle_ = false;
    clear_has_has_bicycle();
  }
}
 bool CostingOptions::bicycle() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.bicycle)
  if (has_bicycle()) {
    return has_bicycle_.bicycle_;
  }
  return false;
}
 void CostingOptions::set_bicycle(bool value) {
  if (!has_bicycle()) {
    clear_has_bicycle();
    set_has_bicycle();
  }
  has_bicycle_.bicycle_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.bicycle)
}

// optional float use_bus = 44;
bool CostingOptions::has_use_bus() const {
  return has_use_bus_case() == kUseBus;
}
void CostingOptions::set_has_use_bus() {
  _oneof_case_[43] = kUseBus;
}
void CostingOptions::clear_use_bus() {
  if (has_use_bus()) {
    has_use_bus_.use_bus_ = 0;
    clear_has_has_use_bus();
  }
}
 float CostingOptions::use_bus() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_bus)
  if (has_use_bus()) {
    return has_use_bus_.use_bus_;
  }
  return 0;
}
 void CostingOptions::set_use_bus(float value) {
  if (!has_use_bus()) {
    clear_has_use_bus();
    set_has_use_bus();
  }
  has_use_bus_.use_bus_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_bus)
}

// optional float use_rail = 45;
bool CostingOptions::has_use_rail() const {
  return has_use_rail_case() == kUseRail;
}
void CostingOptions::set_has_use_rail() {
  _oneof_case_[44] = kUseRail;
}
void CostingOptions::clear_use_rail() {
  if (has_use_rail()) {
    has_use_rail_.use_rail_ = 0;
    clear_has_has_use_rail();
  }
}
 float CostingOptions::use_rail() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_rail)
  if (has_use_rail()) {
    return has_use_rail_.use_rail_;
  }
  return 0;
}
 void CostingOptions::set_use_rail(float value) {
  if (!has_use_rail()) {
    clear_has_use_rail();
    set_has_use_rail();
  }
  has_use_rail_.use_rail_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_rail)
}

// optional float use_transfers = 46;
bool CostingOptions::has_use_transfers() const {
  return has_use_transfers_case() == kUseTransfers;
}
void CostingOptions::set_has_use_transfers() {
  _oneof_case_[45] = kUseTransfers;
}
void CostingOptions::clear_use_transfers() {
  if (has_use_transfers()) {
    has_use_transfers_.use_transfers_ = 0;
    clear_has_has_use_transfers();
  }
}
 float CostingOptions::use_transfers() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_transfers)
  if (has_use_transfers()) {
    return has_use_transfers_.use_transfers_;
  }
  return 0;
}
 void CostingOptions::set_use_transfers(float value) {
  if (!has_use_transfers()) {
    clear_has_use_transfers();
    set_has_use_transfers();
  }
  has_use_transfers_.use_transfers_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_transfers)
}

// optional float transfer_cost = 47;
bool CostingOptions::has_transfer_cost() const {
  return has_transfer_cost_case() == kTransferCost;
}
void CostingOptions::set_has_transfer_cost() {
  _oneof_case_[46] = kTransferCost;
}
void CostingOptions::clear_transfer_cost() {
  if (has_transfer_cost()) {
    has_transfer_cost_.transfer_cost_ = 0;
    clear_has_has_transfer_cost();
  }
}
 float CostingOptions::transfer_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.transfer_cost)
  if (has_transfer_cost()) {
    return has_transfer_cost_.transfer_cost_;
  }
  return 0;
}
 void CostingOptions::set_transfer_cost(float value) {
  if (!has_transfer_cost()) {
    clear_has_transfer_cost();
    set_has_transfer_cost();
  }
  has_transfer_cost_.transfer_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transfer_cost)
}

// optional float transfer_penalty = 48;
bool CostingOptions::has_transfer_penalty() const {
  return has_transfer_penalty_case() == kTransferPenalty;
}
void CostingOptions::set_has_transfer_penalty() {
  _oneof_case_[47] = kTransferPenalty;
}
void CostingOptions::clear_transfer_penalty() {
  if (has_transfer_penalty()) {
    has_transfer_penalty_.transfer_penalty_ = 0;
    clear_has_has_transfer_penalty();
  }
}
 float CostingOptions::transfer_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.transfer_penalty)
  if (has_transfer_penalty()) {
    return has_transfer_penalty_.transfer_penalty_;
  }
  return 0;
}
 void CostingOptions::set_transfer_penalty(float value) {
  if (!has_transfer_penalty()) {
    clear_has_transfer_penalty();
    set_has_transfer_penalty();
  }
  has_transfer_penalty_.transfer_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.transfer_penalty)
}

// optional .valhalla.FilterAction filter_stop_action = 49;
void CostingOptions::clear_filter_stop_action() {
  filter_stop_action_ = 0;
}
 ::valhalla::FilterAction CostingOptions::filter_stop_action() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_stop_action)
  return static_cast< ::valhalla::FilterAction >(filter_stop_action_);
}
 void CostingOptions::set_filter_stop_action(::valhalla::FilterAction value) {
  
  filter_stop_action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_stop_action)
}

// repeated string filter_stop_ids = 50;
int CostingOptions::filter_stop_ids_size() const {
  return filter_stop_ids_.size();
}
void CostingOptions::clear_filter_stop_ids() {
  filter_stop_ids_.Clear();
}
 const ::std::string& CostingOptions::filter_stop_ids(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_stop_ids)
  return filter_stop_ids_.Get(index);
}
 ::std::string* CostingOptions::mutable_filter_stop_ids(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.filter_stop_ids)
  return filter_stop_ids_.Mutable(index);
}
 void CostingOptions::set_filter_stop_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_stop_ids)
  filter_stop_ids_.Mutable(index)->assign(value);
}
 void CostingOptions::set_filter_stop_ids(int index, const char* value) {
  filter_stop_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.CostingOptions.filter_stop_ids)
}
 void CostingOptions::set_filter_stop_ids(int index, const char* value, size_t size) {
  filter_stop_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.CostingOptions.filter_stop_ids)
}
 ::std::string* CostingOptions::add_filter_stop_ids() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.CostingOptions.filter_stop_ids)
  return filter_stop_ids_.Add();
}
 void CostingOptions::add_filter_stop_ids(const ::std::string& value) {
  filter_stop_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.CostingOptions.filter_stop_ids)
}
 void CostingOptions::add_filter_stop_ids(const char* value) {
  filter_stop_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.CostingOptions.filter_stop_ids)
}
 void CostingOptions::add_filter_stop_ids(const char* value, size_t size) {
  filter_stop_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.CostingOptions.filter_stop_ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CostingOptions::filter_stop_ids() const {
  // @@protoc_insertion_point(field_list:valhalla.CostingOptions.filter_stop_ids)
  return filter_stop_ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CostingOptions::mutable_filter_stop_ids() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.CostingOptions.filter_stop_ids)
  return &filter_stop_ids_;
}

// optional .valhalla.FilterAction filter_operator_action = 51;
void CostingOptions::clear_filter_operator_action() {
  filter_operator_action_ = 0;
}
 ::valhalla::FilterAction CostingOptions::filter_operator_action() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_operator_action)
  return static_cast< ::valhalla::FilterAction >(filter_operator_action_);
}
 void CostingOptions::set_filter_operator_action(::valhalla::FilterAction value) {
  
  filter_operator_action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_operator_action)
}

// repeated string filter_operator_ids = 52;
int CostingOptions::filter_operator_ids_size() const {
  return filter_operator_ids_.size();
}
void CostingOptions::clear_filter_operator_ids() {
  filter_operator_ids_.Clear();
}
 const ::std::string& CostingOptions::filter_operator_ids(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_operator_ids)
  return filter_operator_ids_.Get(index);
}
 ::std::string* CostingOptions::mutable_filter_operator_ids(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.filter_operator_ids)
  return filter_operator_ids_.Mutable(index);
}
 void CostingOptions::set_filter_operator_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_operator_ids)
  filter_operator_ids_.Mutable(index)->assign(value);
}
 void CostingOptions::set_filter_operator_ids(int index, const char* value) {
  filter_operator_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.CostingOptions.filter_operator_ids)
}
 void CostingOptions::set_filter_operator_ids(int index, const char* value, size_t size) {
  filter_operator_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.CostingOptions.filter_operator_ids)
}
 ::std::string* CostingOptions::add_filter_operator_ids() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.CostingOptions.filter_operator_ids)
  return filter_operator_ids_.Add();
}
 void CostingOptions::add_filter_operator_ids(const ::std::string& value) {
  filter_operator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.CostingOptions.filter_operator_ids)
}
 void CostingOptions::add_filter_operator_ids(const char* value) {
  filter_operator_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.CostingOptions.filter_operator_ids)
}
 void CostingOptions::add_filter_operator_ids(const char* value, size_t size) {
  filter_operator_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.CostingOptions.filter_operator_ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CostingOptions::filter_operator_ids() const {
  // @@protoc_insertion_point(field_list:valhalla.CostingOptions.filter_operator_ids)
  return filter_operator_ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CostingOptions::mutable_filter_operator_ids() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.CostingOptions.filter_operator_ids)
  return &filter_operator_ids_;
}

// optional .valhalla.FilterAction filter_route_action = 53;
void CostingOptions::clear_filter_route_action() {
  filter_route_action_ = 0;
}
 ::valhalla::FilterAction CostingOptions::filter_route_action() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_route_action)
  return static_cast< ::valhalla::FilterAction >(filter_route_action_);
}
 void CostingOptions::set_filter_route_action(::valhalla::FilterAction value) {
  
  filter_route_action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_route_action)
}

// repeated string filter_route_ids = 54;
int CostingOptions::filter_route_ids_size() const {
  return filter_route_ids_.size();
}
void CostingOptions::clear_filter_route_ids() {
  filter_route_ids_.Clear();
}
 const ::std::string& CostingOptions::filter_route_ids(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_route_ids)
  return filter_route_ids_.Get(index);
}
 ::std::string* CostingOptions::mutable_filter_route_ids(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.filter_route_ids)
  return filter_route_ids_.Mutable(index);
}
 void CostingOptions::set_filter_route_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_route_ids)
  filter_route_ids_.Mutable(index)->assign(value);
}
 void CostingOptions::set_filter_route_ids(int index, const char* value) {
  filter_route_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.CostingOptions.filter_route_ids)
}
 void CostingOptions::set_filter_route_ids(int index, const char* value, size_t size) {
  filter_route_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.CostingOptions.filter_route_ids)
}
 ::std::string* CostingOptions::add_filter_route_ids() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.CostingOptions.filter_route_ids)
  return filter_route_ids_.Add();
}
 void CostingOptions::add_filter_route_ids(const ::std::string& value) {
  filter_route_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.CostingOptions.filter_route_ids)
}
 void CostingOptions::add_filter_route_ids(const char* value) {
  filter_route_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.CostingOptions.filter_route_ids)
}
 void CostingOptions::add_filter_route_ids(const char* value, size_t size) {
  filter_route_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.CostingOptions.filter_route_ids)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CostingOptions::filter_route_ids() const {
  // @@protoc_insertion_point(field_list:valhalla.CostingOptions.filter_route_ids)
  return filter_route_ids_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CostingOptions::mutable_filter_route_ids() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.CostingOptions.filter_route_ids)
  return &filter_route_ids_;
}

// optional uint32 flow_mask = 55;
bool CostingOptions::has_flow_mask() const {
  return has_flow_mask_case() == kFlowMask;
}
void CostingOptions::set_has_flow_mask() {
  _oneof_case_[48] = kFlowMask;
}
void CostingOptions::clear_flow_mask() {
  if (has_flow_mask()) {
    has_flow_mask_.flow_mask_ = 0u;
    clear_has_has_flow_mask();
  }
}
 ::google::protobuf::uint32 CostingOptions::flow_mask() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.flow_mask)
  if (has_flow_mask()) {
    return has_flow_mask_.flow_mask_;
  }
  return 0u;
}
 void CostingOptions::set_flow_mask(::google::protobuf::uint32 value) {
  if (!has_flow_mask()) {
    clear_has_flow_mask();
    set_has_flow_mask();
  }
  has_flow_mask_.flow_mask_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.flow_mask)
}

// optional float bike_share_cost = 56;
bool CostingOptions::has_bike_share_cost() const {
  return has_bike_share_cost_case() == kBikeShareCost;
}
void CostingOptions::set_has_bike_share_cost() {
  _oneof_case_[49] = kBikeShareCost;
}
void CostingOptions::clear_bike_share_cost() {
  if (has_bike_share_cost()) {
    has_bike_share_cost_.bike_share_cost_ = 0;
    clear_has_has_bike_share_cost();
  }
}
 float CostingOptions::bike_share_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.bike_share_cost)
  if (has_bike_share_cost()) {
    return has_bike_share_cost_.bike_share_cost_;
  }
  return 0;
}
 void CostingOptions::set_bike_share_cost(float value) {
  if (!has_bike_share_cost()) {
    clear_has_bike_share_cost();
    set_has_bike_share_cost();
  }
  has_bike_share_cost_.bike_share_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.bike_share_cost)
}

// optional float bike_share_penalty = 57;
bool CostingOptions::has_bike_share_penalty() const {
  return has_bike_share_penalty_case() == kBikeSharePenalty;
}
void CostingOptions::set_has_bike_share_penalty() {
  _oneof_case_[50] = kBikeSharePenalty;
}
void CostingOptions::clear_bike_share_penalty() {
  if (has_bike_share_penalty()) {
    has_bike_share_penalty_.bike_share_penalty_ = 0;
    clear_has_has_bike_share_penalty();
  }
}
 float CostingOptions::bike_share_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.bike_share_penalty)
  if (has_bike_share_penalty()) {
    return has_bike_share_penalty_.bike_share_penalty_;
  }
  return 0;
}
 void CostingOptions::set_bike_share_penalty(float value) {
  if (!has_bike_share_penalty()) {
    clear_has_bike_share_penalty();
    set_has_bike_share_penalty();
  }
  has_bike_share_penalty_.bike_share_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.bike_share_penalty)
}

// optional float rail_ferry_cost = 58;
bool CostingOptions::has_rail_ferry_cost() const {
  return has_rail_ferry_cost_case() == kRailFerryCost;
}
void CostingOptions::set_has_rail_ferry_cost() {
  _oneof_case_[51] = kRailFerryCost;
}
void CostingOptions::clear_rail_ferry_cost() {
  if (has_rail_ferry_cost()) {
    has_rail_ferry_cost_.rail_ferry_cost_ = 0;
    clear_has_has_rail_ferry_cost();
  }
}
 float CostingOptions::rail_ferry_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.rail_ferry_cost)
  if (has_rail_ferry_cost()) {
    return has_rail_ferry_cost_.rail_ferry_cost_;
  }
  return 0;
}
 void CostingOptions::set_rail_ferry_cost(float value) {
  if (!has_rail_ferry_cost()) {
    clear_has_rail_ferry_cost();
    set_has_rail_ferry_cost();
  }
  has_rail_ferry_cost_.rail_ferry_cost_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.rail_ferry_cost)
}

// optional float use_rail_ferry = 59;
bool CostingOptions::has_use_rail_ferry() const {
  return has_use_rail_ferry_case() == kUseRailFerry;
}
void CostingOptions::set_has_use_rail_ferry() {
  _oneof_case_[52] = kUseRailFerry;
}
void CostingOptions::clear_use_rail_ferry() {
  if (has_use_rail_ferry()) {
    has_use_rail_ferry_.use_rail_ferry_ = 0;
    clear_has_has_use_rail_ferry();
  }
}
 float CostingOptions::use_rail_ferry() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_rail_ferry)
  if (has_use_rail_ferry()) {
    return has_use_rail_ferry_.use_rail_ferry_;
  }
  return 0;
}
 void CostingOptions::set_use_rail_ferry(float value) {
  if (!has_use_rail_ferry()) {
    clear_has_use_rail_ferry();
    set_has_use_rail_ferry();
  }
  has_use_rail_ferry_.use_rail_ferry_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_rail_ferry)
}

// optional bool ignore_restrictions = 60;
bool CostingOptions::has_ignore_restrictions() const {
  return has_ignore_restrictions_case() == kIgnoreRestrictions;
}
void CostingOptions::set_has_ignore_restrictions() {
  _oneof_case_[53] = kIgnoreRestrictions;
}
void CostingOptions::clear_ignore_restrictions() {
  if (has_ignore_restrictions()) {
    has_ignore_restrictions_.ignore_restrictions_ = false;
    clear_has_has_ignore_restrictions();
  }
}
 bool CostingOptions::ignore_restrictions() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.ignore_restrictions)
  if (has_ignore_restrictions()) {
    return has_ignore_restrictions_.ignore_restrictions_;
  }
  return false;
}
 void CostingOptions::set_ignore_restrictions(bool value) {
  if (!has_ignore_restrictions()) {
    clear_has_ignore_restrictions();
    set_has_ignore_restrictions();
  }
  has_ignore_restrictions_.ignore_restrictions_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.ignore_restrictions)
}

// optional bool ignore_oneways = 61;
bool CostingOptions::has_ignore_oneways() const {
  return has_ignore_oneways_case() == kIgnoreOneways;
}
void CostingOptions::set_has_ignore_oneways() {
  _oneof_case_[54] = kIgnoreOneways;
}
void CostingOptions::clear_ignore_oneways() {
  if (has_ignore_oneways()) {
    has_ignore_oneways_.ignore_oneways_ = false;
    clear_has_has_ignore_oneways();
  }
}
 bool CostingOptions::ignore_oneways() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.ignore_oneways)
  if (has_ignore_oneways()) {
    return has_ignore_oneways_.ignore_oneways_;
  }
  return false;
}
 void CostingOptions::set_ignore_oneways(bool value) {
  if (!has_ignore_oneways()) {
    clear_has_ignore_oneways();
    set_has_ignore_oneways();
  }
  has_ignore_oneways_.ignore_oneways_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.ignore_oneways)
}

// optional bool ignore_access = 62;
bool CostingOptions::has_ignore_access() const {
  return has_ignore_access_case() == kIgnoreAccess;
}
void CostingOptions::set_has_ignore_access() {
  _oneof_case_[55] = kIgnoreAccess;
}
void CostingOptions::clear_ignore_access() {
  if (has_ignore_access()) {
    has_ignore_access_.ignore_access_ = false;
    clear_has_has_ignore_access();
  }
}
 bool CostingOptions::ignore_access() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.ignore_access)
  if (has_ignore_access()) {
    return has_ignore_access_.ignore_access_;
  }
  return false;
}
 void CostingOptions::set_ignore_access(bool value) {
  if (!has_ignore_access()) {
    clear_has_ignore_access();
    set_has_ignore_access();
  }
  has_ignore_access_.ignore_access_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.ignore_access)
}

// optional bool ignore_closures = 63;
bool CostingOptions::has_ignore_closures() const {
  return has_ignore_closures_case() == kIgnoreClosures;
}
void CostingOptions::set_has_ignore_closures() {
  _oneof_case_[56] = kIgnoreClosures;
}
void CostingOptions::clear_ignore_closures() {
  if (has_ignore_closures()) {
    has_ignore_closures_.ignore_closures_ = false;
    clear_has_has_ignore_closures();
  }
}
 bool CostingOptions::ignore_closures() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.ignore_closures)
  if (has_ignore_closures()) {
    return has_ignore_closures_.ignore_closures_;
  }
  return false;
}
 void CostingOptions::set_ignore_closures(bool value) {
  if (!has_ignore_closures()) {
    clear_has_ignore_closures();
    set_has_ignore_closures();
  }
  has_ignore_closures_.ignore_closures_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.ignore_closures)
}

// optional bool shortest = 64;
bool CostingOptions::has_shortest() const {
  return has_shortest_case() == kShortest;
}
void CostingOptions::set_has_shortest() {
  _oneof_case_[57] = kShortest;
}
void CostingOptions::clear_shortest() {
  if (has_shortest()) {
    has_shortest_.shortest_ = false;
    clear_has_has_shortest();
  }
}
 bool CostingOptions::shortest() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.shortest)
  if (has_shortest()) {
    return has_shortest_.shortest_;
  }
  return false;
}
 void CostingOptions::set_shortest(bool value) {
  if (!has_shortest()) {
    clear_has_shortest();
    set_has_shortest();
  }
  has_shortest_.shortest_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.shortest)
}

// optional float service_penalty = 65;
bool CostingOptions::has_service_penalty() const {
  return has_service_penalty_case() == kServicePenalty;
}
void CostingOptions::set_has_service_penalty() {
  _oneof_case_[58] = kServicePenalty;
}
void CostingOptions::clear_service_penalty() {
  if (has_service_penalty()) {
    has_service_penalty_.service_penalty_ = 0;
    clear_has_has_service_penalty();
  }
}
 float CostingOptions::service_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.service_penalty)
  if (has_service_penalty()) {
    return has_service_penalty_.service_penalty_;
  }
  return 0;
}
 void CostingOptions::set_service_penalty(float value) {
  if (!has_service_penalty()) {
    clear_has_service_penalty();
    set_has_service_penalty();
  }
  has_service_penalty_.service_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.service_penalty)
}

// optional float use_tracks = 66;
bool CostingOptions::has_use_tracks() const {
  return has_use_tracks_case() == kUseTracks;
}
void CostingOptions::set_has_use_tracks() {
  _oneof_case_[59] = kUseTracks;
}
void CostingOptions::clear_use_tracks() {
  if (has_use_tracks()) {
    has_use_tracks_.use_tracks_ = 0;
    clear_has_has_use_tracks();
  }
}
 float CostingOptions::use_tracks() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_tracks)
  if (has_use_tracks()) {
    return has_use_tracks_.use_tracks_;
  }
  return 0;
}
 void CostingOptions::set_use_tracks(float value) {
  if (!has_use_tracks()) {
    clear_has_use_tracks();
    set_has_use_tracks();
  }
  has_use_tracks_.use_tracks_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_tracks)
}

// optional float use_distance = 67;
bool CostingOptions::has_use_distance() const {
  return has_use_distance_case() == kUseDistance;
}
void CostingOptions::set_has_use_distance() {
  _oneof_case_[60] = kUseDistance;
}
void CostingOptions::clear_use_distance() {
  if (has_use_distance()) {
    has_use_distance_.use_distance_ = 0;
    clear_has_has_use_distance();
  }
}
 float CostingOptions::use_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_distance)
  if (has_use_distance()) {
    return has_use_distance_.use_distance_;
  }
  return 0;
}
 void CostingOptions::set_use_distance(float value) {
  if (!has_use_distance()) {
    clear_has_use_distance();
    set_has_use_distance();
  }
  has_use_distance_.use_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_distance)
}

// optional float use_living_streets = 68;
bool CostingOptions::has_use_living_streets() const {
  return has_use_living_streets_case() == kUseLivingStreets;
}
void CostingOptions::set_has_use_living_streets() {
  _oneof_case_[61] = kUseLivingStreets;
}
void CostingOptions::clear_use_living_streets() {
  if (has_use_living_streets()) {
    has_use_living_streets_.use_living_streets_ = 0;
    clear_has_has_use_living_streets();
  }
}
 float CostingOptions::use_living_streets() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.use_living_streets)
  if (has_use_living_streets()) {
    return has_use_living_streets_.use_living_streets_;
  }
  return 0;
}
 void CostingOptions::set_use_living_streets(float value) {
  if (!has_use_living_streets()) {
    clear_has_use_living_streets();
    set_has_use_living_streets();
  }
  has_use_living_streets_.use_living_streets_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.use_living_streets)
}

// optional float service_factor = 69;
bool CostingOptions::has_service_factor() const {
  return has_service_factor_case() == kServiceFactor;
}
void CostingOptions::set_has_service_factor() {
  _oneof_case_[62] = kServiceFactor;
}
void CostingOptions::clear_service_factor() {
  if (has_service_factor()) {
    has_service_factor_.service_factor_ = 0;
    clear_has_has_service_factor();
  }
}
 float CostingOptions::service_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.service_factor)
  if (has_service_factor()) {
    return has_service_factor_.service_factor_;
  }
  return 0;
}
 void CostingOptions::set_service_factor(float value) {
  if (!has_service_factor()) {
    clear_has_service_factor();
    set_has_service_factor();
  }
  has_service_factor_.service_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.service_factor)
}

// optional float closure_factor = 70;
bool CostingOptions::has_closure_factor() const {
  return has_closure_factor_case() == kClosureFactor;
}
void CostingOptions::set_has_closure_factor() {
  _oneof_case_[63] = kClosureFactor;
}
void CostingOptions::clear_closure_factor() {
  if (has_closure_factor()) {
    has_closure_factor_.closure_factor_ = 0;
    clear_has_has_closure_factor();
  }
}
 float CostingOptions::closure_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.closure_factor)
  if (has_closure_factor()) {
    return has_closure_factor_.closure_factor_;
  }
  return 0;
}
 void CostingOptions::set_closure_factor(float value) {
  if (!has_closure_factor()) {
    clear_has_closure_factor();
    set_has_closure_factor();
  }
  has_closure_factor_.closure_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.closure_factor)
}

// optional float private_access_penalty = 71;
bool CostingOptions::has_private_access_penalty() const {
  return has_private_access_penalty_case() == kPrivateAccessPenalty;
}
void CostingOptions::set_has_private_access_penalty() {
  _oneof_case_[64] = kPrivateAccessPenalty;
}
void CostingOptions::clear_private_access_penalty() {
  if (has_private_access_penalty()) {
    has_private_access_penalty_.private_access_penalty_ = 0;
    clear_has_has_private_access_penalty();
  }
}
 float CostingOptions::private_access_penalty() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.private_access_penalty)
  if (has_private_access_penalty()) {
    return has_private_access_penalty_.private_access_penalty_;
  }
  return 0;
}
 void CostingOptions::set_private_access_penalty(float value) {
  if (!has_private_access_penalty()) {
    clear_has_private_access_penalty();
    set_has_private_access_penalty();
  }
  has_private_access_penalty_.private_access_penalty_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.private_access_penalty)
}

// optional bool exclude_unpaved = 72;
bool CostingOptions::has_exclude_unpaved() const {
  return has_exclude_unpaved_case() == kExcludeUnpaved;
}
void CostingOptions::set_has_exclude_unpaved() {
  _oneof_case_[65] = kExcludeUnpaved;
}
void CostingOptions::clear_exclude_unpaved() {
  if (has_exclude_unpaved()) {
    has_exclude_unpaved_.exclude_unpaved_ = false;
    clear_has_has_exclude_unpaved();
  }
}
 bool CostingOptions::exclude_unpaved() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.exclude_unpaved)
  if (has_exclude_unpaved()) {
    return has_exclude_unpaved_.exclude_unpaved_;
  }
  return false;
}
 void CostingOptions::set_exclude_unpaved(bool value) {
  if (!has_exclude_unpaved()) {
    clear_has_exclude_unpaved();
    set_has_exclude_unpaved();
  }
  has_exclude_unpaved_.exclude_unpaved_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.exclude_unpaved)
}

// optional bool include_hot = 73;
bool CostingOptions::has_include_hot() const {
  return has_include_hot_case() == kIncludeHot;
}
void CostingOptions::set_has_include_hot() {
  _oneof_case_[66] = kIncludeHot;
}
void CostingOptions::clear_include_hot() {
  if (has_include_hot()) {
    has_include_hot_.include_hot_ = false;
    clear_has_has_include_hot();
  }
}
 bool CostingOptions::include_hot() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.include_hot)
  if (has_include_hot()) {
    return has_include_hot_.include_hot_;
  }
  return false;
}
 void CostingOptions::set_include_hot(bool value) {
  if (!has_include_hot()) {
    clear_has_include_hot();
    set_has_include_hot();
  }
  has_include_hot_.include_hot_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.include_hot)
}

// optional bool include_hov2 = 74;
bool CostingOptions::has_include_hov2() const {
  return has_include_hov2_case() == kIncludeHov2;
}
void CostingOptions::set_has_include_hov2() {
  _oneof_case_[67] = kIncludeHov2;
}
void CostingOptions::clear_include_hov2() {
  if (has_include_hov2()) {
    has_include_hov2_.include_hov2_ = false;
    clear_has_has_include_hov2();
  }
}
 bool CostingOptions::include_hov2() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.include_hov2)
  if (has_include_hov2()) {
    return has_include_hov2_.include_hov2_;
  }
  return false;
}
 void CostingOptions::set_include_hov2(bool value) {
  if (!has_include_hov2()) {
    clear_has_include_hov2();
    set_has_include_hov2();
  }
  has_include_hov2_.include_hov2_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.include_hov2)
}

// optional bool include_hov3 = 75;
bool CostingOptions::has_include_hov3() const {
  return has_include_hov3_case() == kIncludeHov3;
}
void CostingOptions::set_has_include_hov3() {
  _oneof_case_[68] = kIncludeHov3;
}
void CostingOptions::clear_include_hov3() {
  if (has_include_hov3()) {
    has_include_hov3_.include_hov3_ = false;
    clear_has_has_include_hov3();
  }
}
 bool CostingOptions::include_hov3() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.include_hov3)
  if (has_include_hov3()) {
    return has_include_hov3_.include_hov3_;
  }
  return false;
}
 void CostingOptions::set_include_hov3(bool value) {
  if (!has_include_hov3()) {
    clear_has_include_hov3();
    set_has_include_hov3();
  }
  has_include_hov3_.include_hov3_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.include_hov3)
}

// optional bool exclude_cash_only_tolls = 76;
bool CostingOptions::has_exclude_cash_only_tolls() const {
  return has_exclude_cash_only_tolls_case() == kExcludeCashOnlyTolls;
}
void CostingOptions::set_has_exclude_cash_only_tolls() {
  _oneof_case_[69] = kExcludeCashOnlyTolls;
}
void CostingOptions::clear_exclude_cash_only_tolls() {
  if (has_exclude_cash_only_tolls()) {
    has_exclude_cash_only_tolls_.exclude_cash_only_tolls_ = false;
    clear_has_has_exclude_cash_only_tolls();
  }
}
 bool CostingOptions::exclude_cash_only_tolls() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.exclude_cash_only_tolls)
  if (has_exclude_cash_only_tolls()) {
    return has_exclude_cash_only_tolls_.exclude_cash_only_tolls_;
  }
  return false;
}
 void CostingOptions::set_exclude_cash_only_tolls(bool value) {
  if (!has_exclude_cash_only_tolls()) {
    clear_has_exclude_cash_only_tolls();
    set_has_exclude_cash_only_tolls();
  }
  has_exclude_cash_only_tolls_.exclude_cash_only_tolls_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.exclude_cash_only_tolls)
}

// optional uint32 restriction_probability = 77;
bool CostingOptions::has_restriction_probability() const {
  return has_restriction_probability_case() == kRestrictionProbability;
}
void CostingOptions::set_has_restriction_probability() {
  _oneof_case_[70] = kRestrictionProbability;
}
void CostingOptions::clear_restriction_probability() {
  if (has_restriction_probability()) {
    has_restriction_probability_.restriction_probability_ = 0u;
    clear_has_has_restriction_probability();
  }
}
 ::google::protobuf::uint32 CostingOptions::restriction_probability() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.restriction_probability)
  if (has_restriction_probability()) {
    return has_restriction_probability_.restriction_probability_;
  }
  return 0u;
}
 void CostingOptions::set_restriction_probability(::google::protobuf::uint32 value) {
  if (!has_restriction_probability()) {
    clear_has_restriction_probability();
    set_has_restriction_probability();
  }
  has_restriction_probability_.restriction_probability_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.restriction_probability)
}

// optional .valhalla.Costing costing = 90;
bool CostingOptions::has_costing() const {
  return has_costing_case() == kCosting;
}
void CostingOptions::set_has_costing() {
  _oneof_case_[71] = kCosting;
}
void CostingOptions::clear_costing() {
  if (has_costing()) {
    has_costing_.costing_ = 0;
    clear_has_has_costing();
  }
}
 ::valhalla::Costing CostingOptions::costing() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.costing)
  if (has_costing()) {
    return static_cast< ::valhalla::Costing >(has_costing_.costing_);
  }
  return static_cast< ::valhalla::Costing >(0);
}
 void CostingOptions::set_costing(::valhalla::Costing value) {
  if (!has_costing()) {
    clear_has_costing();
    set_has_costing();
  }
  has_costing_.costing_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.costing)
}

// optional string name = 91;
bool CostingOptions::has_name() const {
  return has_name_case() == kName;
}
void CostingOptions::set_has_name() {
  _oneof_case_[72] = kName;
}
void CostingOptions::clear_name() {
  if (has_name()) {
    has_name_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_name();
  }
}
 const ::std::string& CostingOptions::name() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.name)
  if (has_name()) {
    return has_name_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void CostingOptions::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.name)
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.name)
}
 void CostingOptions::set_name(const char* value) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.CostingOptions.name)
}
 void CostingOptions::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_name_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.CostingOptions.name)
}
 ::std::string* CostingOptions::mutable_name() {
  if (!has_name()) {
    clear_has_name();
    set_has_name();
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.name)
  return has_name_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CostingOptions::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.CostingOptions.name)
  if (has_name()) {
    clear_has_has_name();
    return has_name_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void CostingOptions::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    has_name_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_name();
  if (name != NULL) {
    set_has_name();
    has_name_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.CostingOptions.name)
}

// repeated .valhalla.AvoidEdge exclude_edges = 92;
int CostingOptions::exclude_edges_size() const {
  return exclude_edges_.size();
}
void CostingOptions::clear_exclude_edges() {
  exclude_edges_.Clear();
}
const ::valhalla::AvoidEdge& CostingOptions::exclude_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.exclude_edges)
  return exclude_edges_.Get(index);
}
::valhalla::AvoidEdge* CostingOptions::mutable_exclude_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.CostingOptions.exclude_edges)
  return exclude_edges_.Mutable(index);
}
::valhalla::AvoidEdge* CostingOptions::add_exclude_edges() {
  // @@protoc_insertion_point(field_add:valhalla.CostingOptions.exclude_edges)
  return exclude_edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::AvoidEdge >*
CostingOptions::mutable_exclude_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.CostingOptions.exclude_edges)
  return &exclude_edges_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::AvoidEdge >&
CostingOptions::exclude_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.CostingOptions.exclude_edges)
  return exclude_edges_;
}

// optional bool filter_closures = 93;
bool CostingOptions::has_filter_closures() const {
  return has_filter_closures_case() == kFilterClosures;
}
void CostingOptions::set_has_filter_closures() {
  _oneof_case_[73] = kFilterClosures;
}
void CostingOptions::clear_filter_closures() {
  if (has_filter_closures()) {
    has_filter_closures_.filter_closures_ = false;
    clear_has_has_filter_closures();
  }
}
 bool CostingOptions::filter_closures() const {
  // @@protoc_insertion_point(field_get:valhalla.CostingOptions.filter_closures)
  if (has_filter_closures()) {
    return has_filter_closures_.filter_closures_;
  }
  return false;
}
 void CostingOptions::set_filter_closures(bool value) {
  if (!has_filter_closures()) {
    clear_has_filter_closures();
    set_has_filter_closures();
  }
  has_filter_closures_.filter_closures_ = value;
  // @@protoc_insertion_point(field_set:valhalla.CostingOptions.filter_closures)
}

bool CostingOptions::has_has_maneuver_penalty() const {
  return has_maneuver_penalty_case() != HAS_MANEUVER_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_maneuver_penalty() {
  _oneof_case_[0] = HAS_MANEUVER_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_destination_only_penalty() const {
  return has_destination_only_penalty_case() != HAS_DESTINATION_ONLY_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_destination_only_penalty() {
  _oneof_case_[1] = HAS_DESTINATION_ONLY_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_gate_cost() const {
  return has_gate_cost_case() != HAS_GATE_COST_NOT_SET;
}
void CostingOptions::clear_has_has_gate_cost() {
  _oneof_case_[2] = HAS_GATE_COST_NOT_SET;
}
bool CostingOptions::has_has_gate_penalty() const {
  return has_gate_penalty_case() != HAS_GATE_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_gate_penalty() {
  _oneof_case_[3] = HAS_GATE_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_toll_booth_cost() const {
  return has_toll_booth_cost_case() != HAS_TOLL_BOOTH_COST_NOT_SET;
}
void CostingOptions::clear_has_has_toll_booth_cost() {
  _oneof_case_[4] = HAS_TOLL_BOOTH_COST_NOT_SET;
}
bool CostingOptions::has_has_toll_booth_penalty() const {
  return has_toll_booth_penalty_case() != HAS_TOLL_BOOTH_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_toll_booth_penalty() {
  _oneof_case_[5] = HAS_TOLL_BOOTH_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_alley_penalty() const {
  return has_alley_penalty_case() != HAS_ALLEY_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_alley_penalty() {
  _oneof_case_[6] = HAS_ALLEY_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_country_crossing_cost() const {
  return has_country_crossing_cost_case() != HAS_COUNTRY_CROSSING_COST_NOT_SET;
}
void CostingOptions::clear_has_has_country_crossing_cost() {
  _oneof_case_[7] = HAS_COUNTRY_CROSSING_COST_NOT_SET;
}
bool CostingOptions::has_has_country_crossing_penalty() const {
  return has_country_crossing_penalty_case() != HAS_COUNTRY_CROSSING_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_country_crossing_penalty() {
  _oneof_case_[8] = HAS_COUNTRY_CROSSING_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_ferry_cost() const {
  return has_ferry_cost_case() != HAS_FERRY_COST_NOT_SET;
}
void CostingOptions::clear_has_has_ferry_cost() {
  _oneof_case_[9] = HAS_FERRY_COST_NOT_SET;
}
bool CostingOptions::has_has_avoid_bad_surfaces() const {
  return has_avoid_bad_surfaces_case() != HAS_AVOID_BAD_SURFACES_NOT_SET;
}
void CostingOptions::clear_has_has_avoid_bad_surfaces() {
  _oneof_case_[10] = HAS_AVOID_BAD_SURFACES_NOT_SET;
}
bool CostingOptions::has_has_use_ferry() const {
  return has_use_ferry_case() != HAS_USE_FERRY_NOT_SET;
}
void CostingOptions::clear_has_has_use_ferry() {
  _oneof_case_[11] = HAS_USE_FERRY_NOT_SET;
}
bool CostingOptions::has_has_use_highways() const {
  return has_use_highways_case() != HAS_USE_HIGHWAYS_NOT_SET;
}
void CostingOptions::clear_has_has_use_highways() {
  _oneof_case_[12] = HAS_USE_HIGHWAYS_NOT_SET;
}
bool CostingOptions::has_has_use_tolls() const {
  return has_use_tolls_case() != HAS_USE_TOLLS_NOT_SET;
}
void CostingOptions::clear_has_has_use_tolls() {
  _oneof_case_[13] = HAS_USE_TOLLS_NOT_SET;
}
bool CostingOptions::has_has_use_roads() const {
  return has_use_roads_case() != HAS_USE_ROADS_NOT_SET;
}
void CostingOptions::clear_has_has_use_roads() {
  _oneof_case_[14] = HAS_USE_ROADS_NOT_SET;
}
bool CostingOptions::has_has_max_distance() const {
  return has_max_distance_case() != HAS_MAX_DISTANCE_NOT_SET;
}
void CostingOptions::clear_has_has_max_distance() {
  _oneof_case_[15] = HAS_MAX_DISTANCE_NOT_SET;
}
bool CostingOptions::has_has_walking_speed() const {
  return has_walking_speed_case() != HAS_WALKING_SPEED_NOT_SET;
}
void CostingOptions::clear_has_has_walking_speed() {
  _oneof_case_[16] = HAS_WALKING_SPEED_NOT_SET;
}
bool CostingOptions::has_has_step_penalty() const {
  return has_step_penalty_case() != HAS_STEP_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_step_penalty() {
  _oneof_case_[17] = HAS_STEP_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_max_grade() const {
  return has_max_grade_case() != HAS_MAX_GRADE_NOT_SET;
}
void CostingOptions::clear_has_has_max_grade() {
  _oneof_case_[18] = HAS_MAX_GRADE_NOT_SET;
}
bool CostingOptions::has_has_max_hiking_difficulty() const {
  return has_max_hiking_difficulty_case() != HAS_MAX_HIKING_DIFFICULTY_NOT_SET;
}
void CostingOptions::clear_has_has_max_hiking_difficulty() {
  _oneof_case_[19] = HAS_MAX_HIKING_DIFFICULTY_NOT_SET;
}
bool CostingOptions::has_has_mode_factor() const {
  return has_mode_factor_case() != HAS_MODE_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_mode_factor() {
  _oneof_case_[20] = HAS_MODE_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_walkway_factor() const {
  return has_walkway_factor_case() != HAS_WALKWAY_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_walkway_factor() {
  _oneof_case_[21] = HAS_WALKWAY_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_sidewalk_factor() const {
  return has_sidewalk_factor_case() != HAS_SIDEWALK_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_sidewalk_factor() {
  _oneof_case_[22] = HAS_SIDEWALK_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_alley_factor() const {
  return has_alley_factor_case() != HAS_ALLEY_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_alley_factor() {
  _oneof_case_[23] = HAS_ALLEY_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_driveway_factor() const {
  return has_driveway_factor_case() != HAS_DRIVEWAY_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_driveway_factor() {
  _oneof_case_[24] = HAS_DRIVEWAY_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_driveway_penalty() const {
  return has_driveway_penalty_case() != HAS_DRIVEWAY_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_driveway_penalty() {
  _oneof_case_[25] = HAS_DRIVEWAY_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_transit_start_end_max_distance() const {
  return has_transit_start_end_max_distance_case() != HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET;
}
void CostingOptions::clear_has_has_transit_start_end_max_distance() {
  _oneof_case_[26] = HAS_TRANSIT_START_END_MAX_DISTANCE_NOT_SET;
}
bool CostingOptions::has_has_transit_transfer_max_distance() const {
  return has_transit_transfer_max_distance_case() != HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET;
}
void CostingOptions::clear_has_has_transit_transfer_max_distance() {
  _oneof_case_[27] = HAS_TRANSIT_TRANSFER_MAX_DISTANCE_NOT_SET;
}
bool CostingOptions::has_has_transport_type() const {
  return has_transport_type_case() != HAS_TRANSPORT_TYPE_NOT_SET;
}
void CostingOptions::clear_has_has_transport_type() {
  _oneof_case_[28] = HAS_TRANSPORT_TYPE_NOT_SET;
}
bool CostingOptions::has_has_top_speed() const {
  return has_top_speed_case() != HAS_TOP_SPEED_NOT_SET;
}
void CostingOptions::clear_has_has_top_speed() {
  _oneof_case_[29] = HAS_TOP_SPEED_NOT_SET;
}
bool CostingOptions::has_has_use_hills() const {
  return has_use_hills_case() != HAS_USE_HILLS_NOT_SET;
}
void CostingOptions::clear_has_has_use_hills() {
  _oneof_case_[30] = HAS_USE_HILLS_NOT_SET;
}
bool CostingOptions::has_has_use_primary() const {
  return has_use_primary_case() != HAS_USE_PRIMARY_NOT_SET;
}
void CostingOptions::clear_has_has_use_primary() {
  _oneof_case_[31] = HAS_USE_PRIMARY_NOT_SET;
}
bool CostingOptions::has_has_use_trails() const {
  return has_use_trails_case() != HAS_USE_TRAILS_NOT_SET;
}
void CostingOptions::clear_has_has_use_trails() {
  _oneof_case_[32] = HAS_USE_TRAILS_NOT_SET;
}
bool CostingOptions::has_has_low_class_penalty() const {
  return has_low_class_penalty_case() != HAS_LOW_CLASS_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_low_class_penalty() {
  _oneof_case_[33] = HAS_LOW_CLASS_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_hazmat() const {
  return has_hazmat_case() != HAS_HAZMAT_NOT_SET;
}
void CostingOptions::clear_has_has_hazmat() {
  _oneof_case_[34] = HAS_HAZMAT_NOT_SET;
}
bool CostingOptions::has_has_weight() const {
  return has_weight_case() != HAS_WEIGHT_NOT_SET;
}
void CostingOptions::clear_has_has_weight() {
  _oneof_case_[35] = HAS_WEIGHT_NOT_SET;
}
bool CostingOptions::has_has_axle_load() const {
  return has_axle_load_case() != HAS_AXLE_LOAD_NOT_SET;
}
void CostingOptions::clear_has_has_axle_load() {
  _oneof_case_[36] = HAS_AXLE_LOAD_NOT_SET;
}
bool CostingOptions::has_has_height() const {
  return has_height_case() != HAS_HEIGHT_NOT_SET;
}
void CostingOptions::clear_has_has_height() {
  _oneof_case_[37] = HAS_HEIGHT_NOT_SET;
}
bool CostingOptions::has_has_width() const {
  return has_width_case() != HAS_WIDTH_NOT_SET;
}
void CostingOptions::clear_has_has_width() {
  _oneof_case_[38] = HAS_WIDTH_NOT_SET;
}
bool CostingOptions::has_has_length() const {
  return has_length_case() != HAS_LENGTH_NOT_SET;
}
void CostingOptions::clear_has_has_length() {
  _oneof_case_[39] = HAS_LENGTH_NOT_SET;
}
bool CostingOptions::has_has_cycling_speed() const {
  return has_cycling_speed_case() != HAS_CYCLING_SPEED_NOT_SET;
}
void CostingOptions::clear_has_has_cycling_speed() {
  _oneof_case_[40] = HAS_CYCLING_SPEED_NOT_SET;
}
bool CostingOptions::has_has_wheelchair() const {
  return has_wheelchair_case() != HAS_WHEELCHAIR_NOT_SET;
}
void CostingOptions::clear_has_has_wheelchair() {
  _oneof_case_[41] = HAS_WHEELCHAIR_NOT_SET;
}
bool CostingOptions::has_has_bicycle() const {
  return has_bicycle_case() != HAS_BICYCLE_NOT_SET;
}
void CostingOptions::clear_has_has_bicycle() {
  _oneof_case_[42] = HAS_BICYCLE_NOT_SET;
}
bool CostingOptions::has_has_use_bus() const {
  return has_use_bus_case() != HAS_USE_BUS_NOT_SET;
}
void CostingOptions::clear_has_has_use_bus() {
  _oneof_case_[43] = HAS_USE_BUS_NOT_SET;
}
bool CostingOptions::has_has_use_rail() const {
  return has_use_rail_case() != HAS_USE_RAIL_NOT_SET;
}
void CostingOptions::clear_has_has_use_rail() {
  _oneof_case_[44] = HAS_USE_RAIL_NOT_SET;
}
bool CostingOptions::has_has_use_transfers() const {
  return has_use_transfers_case() != HAS_USE_TRANSFERS_NOT_SET;
}
void CostingOptions::clear_has_has_use_transfers() {
  _oneof_case_[45] = HAS_USE_TRANSFERS_NOT_SET;
}
bool CostingOptions::has_has_transfer_cost() const {
  return has_transfer_cost_case() != HAS_TRANSFER_COST_NOT_SET;
}
void CostingOptions::clear_has_has_transfer_cost() {
  _oneof_case_[46] = HAS_TRANSFER_COST_NOT_SET;
}
bool CostingOptions::has_has_transfer_penalty() const {
  return has_transfer_penalty_case() != HAS_TRANSFER_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_transfer_penalty() {
  _oneof_case_[47] = HAS_TRANSFER_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_flow_mask() const {
  return has_flow_mask_case() != HAS_FLOW_MASK_NOT_SET;
}
void CostingOptions::clear_has_has_flow_mask() {
  _oneof_case_[48] = HAS_FLOW_MASK_NOT_SET;
}
bool CostingOptions::has_has_bike_share_cost() const {
  return has_bike_share_cost_case() != HAS_BIKE_SHARE_COST_NOT_SET;
}
void CostingOptions::clear_has_has_bike_share_cost() {
  _oneof_case_[49] = HAS_BIKE_SHARE_COST_NOT_SET;
}
bool CostingOptions::has_has_bike_share_penalty() const {
  return has_bike_share_penalty_case() != HAS_BIKE_SHARE_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_bike_share_penalty() {
  _oneof_case_[50] = HAS_BIKE_SHARE_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_rail_ferry_cost() const {
  return has_rail_ferry_cost_case() != HAS_RAIL_FERRY_COST_NOT_SET;
}
void CostingOptions::clear_has_has_rail_ferry_cost() {
  _oneof_case_[51] = HAS_RAIL_FERRY_COST_NOT_SET;
}
bool CostingOptions::has_has_use_rail_ferry() const {
  return has_use_rail_ferry_case() != HAS_USE_RAIL_FERRY_NOT_SET;
}
void CostingOptions::clear_has_has_use_rail_ferry() {
  _oneof_case_[52] = HAS_USE_RAIL_FERRY_NOT_SET;
}
bool CostingOptions::has_has_ignore_restrictions() const {
  return has_ignore_restrictions_case() != HAS_IGNORE_RESTRICTIONS_NOT_SET;
}
void CostingOptions::clear_has_has_ignore_restrictions() {
  _oneof_case_[53] = HAS_IGNORE_RESTRICTIONS_NOT_SET;
}
bool CostingOptions::has_has_ignore_oneways() const {
  return has_ignore_oneways_case() != HAS_IGNORE_ONEWAYS_NOT_SET;
}
void CostingOptions::clear_has_has_ignore_oneways() {
  _oneof_case_[54] = HAS_IGNORE_ONEWAYS_NOT_SET;
}
bool CostingOptions::has_has_ignore_access() const {
  return has_ignore_access_case() != HAS_IGNORE_ACCESS_NOT_SET;
}
void CostingOptions::clear_has_has_ignore_access() {
  _oneof_case_[55] = HAS_IGNORE_ACCESS_NOT_SET;
}
bool CostingOptions::has_has_ignore_closures() const {
  return has_ignore_closures_case() != HAS_IGNORE_CLOSURES_NOT_SET;
}
void CostingOptions::clear_has_has_ignore_closures() {
  _oneof_case_[56] = HAS_IGNORE_CLOSURES_NOT_SET;
}
bool CostingOptions::has_has_shortest() const {
  return has_shortest_case() != HAS_SHORTEST_NOT_SET;
}
void CostingOptions::clear_has_has_shortest() {
  _oneof_case_[57] = HAS_SHORTEST_NOT_SET;
}
bool CostingOptions::has_has_service_penalty() const {
  return has_service_penalty_case() != HAS_SERVICE_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_service_penalty() {
  _oneof_case_[58] = HAS_SERVICE_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_use_tracks() const {
  return has_use_tracks_case() != HAS_USE_TRACKS_NOT_SET;
}
void CostingOptions::clear_has_has_use_tracks() {
  _oneof_case_[59] = HAS_USE_TRACKS_NOT_SET;
}
bool CostingOptions::has_has_use_distance() const {
  return has_use_distance_case() != HAS_USE_DISTANCE_NOT_SET;
}
void CostingOptions::clear_has_has_use_distance() {
  _oneof_case_[60] = HAS_USE_DISTANCE_NOT_SET;
}
bool CostingOptions::has_has_use_living_streets() const {
  return has_use_living_streets_case() != HAS_USE_LIVING_STREETS_NOT_SET;
}
void CostingOptions::clear_has_has_use_living_streets() {
  _oneof_case_[61] = HAS_USE_LIVING_STREETS_NOT_SET;
}
bool CostingOptions::has_has_service_factor() const {
  return has_service_factor_case() != HAS_SERVICE_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_service_factor() {
  _oneof_case_[62] = HAS_SERVICE_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_closure_factor() const {
  return has_closure_factor_case() != HAS_CLOSURE_FACTOR_NOT_SET;
}
void CostingOptions::clear_has_has_closure_factor() {
  _oneof_case_[63] = HAS_CLOSURE_FACTOR_NOT_SET;
}
bool CostingOptions::has_has_private_access_penalty() const {
  return has_private_access_penalty_case() != HAS_PRIVATE_ACCESS_PENALTY_NOT_SET;
}
void CostingOptions::clear_has_has_private_access_penalty() {
  _oneof_case_[64] = HAS_PRIVATE_ACCESS_PENALTY_NOT_SET;
}
bool CostingOptions::has_has_exclude_unpaved() const {
  return has_exclude_unpaved_case() != HAS_EXCLUDE_UNPAVED_NOT_SET;
}
void CostingOptions::clear_has_has_exclude_unpaved() {
  _oneof_case_[65] = HAS_EXCLUDE_UNPAVED_NOT_SET;
}
bool CostingOptions::has_has_include_hot() const {
  return has_include_hot_case() != HAS_INCLUDE_HOT_NOT_SET;
}
void CostingOptions::clear_has_has_include_hot() {
  _oneof_case_[66] = HAS_INCLUDE_HOT_NOT_SET;
}
bool CostingOptions::has_has_include_hov2() const {
  return has_include_hov2_case() != HAS_INCLUDE_HOV2_NOT_SET;
}
void CostingOptions::clear_has_has_include_hov2() {
  _oneof_case_[67] = HAS_INCLUDE_HOV2_NOT_SET;
}
bool CostingOptions::has_has_include_hov3() const {
  return has_include_hov3_case() != HAS_INCLUDE_HOV3_NOT_SET;
}
void CostingOptions::clear_has_has_include_hov3() {
  _oneof_case_[68] = HAS_INCLUDE_HOV3_NOT_SET;
}
bool CostingOptions::has_has_exclude_cash_only_tolls() const {
  return has_exclude_cash_only_tolls_case() != HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET;
}
void CostingOptions::clear_has_has_exclude_cash_only_tolls() {
  _oneof_case_[69] = HAS_EXCLUDE_CASH_ONLY_TOLLS_NOT_SET;
}
bool CostingOptions::has_has_restriction_probability() const {
  return has_restriction_probability_case() != HAS_RESTRICTION_PROBABILITY_NOT_SET;
}
void CostingOptions::clear_has_has_restriction_probability() {
  _oneof_case_[70] = HAS_RESTRICTION_PROBABILITY_NOT_SET;
}
bool CostingOptions::has_has_costing() const {
  return has_costing_case() != HAS_COSTING_NOT_SET;
}
void CostingOptions::clear_has_has_costing() {
  _oneof_case_[71] = HAS_COSTING_NOT_SET;
}
bool CostingOptions::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
void CostingOptions::clear_has_has_name() {
  _oneof_case_[72] = HAS_NAME_NOT_SET;
}
bool CostingOptions::has_has_filter_closures() const {
  return has_filter_closures_case() != HAS_FILTER_CLOSURES_NOT_SET;
}
void CostingOptions::clear_has_has_filter_closures() {
  _oneof_case_[73] = HAS_FILTER_CLOSURES_NOT_SET;
}
CostingOptions::HasManeuverPenaltyCase CostingOptions::has_maneuver_penalty_case() const {
  return CostingOptions::HasManeuverPenaltyCase(_oneof_case_[0]);
}
CostingOptions::HasDestinationOnlyPenaltyCase CostingOptions::has_destination_only_penalty_case() const {
  return CostingOptions::HasDestinationOnlyPenaltyCase(_oneof_case_[1]);
}
CostingOptions::HasGateCostCase CostingOptions::has_gate_cost_case() const {
  return CostingOptions::HasGateCostCase(_oneof_case_[2]);
}
CostingOptions::HasGatePenaltyCase CostingOptions::has_gate_penalty_case() const {
  return CostingOptions::HasGatePenaltyCase(_oneof_case_[3]);
}
CostingOptions::HasTollBoothCostCase CostingOptions::has_toll_booth_cost_case() const {
  return CostingOptions::HasTollBoothCostCase(_oneof_case_[4]);
}
CostingOptions::HasTollBoothPenaltyCase CostingOptions::has_toll_booth_penalty_case() const {
  return CostingOptions::HasTollBoothPenaltyCase(_oneof_case_[5]);
}
CostingOptions::HasAlleyPenaltyCase CostingOptions::has_alley_penalty_case() const {
  return CostingOptions::HasAlleyPenaltyCase(_oneof_case_[6]);
}
CostingOptions::HasCountryCrossingCostCase CostingOptions::has_country_crossing_cost_case() const {
  return CostingOptions::HasCountryCrossingCostCase(_oneof_case_[7]);
}
CostingOptions::HasCountryCrossingPenaltyCase CostingOptions::has_country_crossing_penalty_case() const {
  return CostingOptions::HasCountryCrossingPenaltyCase(_oneof_case_[8]);
}
CostingOptions::HasFerryCostCase CostingOptions::has_ferry_cost_case() const {
  return CostingOptions::HasFerryCostCase(_oneof_case_[9]);
}
CostingOptions::HasAvoidBadSurfacesCase CostingOptions::has_avoid_bad_surfaces_case() const {
  return CostingOptions::HasAvoidBadSurfacesCase(_oneof_case_[10]);
}
CostingOptions::HasUseFerryCase CostingOptions::has_use_ferry_case() const {
  return CostingOptions::HasUseFerryCase(_oneof_case_[11]);
}
CostingOptions::HasUseHighwaysCase CostingOptions::has_use_highways_case() const {
  return CostingOptions::HasUseHighwaysCase(_oneof_case_[12]);
}
CostingOptions::HasUseTollsCase CostingOptions::has_use_tolls_case() const {
  return CostingOptions::HasUseTollsCase(_oneof_case_[13]);
}
CostingOptions::HasUseRoadsCase CostingOptions::has_use_roads_case() const {
  return CostingOptions::HasUseRoadsCase(_oneof_case_[14]);
}
CostingOptions::HasMaxDistanceCase CostingOptions::has_max_distance_case() const {
  return CostingOptions::HasMaxDistanceCase(_oneof_case_[15]);
}
CostingOptions::HasWalkingSpeedCase CostingOptions::has_walking_speed_case() const {
  return CostingOptions::HasWalkingSpeedCase(_oneof_case_[16]);
}
CostingOptions::HasStepPenaltyCase CostingOptions::has_step_penalty_case() const {
  return CostingOptions::HasStepPenaltyCase(_oneof_case_[17]);
}
CostingOptions::HasMaxGradeCase CostingOptions::has_max_grade_case() const {
  return CostingOptions::HasMaxGradeCase(_oneof_case_[18]);
}
CostingOptions::HasMaxHikingDifficultyCase CostingOptions::has_max_hiking_difficulty_case() const {
  return CostingOptions::HasMaxHikingDifficultyCase(_oneof_case_[19]);
}
CostingOptions::HasModeFactorCase CostingOptions::has_mode_factor_case() const {
  return CostingOptions::HasModeFactorCase(_oneof_case_[20]);
}
CostingOptions::HasWalkwayFactorCase CostingOptions::has_walkway_factor_case() const {
  return CostingOptions::HasWalkwayFactorCase(_oneof_case_[21]);
}
CostingOptions::HasSidewalkFactorCase CostingOptions::has_sidewalk_factor_case() const {
  return CostingOptions::HasSidewalkFactorCase(_oneof_case_[22]);
}
CostingOptions::HasAlleyFactorCase CostingOptions::has_alley_factor_case() const {
  return CostingOptions::HasAlleyFactorCase(_oneof_case_[23]);
}
CostingOptions::HasDrivewayFactorCase CostingOptions::has_driveway_factor_case() const {
  return CostingOptions::HasDrivewayFactorCase(_oneof_case_[24]);
}
CostingOptions::HasDrivewayPenaltyCase CostingOptions::has_driveway_penalty_case() const {
  return CostingOptions::HasDrivewayPenaltyCase(_oneof_case_[25]);
}
CostingOptions::HasTransitStartEndMaxDistanceCase CostingOptions::has_transit_start_end_max_distance_case() const {
  return CostingOptions::HasTransitStartEndMaxDistanceCase(_oneof_case_[26]);
}
CostingOptions::HasTransitTransferMaxDistanceCase CostingOptions::has_transit_transfer_max_distance_case() const {
  return CostingOptions::HasTransitTransferMaxDistanceCase(_oneof_case_[27]);
}
CostingOptions::HasTransportTypeCase CostingOptions::has_transport_type_case() const {
  return CostingOptions::HasTransportTypeCase(_oneof_case_[28]);
}
CostingOptions::HasTopSpeedCase CostingOptions::has_top_speed_case() const {
  return CostingOptions::HasTopSpeedCase(_oneof_case_[29]);
}
CostingOptions::HasUseHillsCase CostingOptions::has_use_hills_case() const {
  return CostingOptions::HasUseHillsCase(_oneof_case_[30]);
}
CostingOptions::HasUsePrimaryCase CostingOptions::has_use_primary_case() const {
  return CostingOptions::HasUsePrimaryCase(_oneof_case_[31]);
}
CostingOptions::HasUseTrailsCase CostingOptions::has_use_trails_case() const {
  return CostingOptions::HasUseTrailsCase(_oneof_case_[32]);
}
CostingOptions::HasLowClassPenaltyCase CostingOptions::has_low_class_penalty_case() const {
  return CostingOptions::HasLowClassPenaltyCase(_oneof_case_[33]);
}
CostingOptions::HasHazmatCase CostingOptions::has_hazmat_case() const {
  return CostingOptions::HasHazmatCase(_oneof_case_[34]);
}
CostingOptions::HasWeightCase CostingOptions::has_weight_case() const {
  return CostingOptions::HasWeightCase(_oneof_case_[35]);
}
CostingOptions::HasAxleLoadCase CostingOptions::has_axle_load_case() const {
  return CostingOptions::HasAxleLoadCase(_oneof_case_[36]);
}
CostingOptions::HasHeightCase CostingOptions::has_height_case() const {
  return CostingOptions::HasHeightCase(_oneof_case_[37]);
}
CostingOptions::HasWidthCase CostingOptions::has_width_case() const {
  return CostingOptions::HasWidthCase(_oneof_case_[38]);
}
CostingOptions::HasLengthCase CostingOptions::has_length_case() const {
  return CostingOptions::HasLengthCase(_oneof_case_[39]);
}
CostingOptions::HasCyclingSpeedCase CostingOptions::has_cycling_speed_case() const {
  return CostingOptions::HasCyclingSpeedCase(_oneof_case_[40]);
}
CostingOptions::HasWheelchairCase CostingOptions::has_wheelchair_case() const {
  return CostingOptions::HasWheelchairCase(_oneof_case_[41]);
}
CostingOptions::HasBicycleCase CostingOptions::has_bicycle_case() const {
  return CostingOptions::HasBicycleCase(_oneof_case_[42]);
}
CostingOptions::HasUseBusCase CostingOptions::has_use_bus_case() const {
  return CostingOptions::HasUseBusCase(_oneof_case_[43]);
}
CostingOptions::HasUseRailCase CostingOptions::has_use_rail_case() const {
  return CostingOptions::HasUseRailCase(_oneof_case_[44]);
}
CostingOptions::HasUseTransfersCase CostingOptions::has_use_transfers_case() const {
  return CostingOptions::HasUseTransfersCase(_oneof_case_[45]);
}
CostingOptions::HasTransferCostCase CostingOptions::has_transfer_cost_case() const {
  return CostingOptions::HasTransferCostCase(_oneof_case_[46]);
}
CostingOptions::HasTransferPenaltyCase CostingOptions::has_transfer_penalty_case() const {
  return CostingOptions::HasTransferPenaltyCase(_oneof_case_[47]);
}
CostingOptions::HasFlowMaskCase CostingOptions::has_flow_mask_case() const {
  return CostingOptions::HasFlowMaskCase(_oneof_case_[48]);
}
CostingOptions::HasBikeShareCostCase CostingOptions::has_bike_share_cost_case() const {
  return CostingOptions::HasBikeShareCostCase(_oneof_case_[49]);
}
CostingOptions::HasBikeSharePenaltyCase CostingOptions::has_bike_share_penalty_case() const {
  return CostingOptions::HasBikeSharePenaltyCase(_oneof_case_[50]);
}
CostingOptions::HasRailFerryCostCase CostingOptions::has_rail_ferry_cost_case() const {
  return CostingOptions::HasRailFerryCostCase(_oneof_case_[51]);
}
CostingOptions::HasUseRailFerryCase CostingOptions::has_use_rail_ferry_case() const {
  return CostingOptions::HasUseRailFerryCase(_oneof_case_[52]);
}
CostingOptions::HasIgnoreRestrictionsCase CostingOptions::has_ignore_restrictions_case() const {
  return CostingOptions::HasIgnoreRestrictionsCase(_oneof_case_[53]);
}
CostingOptions::HasIgnoreOnewaysCase CostingOptions::has_ignore_oneways_case() const {
  return CostingOptions::HasIgnoreOnewaysCase(_oneof_case_[54]);
}
CostingOptions::HasIgnoreAccessCase CostingOptions::has_ignore_access_case() const {
  return CostingOptions::HasIgnoreAccessCase(_oneof_case_[55]);
}
CostingOptions::HasIgnoreClosuresCase CostingOptions::has_ignore_closures_case() const {
  return CostingOptions::HasIgnoreClosuresCase(_oneof_case_[56]);
}
CostingOptions::HasShortestCase CostingOptions::has_shortest_case() const {
  return CostingOptions::HasShortestCase(_oneof_case_[57]);
}
CostingOptions::HasServicePenaltyCase CostingOptions::has_service_penalty_case() const {
  return CostingOptions::HasServicePenaltyCase(_oneof_case_[58]);
}
CostingOptions::HasUseTracksCase CostingOptions::has_use_tracks_case() const {
  return CostingOptions::HasUseTracksCase(_oneof_case_[59]);
}
CostingOptions::HasUseDistanceCase CostingOptions::has_use_distance_case() const {
  return CostingOptions::HasUseDistanceCase(_oneof_case_[60]);
}
CostingOptions::HasUseLivingStreetsCase CostingOptions::has_use_living_streets_case() const {
  return CostingOptions::HasUseLivingStreetsCase(_oneof_case_[61]);
}
CostingOptions::HasServiceFactorCase CostingOptions::has_service_factor_case() const {
  return CostingOptions::HasServiceFactorCase(_oneof_case_[62]);
}
CostingOptions::HasClosureFactorCase CostingOptions::has_closure_factor_case() const {
  return CostingOptions::HasClosureFactorCase(_oneof_case_[63]);
}
CostingOptions::HasPrivateAccessPenaltyCase CostingOptions::has_private_access_penalty_case() const {
  return CostingOptions::HasPrivateAccessPenaltyCase(_oneof_case_[64]);
}
CostingOptions::HasExcludeUnpavedCase CostingOptions::has_exclude_unpaved_case() const {
  return CostingOptions::HasExcludeUnpavedCase(_oneof_case_[65]);
}
CostingOptions::HasIncludeHotCase CostingOptions::has_include_hot_case() const {
  return CostingOptions::HasIncludeHotCase(_oneof_case_[66]);
}
CostingOptions::HasIncludeHov2Case CostingOptions::has_include_hov2_case() const {
  return CostingOptions::HasIncludeHov2Case(_oneof_case_[67]);
}
CostingOptions::HasIncludeHov3Case CostingOptions::has_include_hov3_case() const {
  return CostingOptions::HasIncludeHov3Case(_oneof_case_[68]);
}
CostingOptions::HasExcludeCashOnlyTollsCase CostingOptions::has_exclude_cash_only_tolls_case() const {
  return CostingOptions::HasExcludeCashOnlyTollsCase(_oneof_case_[69]);
}
CostingOptions::HasRestrictionProbabilityCase CostingOptions::has_restriction_probability_case() const {
  return CostingOptions::HasRestrictionProbabilityCase(_oneof_case_[70]);
}
CostingOptions::HasCostingCase CostingOptions::has_costing_case() const {
  return CostingOptions::HasCostingCase(_oneof_case_[71]);
}
CostingOptions::HasNameCase CostingOptions::has_name_case() const {
  return CostingOptions::HasNameCase(_oneof_case_[72]);
}
CostingOptions::HasFilterClosuresCase CostingOptions::has_filter_closures_case() const {
  return CostingOptions::HasFilterClosuresCase(_oneof_case_[73]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool Options_Units_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Options_Units Options::kilometers;
const Options_Units Options::miles;
const Options_Units Options::Units_MIN;
const Options_Units Options::Units_MAX;
const int Options::Units_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Options_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Options_Format Options::json;
const Options_Format Options::gpx;
const Options_Format Options::osrm;
const Options_Format Options::pbf;
const Options_Format Options::Format_MIN;
const Options_Format Options::Format_MAX;
const int Options::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Options_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Options_Action Options::route;
const Options_Action Options::locate;
const Options_Action Options::sources_to_targets;
const Options_Action Options::optimized_route;
const Options_Action Options::isochrone;
const Options_Action Options::trace_route;
const Options_Action Options::trace_attributes;
const Options_Action Options::height;
const Options_Action Options::transit_available;
const Options_Action Options::expansion;
const Options_Action Options::centroid;
const Options_Action Options::status;
const Options_Action Options::livespeed;
const Options_Action Options::Action_MIN;
const Options_Action Options::Action_MAX;
const int Options::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Options_DateTimeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Options_DateTimeType Options::current;
const Options_DateTimeType Options::depart_at;
const Options_DateTimeType Options::arrive_by;
const Options_DateTimeType Options::invariant;
const Options_DateTimeType Options::DateTimeType_MIN;
const Options_DateTimeType Options::DateTimeType_MAX;
const int Options::DateTimeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Options_ExpansionProperties_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Options_ExpansionProperties Options::costs;
const Options_ExpansionProperties Options::durations;
const Options_ExpansionProperties Options::distances;
const Options_ExpansionProperties Options::statuses;
const Options_ExpansionProperties Options::edge_ids;
const Options_ExpansionProperties Options::ExpansionProperties_MIN;
const Options_ExpansionProperties Options::ExpansionProperties_MAX;
const int Options::ExpansionProperties_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options_Ring::kCoordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options_Ring::Options_Ring()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Options.Ring)
}

void Options_Ring::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Options_Ring::Options_Ring(const Options_Ring& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Options.Ring)
}

void Options_Ring::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Options_Ring::~Options_Ring() {
  // @@protoc_insertion_point(destructor:valhalla.Options.Ring)
  SharedDtor();
}

void Options_Ring::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Options_Ring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Options_Ring& Options_Ring::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_options_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_options_2eproto();
#endif
  return *default_instance_;
}

Options_Ring* Options_Ring::default_instance_ = NULL;

Options_Ring* Options_Ring::New(::google::protobuf::Arena* arena) const {
  Options_Ring* n = new Options_Ring;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Options_Ring::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Options.Ring)
  coords_.Clear();
}

bool Options_Ring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Options.Ring)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .valhalla.LatLng coords = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_coords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_coords;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Options.Ring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Options.Ring)
  return false;
#undef DO_
}

void Options_Ring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Options.Ring)
  // repeated .valhalla.LatLng coords = 1;
  for (unsigned int i = 0, n = this->coords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->coords(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Options.Ring)
}

int Options_Ring::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Options.Ring)
  int total_size = 0;

  // repeated .valhalla.LatLng coords = 1;
  total_size += 1 * this->coords_size();
  for (int i = 0; i < this->coords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coords(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Options_Ring::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Options_Ring*>(&from));
}

void Options_Ring::MergeFrom(const Options_Ring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Options.Ring)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  coords_.MergeFrom(from.coords_);
}

void Options_Ring::CopyFrom(const Options_Ring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Options.Ring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options_Ring::IsInitialized() const {

  return true;
}

void Options_Ring::Swap(Options_Ring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options_Ring::InternalSwap(Options_Ring* other) {
  coords_.UnsafeArenaSwap(&other->coords_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Options_Ring::GetTypeName() const {
  return "valhalla.Options.Ring";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options::kUnitsFieldNumber;
const int Options::kLanguageFieldNumber;
const int Options::kDirectionsTypeFieldNumber;
const int Options::kFormatFieldNumber;
const int Options::kIdFieldNumber;
const int Options::kJsonpFieldNumber;
const int Options::kEncodedPolylineFieldNumber;
const int Options::kActionFieldNumber;
const int Options::kRangeFieldNumber;
const int Options::kVerboseFieldNumber;
const int Options::kCostingFieldNumber;
const int Options::kCostingOptionsFieldNumber;
const int Options::kLocationsFieldNumber;
const int Options::kExcludeLocationsFieldNumber;
const int Options::kSourcesFieldNumber;
const int Options::kTargetsFieldNumber;
const int Options::kDateTimeTypeFieldNumber;
const int Options::kDateTimeFieldNumber;
const int Options::kShapeFieldNumber;
const int Options::kResampleDistanceFieldNumber;
const int Options::kContoursFieldNumber;
const int Options::kPolygonsFieldNumber;
const int Options::kDenoiseFieldNumber;
const int Options::kGeneralizeFieldNumber;
const int Options::kShowLocationsFieldNumber;
const int Options::kTraceFieldNumber;
const int Options::kShapeMatchFieldNumber;
const int Options::kGpsAccuracyFieldNumber;
const int Options::kSearchRadiusFieldNumber;
const int Options::kTurnPenaltyFactorFieldNumber;
const int Options::kFilterActionFieldNumber;
const int Options::kFilterAttributesFieldNumber;
const int Options::kBreakageDistanceFieldNumber;
const int Options::kUseTimestampsFieldNumber;
const int Options::kShapeFormatFieldNumber;
const int Options::kAlternatesFieldNumber;
const int Options::kInterpolationDistanceFieldNumber;
const int Options::kGuidanceViewsFieldNumber;
const int Options::kHeightPrecisionFieldNumber;
const int Options::kRoundaboutExitsFieldNumber;
const int Options::kLinearReferencesFieldNumber;
const int Options::kRecostingsFieldNumber;
const int Options::kExcludePolygonsFieldNumber;
const int Options::kPrioritizeBidirectionalFieldNumber;
const int Options::kExpansionActionFieldNumber;
const int Options::kSkipOppositesFieldNumber;
const int Options::kExpansionPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options::Options()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:valhalla.Options)
}

void Options::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Options::Options(const Options& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:valhalla.Options)
}

void Options::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filter_action_ = 0;
  clear_has_has_units();
  clear_has_has_language();
  clear_has_has_directions_type();
  clear_has_has_format();
  clear_has_has_id();
  clear_has_has_jsonp();
  clear_has_has_encoded_polyline();
  clear_has_has_action();
  clear_has_has_range();
  clear_has_has_verbose();
  clear_has_has_costing();
  clear_has_has_date_time_type();
  clear_has_has_date_time();
  clear_has_has_resample_distance();
  clear_has_has_polygons();
  clear_has_has_denoise();
  clear_has_has_generalize();
  clear_has_has_show_locations();
  clear_has_has_shape_match();
  clear_has_has_gps_accuracy();
  clear_has_has_search_radius();
  clear_has_has_turn_penalty_factor();
  clear_has_has_breakage_distance();
  clear_has_has_use_timestamps();
  clear_has_has_shape_format();
  clear_has_has_alternates();
  clear_has_has_interpolation_distance();
  clear_has_has_guidance_views();
  clear_has_has_height_precision();
  clear_has_has_roundabout_exits();
  clear_has_has_linear_references();
  clear_has_has_prioritize_bidirectional();
  clear_has_has_expansion_action();
  clear_has_has_skip_opposites();
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:valhalla.Options)
  SharedDtor();
}

void Options::SharedDtor() {
  if (has_has_units()) {
    clear_has_units();
  }
  if (has_has_language()) {
    clear_has_language();
  }
  if (has_has_directions_type()) {
    clear_has_directions_type();
  }
  if (has_has_format()) {
    clear_has_format();
  }
  if (has_has_id()) {
    clear_has_id();
  }
  if (has_has_jsonp()) {
    clear_has_jsonp();
  }
  if (has_has_encoded_polyline()) {
    clear_has_encoded_polyline();
  }
  if (has_has_action()) {
    clear_has_action();
  }
  if (has_has_range()) {
    clear_has_range();
  }
  if (has_has_verbose()) {
    clear_has_verbose();
  }
  if (has_has_costing()) {
    clear_has_costing();
  }
  if (has_has_date_time_type()) {
    clear_has_date_time_type();
  }
  if (has_has_date_time()) {
    clear_has_date_time();
  }
  if (has_has_resample_distance()) {
    clear_has_resample_distance();
  }
  if (has_has_polygons()) {
    clear_has_polygons();
  }
  if (has_has_denoise()) {
    clear_has_denoise();
  }
  if (has_has_generalize()) {
    clear_has_generalize();
  }
  if (has_has_show_locations()) {
    clear_has_show_locations();
  }
  if (has_has_shape_match()) {
    clear_has_shape_match();
  }
  if (has_has_gps_accuracy()) {
    clear_has_gps_accuracy();
  }
  if (has_has_search_radius()) {
    clear_has_search_radius();
  }
  if (has_has_turn_penalty_factor()) {
    clear_has_turn_penalty_factor();
  }
  if (has_has_breakage_distance()) {
    clear_has_breakage_distance();
  }
  if (has_has_use_timestamps()) {
    clear_has_use_timestamps();
  }
  if (has_has_shape_format()) {
    clear_has_shape_format();
  }
  if (has_has_alternates()) {
    clear_has_alternates();
  }
  if (has_has_interpolation_distance()) {
    clear_has_interpolation_distance();
  }
  if (has_has_guidance_views()) {
    clear_has_guidance_views();
  }
  if (has_has_height_precision()) {
    clear_has_height_precision();
  }
  if (has_has_roundabout_exits()) {
    clear_has_roundabout_exits();
  }
  if (has_has_linear_references()) {
    clear_has_linear_references();
  }
  if (has_has_prioritize_bidirectional()) {
    clear_has_prioritize_bidirectional();
  }
  if (has_has_expansion_action()) {
    clear_has_expansion_action();
  }
  if (has_has_skip_opposites()) {
    clear_has_skip_opposites();
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Options::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Options& Options::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_options_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_options_2eproto();
#endif
  return *default_instance_;
}

Options* Options::default_instance_ = NULL;

Options* Options::New(::google::protobuf::Arena* arena) const {
  Options* n = new Options;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Options::clear_has_units() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_units_case()) {
    case kUnits: {
      // No need to clear
      break;
    }
    case HAS_UNITS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HAS_UNITS_NOT_SET;
}

void Options::clear_has_language() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_language_case()) {
    case kLanguage: {
      has_language_.language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_LANGUAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HAS_LANGUAGE_NOT_SET;
}

void Options::clear_has_directions_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_directions_type_case()) {
    case kDirectionsType: {
      // No need to clear
      break;
    }
    case HAS_DIRECTIONS_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = HAS_DIRECTIONS_TYPE_NOT_SET;
}

void Options::clear_has_format() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_format_case()) {
    case kFormat: {
      // No need to clear
      break;
    }
    case HAS_FORMAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = HAS_FORMAT_NOT_SET;
}

void Options::clear_has_id() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_id_case()) {
    case kId: {
      has_id_.id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = HAS_ID_NOT_SET;
}

void Options::clear_has_jsonp() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_jsonp_case()) {
    case kJsonp: {
      has_jsonp_.jsonp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_JSONP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = HAS_JSONP_NOT_SET;
}

void Options::clear_has_encoded_polyline() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_encoded_polyline_case()) {
    case kEncodedPolyline: {
      has_encoded_polyline_.encoded_polyline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_ENCODED_POLYLINE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = HAS_ENCODED_POLYLINE_NOT_SET;
}

void Options::clear_has_action() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_action_case()) {
    case kAction: {
      // No need to clear
      break;
    }
    case HAS_ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = HAS_ACTION_NOT_SET;
}

void Options::clear_has_range() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_range_case()) {
    case kRange: {
      // No need to clear
      break;
    }
    case HAS_RANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = HAS_RANGE_NOT_SET;
}

void Options::clear_has_verbose() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_verbose_case()) {
    case kVerbose: {
      // No need to clear
      break;
    }
    case HAS_VERBOSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = HAS_VERBOSE_NOT_SET;
}

void Options::clear_has_costing() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_costing_case()) {
    case kCosting: {
      // No need to clear
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = HAS_COSTING_NOT_SET;
}

void Options::clear_has_date_time_type() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_date_time_type_case()) {
    case kDateTimeType: {
      // No need to clear
      break;
    }
    case HAS_DATE_TIME_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = HAS_DATE_TIME_TYPE_NOT_SET;
}

void Options::clear_has_date_time() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_date_time_case()) {
    case kDateTime: {
      has_date_time_.date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[12] = HAS_DATE_TIME_NOT_SET;
}

void Options::clear_has_resample_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_resample_distance_case()) {
    case kResampleDistance: {
      // No need to clear
      break;
    }
    case HAS_RESAMPLE_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[13] = HAS_RESAMPLE_DISTANCE_NOT_SET;
}

void Options::clear_has_polygons() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_polygons_case()) {
    case kPolygons: {
      // No need to clear
      break;
    }
    case HAS_POLYGONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[14] = HAS_POLYGONS_NOT_SET;
}

void Options::clear_has_denoise() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_denoise_case()) {
    case kDenoise: {
      // No need to clear
      break;
    }
    case HAS_DENOISE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[15] = HAS_DENOISE_NOT_SET;
}

void Options::clear_has_generalize() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_generalize_case()) {
    case kGeneralize: {
      // No need to clear
      break;
    }
    case HAS_GENERALIZE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[16] = HAS_GENERALIZE_NOT_SET;
}

void Options::clear_has_show_locations() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_show_locations_case()) {
    case kShowLocations: {
      // No need to clear
      break;
    }
    case HAS_SHOW_LOCATIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[17] = HAS_SHOW_LOCATIONS_NOT_SET;
}

void Options::clear_has_shape_match() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_shape_match_case()) {
    case kShapeMatch: {
      // No need to clear
      break;
    }
    case HAS_SHAPE_MATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[18] = HAS_SHAPE_MATCH_NOT_SET;
}

void Options::clear_has_gps_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_gps_accuracy_case()) {
    case kGpsAccuracy: {
      // No need to clear
      break;
    }
    case HAS_GPS_ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[19] = HAS_GPS_ACCURACY_NOT_SET;
}

void Options::clear_has_search_radius() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_search_radius_case()) {
    case kSearchRadius: {
      // No need to clear
      break;
    }
    case HAS_SEARCH_RADIUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[20] = HAS_SEARCH_RADIUS_NOT_SET;
}

void Options::clear_has_turn_penalty_factor() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_turn_penalty_factor_case()) {
    case kTurnPenaltyFactor: {
      // No need to clear
      break;
    }
    case HAS_TURN_PENALTY_FACTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[21] = HAS_TURN_PENALTY_FACTOR_NOT_SET;
}

void Options::clear_has_breakage_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_breakage_distance_case()) {
    case kBreakageDistance: {
      // No need to clear
      break;
    }
    case HAS_BREAKAGE_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[22] = HAS_BREAKAGE_DISTANCE_NOT_SET;
}

void Options::clear_has_use_timestamps() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_use_timestamps_case()) {
    case kUseTimestamps: {
      // No need to clear
      break;
    }
    case HAS_USE_TIMESTAMPS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[23] = HAS_USE_TIMESTAMPS_NOT_SET;
}

void Options::clear_has_shape_format() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_shape_format_case()) {
    case kShapeFormat: {
      // No need to clear
      break;
    }
    case HAS_SHAPE_FORMAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[24] = HAS_SHAPE_FORMAT_NOT_SET;
}

void Options::clear_has_alternates() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_alternates_case()) {
    case kAlternates: {
      // No need to clear
      break;
    }
    case HAS_ALTERNATES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[25] = HAS_ALTERNATES_NOT_SET;
}

void Options::clear_has_interpolation_distance() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_interpolation_distance_case()) {
    case kInterpolationDistance: {
      // No need to clear
      break;
    }
    case HAS_INTERPOLATION_DISTANCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[26] = HAS_INTERPOLATION_DISTANCE_NOT_SET;
}

void Options::clear_has_guidance_views() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_guidance_views_case()) {
    case kGuidanceViews: {
      // No need to clear
      break;
    }
    case HAS_GUIDANCE_VIEWS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[27] = HAS_GUIDANCE_VIEWS_NOT_SET;
}

void Options::clear_has_height_precision() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_height_precision_case()) {
    case kHeightPrecision: {
      // No need to clear
      break;
    }
    case HAS_HEIGHT_PRECISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[28] = HAS_HEIGHT_PRECISION_NOT_SET;
}

void Options::clear_has_roundabout_exits() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_roundabout_exits_case()) {
    case kRoundaboutExits: {
      // No need to clear
      break;
    }
    case HAS_ROUNDABOUT_EXITS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[29] = HAS_ROUNDABOUT_EXITS_NOT_SET;
}

void Options::clear_has_linear_references() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_linear_references_case()) {
    case kLinearReferences: {
      // No need to clear
      break;
    }
    case HAS_LINEAR_REFERENCES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[30] = HAS_LINEAR_REFERENCES_NOT_SET;
}

void Options::clear_has_prioritize_bidirectional() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_prioritize_bidirectional_case()) {
    case kPrioritizeBidirectional: {
      // No need to clear
      break;
    }
    case HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[31] = HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET;
}

void Options::clear_has_expansion_action() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_expansion_action_case()) {
    case kExpansionAction: {
      // No need to clear
      break;
    }
    case HAS_EXPANSION_ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[32] = HAS_EXPANSION_ACTION_NOT_SET;
}

void Options::clear_has_skip_opposites() {
// @@protoc_insertion_point(one_of_clear_start:valhalla.Options)
  switch(has_skip_opposites_case()) {
    case kSkipOpposites: {
      // No need to clear
      break;
    }
    case HAS_SKIP_OPPOSITES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[33] = HAS_SKIP_OPPOSITES_NOT_SET;
}


void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Options)
  filter_action_ = 0;
  costing_options_.Clear();
  locations_.Clear();
  exclude_locations_.Clear();
  sources_.Clear();
  targets_.Clear();
  shape_.Clear();
  contours_.Clear();
  trace_.Clear();
  filter_attributes_.Clear();
  recostings_.Clear();
  exclude_polygons_.Clear();
  expansion_properties_.Clear();
  clear_has_units();
  clear_has_language();
  clear_has_directions_type();
  clear_has_format();
  clear_has_id();
  clear_has_jsonp();
  clear_has_encoded_polyline();
  clear_has_action();
  clear_has_range();
  clear_has_verbose();
  clear_has_costing();
  clear_has_date_time_type();
  clear_has_date_time();
  clear_has_resample_distance();
  clear_has_polygons();
  clear_has_denoise();
  clear_has_generalize();
  clear_has_show_locations();
  clear_has_shape_match();
  clear_has_gps_accuracy();
  clear_has_search_radius();
  clear_has_turn_penalty_factor();
  clear_has_breakage_distance();
  clear_has_use_timestamps();
  clear_has_shape_format();
  clear_has_alternates();
  clear_has_interpolation_distance();
  clear_has_guidance_views();
  clear_has_height_precision();
  clear_has_roundabout_exits();
  clear_has_linear_references();
  clear_has_prioritize_bidirectional();
  clear_has_expansion_action();
  clear_has_skip_opposites();
}

bool Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:valhalla.Options)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .valhalla.Options.Units units = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_units(static_cast< ::valhalla::Options_Units >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (tag == 18) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_directions_type;
        break;
      }

      // optional .valhalla.DirectionsType directions_type = 3;
      case 3: {
        if (tag == 24) {
         parse_directions_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directions_type(static_cast< ::valhalla::DirectionsType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_format;
        break;
      }

      // optional .valhalla.Options.Format format = 4;
      case 4: {
        if (tag == 32) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::valhalla::Options_Format >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (tag == 42) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_jsonp;
        break;
      }

      // optional string jsonp = 6;
      case 6: {
        if (tag == 50) {
         parse_jsonp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsonp().data(), this->jsonp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.jsonp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_encoded_polyline;
        break;
      }

      // optional string encoded_polyline = 7;
      case 7: {
        if (tag == 58) {
         parse_encoded_polyline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoded_polyline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->encoded_polyline().data(), this->encoded_polyline().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.encoded_polyline"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_action;
        break;
      }

      // optional .valhalla.Options.Action action = 8;
      case 8: {
        if (tag == 64) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::valhalla::Options_Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_range;
        break;
      }

      // optional bool range = 10;
      case 10: {
        if (tag == 80) {
         parse_range:
          clear_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_range_.range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_verbose;
        break;
      }

      // optional bool verbose = 11;
      case 11: {
        if (tag == 88) {
         parse_verbose:
          clear_has_verbose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_verbose_.verbose_)));
          set_has_verbose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_costing;
        break;
      }

      // optional .valhalla.Costing costing = 12;
      case 12: {
        if (tag == 96) {
         parse_costing:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_costing(static_cast< ::valhalla::Costing >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_costing_options;
        break;
      }

      // map<int32, .valhalla.CostingOptions> costing_options = 13;
      case 13: {
        if (tag == 106) {
         parse_costing_options:
          DO_(input->IncrementRecursionDepth());
         parse_loop_costing_options:
          Options_CostingOptionsEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::google::protobuf::int32, ::valhalla::CostingOptions,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions > > parser(&costing_options_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_costing_options;
        if (input->ExpectTag(114)) goto parse_loop_locations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Location locations = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_locations;
        if (input->ExpectTag(122)) goto parse_loop_exclude_locations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Location exclude_locations = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_exclude_locations;
        if (input->ExpectTag(130)) goto parse_loop_sources;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Location sources = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_sources;
        if (input->ExpectTag(138)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Location targets = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(144)) goto parse_date_time_type;
        break;
      }

      // optional .valhalla.Options.DateTimeType date_time_type = 18;
      case 18: {
        if (tag == 144) {
         parse_date_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_date_time_type(static_cast< ::valhalla::Options_DateTimeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_date_time;
        break;
      }

      // optional string date_time = 19;
      case 19: {
        if (tag == 154) {
         parse_date_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date_time().data(), this->date_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.date_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_shape;
        break;
      }

      // repeated .valhalla.Location shape = 20;
      case 20: {
        if (tag == 162) {
         parse_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(169)) goto parse_resample_distance;
        break;
      }

      // optional double resample_distance = 21;
      case 21: {
        if (tag == 169) {
         parse_resample_distance:
          clear_has_resample_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &has_resample_distance_.resample_distance_)));
          set_has_resample_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_contours;
        break;
      }

      // repeated .valhalla.Contour contours = 22;
      case 22: {
        if (tag == 178) {
         parse_contours:
          DO_(input->IncrementRecursionDepth());
         parse_loop_contours:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contours()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_contours;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(184)) goto parse_polygons;
        break;
      }

      // optional bool polygons = 23;
      case 23: {
        if (tag == 184) {
         parse_polygons:
          clear_has_polygons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_polygons_.polygons_)));
          set_has_polygons();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_denoise;
        break;
      }

      // optional float denoise = 24;
      case 24: {
        if (tag == 197) {
         parse_denoise:
          clear_has_denoise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_denoise_.denoise_)));
          set_has_denoise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_generalize;
        break;
      }

      // optional float generalize = 25;
      case 25: {
        if (tag == 205) {
         parse_generalize:
          clear_has_generalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_generalize_.generalize_)));
          set_has_generalize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_show_locations;
        break;
      }

      // optional bool show_locations = 26;
      case 26: {
        if (tag == 208) {
         parse_show_locations:
          clear_has_show_locations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_show_locations_.show_locations_)));
          set_has_show_locations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_trace;
        break;
      }

      // repeated .valhalla.Location trace = 27;
      case 27: {
        if (tag == 218) {
         parse_trace:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_trace;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(224)) goto parse_shape_match;
        break;
      }

      // optional .valhalla.ShapeMatch shape_match = 28;
      case 28: {
        if (tag == 224) {
         parse_shape_match:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_match(static_cast< ::valhalla::ShapeMatch >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_gps_accuracy;
        break;
      }

      // optional float gps_accuracy = 30;
      case 30: {
        if (tag == 245) {
         parse_gps_accuracy:
          clear_has_gps_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_gps_accuracy_.gps_accuracy_)));
          set_has_gps_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_search_radius;
        break;
      }

      // optional float search_radius = 31;
      case 31: {
        if (tag == 253) {
         parse_search_radius:
          clear_has_search_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_search_radius_.search_radius_)));
          set_has_search_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_turn_penalty_factor;
        break;
      }

      // optional float turn_penalty_factor = 32;
      case 32: {
        if (tag == 261) {
         parse_turn_penalty_factor:
          clear_has_turn_penalty_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_turn_penalty_factor_.turn_penalty_factor_)));
          set_has_turn_penalty_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_filter_action;
        break;
      }

      // optional .valhalla.FilterAction filter_action = 33;
      case 33: {
        if (tag == 264) {
         parse_filter_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_action(static_cast< ::valhalla::FilterAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_filter_attributes;
        break;
      }

      // repeated string filter_attributes = 34;
      case 34: {
        if (tag == 274) {
         parse_filter_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filter_attributes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter_attributes(this->filter_attributes_size() - 1).data(),
            this->filter_attributes(this->filter_attributes_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "valhalla.Options.filter_attributes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_filter_attributes;
        if (input->ExpectTag(293)) goto parse_breakage_distance;
        break;
      }

      // optional float breakage_distance = 36;
      case 36: {
        if (tag == 293) {
         parse_breakage_distance:
          clear_has_breakage_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_breakage_distance_.breakage_distance_)));
          set_has_breakage_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_use_timestamps;
        break;
      }

      // optional bool use_timestamps = 37;
      case 37: {
        if (tag == 296) {
         parse_use_timestamps:
          clear_has_use_timestamps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_use_timestamps_.use_timestamps_)));
          set_has_use_timestamps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_shape_format;
        break;
      }

      // optional .valhalla.ShapeFormat shape_format = 38;
      case 38: {
        if (tag == 304) {
         parse_shape_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_format(static_cast< ::valhalla::ShapeFormat >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_alternates;
        break;
      }

      // optional uint32 alternates = 39;
      case 39: {
        if (tag == 312) {
         parse_alternates:
          clear_has_alternates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_alternates_.alternates_)));
          set_has_alternates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_interpolation_distance;
        break;
      }

      // optional float interpolation_distance = 40;
      case 40: {
        if (tag == 325) {
         parse_interpolation_distance:
          clear_has_interpolation_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &has_interpolation_distance_.interpolation_distance_)));
          set_has_interpolation_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_guidance_views;
        break;
      }

      // optional bool guidance_views = 41;
      case 41: {
        if (tag == 328) {
         parse_guidance_views:
          clear_has_guidance_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_guidance_views_.guidance_views_)));
          set_has_guidance_views();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_height_precision;
        break;
      }

      // optional uint32 height_precision = 43;
      case 43: {
        if (tag == 344) {
         parse_height_precision:
          clear_has_height_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_height_precision_.height_precision_)));
          set_has_height_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_roundabout_exits;
        break;
      }

      // optional bool roundabout_exits = 44;
      case 44: {
        if (tag == 352) {
         parse_roundabout_exits:
          clear_has_roundabout_exits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_roundabout_exits_.roundabout_exits_)));
          set_has_roundabout_exits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_linear_references;
        break;
      }

      // optional bool linear_references = 45;
      case 45: {
        if (tag == 360) {
         parse_linear_references:
          clear_has_linear_references();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_linear_references_.linear_references_)));
          set_has_linear_references();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_recostings;
        break;
      }

      // repeated .valhalla.CostingOptions recostings = 46;
      case 46: {
        if (tag == 370) {
         parse_recostings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_recostings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recostings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_loop_recostings;
        if (input->ExpectTag(378)) goto parse_loop_exclude_polygons;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .valhalla.Options.Ring exclude_polygons = 47;
      case 47: {
        if (tag == 378) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exclude_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exclude_polygons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_loop_exclude_polygons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(384)) goto parse_prioritize_bidirectional;
        break;
      }

      // optional bool prioritize_bidirectional = 48;
      case 48: {
        if (tag == 384) {
         parse_prioritize_bidirectional:
          clear_has_prioritize_bidirectional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_prioritize_bidirectional_.prioritize_bidirectional_)));
          set_has_prioritize_bidirectional();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_expansion_action;
        break;
      }

      // optional .valhalla.Options.Action expansion_action = 49;
      case 49: {
        if (tag == 392) {
         parse_expansion_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_expansion_action(static_cast< ::valhalla::Options_Action >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_skip_opposites;
        break;
      }

      // optional bool skip_opposites = 50;
      case 50: {
        if (tag == 400) {
         parse_skip_opposites:
          clear_has_skip_opposites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_skip_opposites_.skip_opposites_)));
          set_has_skip_opposites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_expansion_properties;
        break;
      }

      // repeated .valhalla.Options.ExpansionProperties expansion_properties = 51;
      case 51: {
        if (tag == 410) {
         parse_expansion_properties:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_expansion_properties(static_cast< ::valhalla::Options_ExpansionProperties >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 408) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_expansion_properties(static_cast< ::valhalla::Options_ExpansionProperties >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:valhalla.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:valhalla.Options)
  return false;
#undef DO_
}

void Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:valhalla.Options)
  // optional .valhalla.Options.Units units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->units(), output);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language(), output);
  }

  // optional .valhalla.DirectionsType directions_type = 3;
  if (has_directions_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->directions_type(), output);
  }

  // optional .valhalla.Options.Format format = 4;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id(), output);
  }

  // optional string jsonp = 6;
  if (has_jsonp()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsonp().data(), this->jsonp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.jsonp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->jsonp(), output);
  }

  // optional string encoded_polyline = 7;
  if (has_encoded_polyline()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->encoded_polyline().data(), this->encoded_polyline().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.encoded_polyline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->encoded_polyline(), output);
  }

  // optional .valhalla.Options.Action action = 8;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->action(), output);
  }

  // optional bool range = 10;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->range(), output);
  }

  // optional bool verbose = 11;
  if (has_verbose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->verbose(), output);
  }

  // optional .valhalla.Costing costing = 12;
  if (has_costing()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->costing(), output);
  }

  // map<int32, .valhalla.CostingOptions> costing_options = 13;
  if (!this->costing_options().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->costing_options().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->costing_options().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >::const_iterator
          it = this->costing_options().begin();
          it != this->costing_options().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Options_CostingOptionsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(costing_options_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Options_CostingOptionsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >::const_iterator
          it = this->costing_options().begin();
          it != this->costing_options().end(); ++it) {
        entry.reset(costing_options_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            13, *entry, output);
      }
    }
  }

  // repeated .valhalla.Location locations = 14;
  for (unsigned int i = 0, n = this->locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->locations(i), output);
  }

  // repeated .valhalla.Location exclude_locations = 15;
  for (unsigned int i = 0, n = this->exclude_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->exclude_locations(i), output);
  }

  // repeated .valhalla.Location sources = 16;
  for (unsigned int i = 0, n = this->sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->sources(i), output);
  }

  // repeated .valhalla.Location targets = 17;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->targets(i), output);
  }

  // optional .valhalla.Options.DateTimeType date_time_type = 18;
  if (has_date_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->date_time_type(), output);
  }

  // optional string date_time = 19;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date_time().data(), this->date_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.date_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->date_time(), output);
  }

  // repeated .valhalla.Location shape = 20;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->shape(i), output);
  }

  // optional double resample_distance = 21;
  if (has_resample_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->resample_distance(), output);
  }

  // repeated .valhalla.Contour contours = 22;
  for (unsigned int i = 0, n = this->contours_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->contours(i), output);
  }

  // optional bool polygons = 23;
  if (has_polygons()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->polygons(), output);
  }

  // optional float denoise = 24;
  if (has_denoise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->denoise(), output);
  }

  // optional float generalize = 25;
  if (has_generalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->generalize(), output);
  }

  // optional bool show_locations = 26;
  if (has_show_locations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->show_locations(), output);
  }

  // repeated .valhalla.Location trace = 27;
  for (unsigned int i = 0, n = this->trace_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->trace(i), output);
  }

  // optional .valhalla.ShapeMatch shape_match = 28;
  if (has_shape_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->shape_match(), output);
  }

  // optional float gps_accuracy = 30;
  if (has_gps_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->gps_accuracy(), output);
  }

  // optional float search_radius = 31;
  if (has_search_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->search_radius(), output);
  }

  // optional float turn_penalty_factor = 32;
  if (has_turn_penalty_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->turn_penalty_factor(), output);
  }

  // optional .valhalla.FilterAction filter_action = 33;
  if (this->filter_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->filter_action(), output);
  }

  // repeated string filter_attributes = 34;
  for (int i = 0; i < this->filter_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter_attributes(i).data(), this->filter_attributes(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "valhalla.Options.filter_attributes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->filter_attributes(i), output);
  }

  // optional float breakage_distance = 36;
  if (has_breakage_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->breakage_distance(), output);
  }

  // optional bool use_timestamps = 37;
  if (has_use_timestamps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->use_timestamps(), output);
  }

  // optional .valhalla.ShapeFormat shape_format = 38;
  if (has_shape_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->shape_format(), output);
  }

  // optional uint32 alternates = 39;
  if (has_alternates()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->alternates(), output);
  }

  // optional float interpolation_distance = 40;
  if (has_interpolation_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->interpolation_distance(), output);
  }

  // optional bool guidance_views = 41;
  if (has_guidance_views()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->guidance_views(), output);
  }

  // optional uint32 height_precision = 43;
  if (has_height_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->height_precision(), output);
  }

  // optional bool roundabout_exits = 44;
  if (has_roundabout_exits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->roundabout_exits(), output);
  }

  // optional bool linear_references = 45;
  if (has_linear_references()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->linear_references(), output);
  }

  // repeated .valhalla.CostingOptions recostings = 46;
  for (unsigned int i = 0, n = this->recostings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->recostings(i), output);
  }

  // repeated .valhalla.Options.Ring exclude_polygons = 47;
  for (unsigned int i = 0, n = this->exclude_polygons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, this->exclude_polygons(i), output);
  }

  // optional bool prioritize_bidirectional = 48;
  if (has_prioritize_bidirectional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->prioritize_bidirectional(), output);
  }

  // optional .valhalla.Options.Action expansion_action = 49;
  if (has_expansion_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->expansion_action(), output);
  }

  // optional bool skip_opposites = 50;
  if (has_skip_opposites()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->skip_opposites(), output);
  }

  // repeated .valhalla.Options.ExpansionProperties expansion_properties = 51;
  if (this->expansion_properties_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_expansion_properties_cached_byte_size_);
  }
  for (int i = 0; i < this->expansion_properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->expansion_properties(i), output);
  }

  // @@protoc_insertion_point(serialize_end:valhalla.Options)
}

int Options::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.Options)
  int total_size = 0;

  // optional .valhalla.FilterAction filter_action = 33;
  if (this->filter_action() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_action());
  }

  // map<int32, .valhalla.CostingOptions> costing_options = 13;
  total_size += 1 * this->costing_options_size();
  {
    ::google::protobuf::scoped_ptr<Options_CostingOptionsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >::const_iterator
        it = this->costing_options().begin();
        it != this->costing_options().end(); ++it) {
      entry.reset(costing_options_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .valhalla.Location locations = 14;
  total_size += 1 * this->locations_size();
  for (int i = 0; i < this->locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->locations(i));
  }

  // repeated .valhalla.Location exclude_locations = 15;
  total_size += 1 * this->exclude_locations_size();
  for (int i = 0; i < this->exclude_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude_locations(i));
  }

  // repeated .valhalla.Location sources = 16;
  total_size += 2 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sources(i));
  }

  // repeated .valhalla.Location targets = 17;
  total_size += 2 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  // repeated .valhalla.Location shape = 20;
  total_size += 2 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  // repeated .valhalla.Contour contours = 22;
  total_size += 2 * this->contours_size();
  for (int i = 0; i < this->contours_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contours(i));
  }

  // repeated .valhalla.Location trace = 27;
  total_size += 2 * this->trace_size();
  for (int i = 0; i < this->trace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trace(i));
  }

  // repeated string filter_attributes = 34;
  total_size += 2 * this->filter_attributes_size();
  for (int i = 0; i < this->filter_attributes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filter_attributes(i));
  }

  // repeated .valhalla.CostingOptions recostings = 46;
  total_size += 2 * this->recostings_size();
  for (int i = 0; i < this->recostings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recostings(i));
  }

  // repeated .valhalla.Options.Ring exclude_polygons = 47;
  total_size += 2 * this->exclude_polygons_size();
  for (int i = 0; i < this->exclude_polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exclude_polygons(i));
  }

  // repeated .valhalla.Options.ExpansionProperties expansion_properties = 51;
  {
    int data_size = 0;
    for (int i = 0; i < this->expansion_properties_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->expansion_properties(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _expansion_properties_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (has_units_case()) {
    // optional .valhalla.Options.Units units = 1;
    case kUnits: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->units());
      break;
    }
    case HAS_UNITS_NOT_SET: {
      break;
    }
  }
  switch (has_language_case()) {
    // optional string language = 2;
    case kLanguage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
      break;
    }
    case HAS_LANGUAGE_NOT_SET: {
      break;
    }
  }
  switch (has_directions_type_case()) {
    // optional .valhalla.DirectionsType directions_type = 3;
    case kDirectionsType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->directions_type());
      break;
    }
    case HAS_DIRECTIONS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_format_case()) {
    // optional .valhalla.Options.Format format = 4;
    case kFormat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
      break;
    }
    case HAS_FORMAT_NOT_SET: {
      break;
    }
  }
  switch (has_id_case()) {
    // optional string id = 5;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  switch (has_jsonp_case()) {
    // optional string jsonp = 6;
    case kJsonp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonp());
      break;
    }
    case HAS_JSONP_NOT_SET: {
      break;
    }
  }
  switch (has_encoded_polyline_case()) {
    // optional string encoded_polyline = 7;
    case kEncodedPolyline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoded_polyline());
      break;
    }
    case HAS_ENCODED_POLYLINE_NOT_SET: {
      break;
    }
  }
  switch (has_action_case()) {
    // optional .valhalla.Options.Action action = 8;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
      break;
    }
    case HAS_ACTION_NOT_SET: {
      break;
    }
  }
  switch (has_range_case()) {
    // optional bool range = 10;
    case kRange: {
      total_size += 1 + 1;
      break;
    }
    case HAS_RANGE_NOT_SET: {
      break;
    }
  }
  switch (has_verbose_case()) {
    // optional bool verbose = 11;
    case kVerbose: {
      total_size += 1 + 1;
      break;
    }
    case HAS_VERBOSE_NOT_SET: {
      break;
    }
  }
  switch (has_costing_case()) {
    // optional .valhalla.Costing costing = 12;
    case kCosting: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->costing());
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  switch (has_date_time_type_case()) {
    // optional .valhalla.Options.DateTimeType date_time_type = 18;
    case kDateTimeType: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->date_time_type());
      break;
    }
    case HAS_DATE_TIME_TYPE_NOT_SET: {
      break;
    }
  }
  switch (has_date_time_case()) {
    // optional string date_time = 19;
    case kDateTime: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (has_resample_distance_case()) {
    // optional double resample_distance = 21;
    case kResampleDistance: {
      total_size += 2 + 8;
      break;
    }
    case HAS_RESAMPLE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_polygons_case()) {
    // optional bool polygons = 23;
    case kPolygons: {
      total_size += 2 + 1;
      break;
    }
    case HAS_POLYGONS_NOT_SET: {
      break;
    }
  }
  switch (has_denoise_case()) {
    // optional float denoise = 24;
    case kDenoise: {
      total_size += 2 + 4;
      break;
    }
    case HAS_DENOISE_NOT_SET: {
      break;
    }
  }
  switch (has_generalize_case()) {
    // optional float generalize = 25;
    case kGeneralize: {
      total_size += 2 + 4;
      break;
    }
    case HAS_GENERALIZE_NOT_SET: {
      break;
    }
  }
  switch (has_show_locations_case()) {
    // optional bool show_locations = 26;
    case kShowLocations: {
      total_size += 2 + 1;
      break;
    }
    case HAS_SHOW_LOCATIONS_NOT_SET: {
      break;
    }
  }
  switch (has_shape_match_case()) {
    // optional .valhalla.ShapeMatch shape_match = 28;
    case kShapeMatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_match());
      break;
    }
    case HAS_SHAPE_MATCH_NOT_SET: {
      break;
    }
  }
  switch (has_gps_accuracy_case()) {
    // optional float gps_accuracy = 30;
    case kGpsAccuracy: {
      total_size += 2 + 4;
      break;
    }
    case HAS_GPS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (has_search_radius_case()) {
    // optional float search_radius = 31;
    case kSearchRadius: {
      total_size += 2 + 4;
      break;
    }
    case HAS_SEARCH_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (has_turn_penalty_factor_case()) {
    // optional float turn_penalty_factor = 32;
    case kTurnPenaltyFactor: {
      total_size += 2 + 4;
      break;
    }
    case HAS_TURN_PENALTY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (has_breakage_distance_case()) {
    // optional float breakage_distance = 36;
    case kBreakageDistance: {
      total_size += 2 + 4;
      break;
    }
    case HAS_BREAKAGE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_use_timestamps_case()) {
    // optional bool use_timestamps = 37;
    case kUseTimestamps: {
      total_size += 2 + 1;
      break;
    }
    case HAS_USE_TIMESTAMPS_NOT_SET: {
      break;
    }
  }
  switch (has_shape_format_case()) {
    // optional .valhalla.ShapeFormat shape_format = 38;
    case kShapeFormat: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_format());
      break;
    }
    case HAS_SHAPE_FORMAT_NOT_SET: {
      break;
    }
  }
  switch (has_alternates_case()) {
    // optional uint32 alternates = 39;
    case kAlternates: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alternates());
      break;
    }
    case HAS_ALTERNATES_NOT_SET: {
      break;
    }
  }
  switch (has_interpolation_distance_case()) {
    // optional float interpolation_distance = 40;
    case kInterpolationDistance: {
      total_size += 2 + 4;
      break;
    }
    case HAS_INTERPOLATION_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (has_guidance_views_case()) {
    // optional bool guidance_views = 41;
    case kGuidanceViews: {
      total_size += 2 + 1;
      break;
    }
    case HAS_GUIDANCE_VIEWS_NOT_SET: {
      break;
    }
  }
  switch (has_height_precision_case()) {
    // optional uint32 height_precision = 43;
    case kHeightPrecision: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height_precision());
      break;
    }
    case HAS_HEIGHT_PRECISION_NOT_SET: {
      break;
    }
  }
  switch (has_roundabout_exits_case()) {
    // optional bool roundabout_exits = 44;
    case kRoundaboutExits: {
      total_size += 2 + 1;
      break;
    }
    case HAS_ROUNDABOUT_EXITS_NOT_SET: {
      break;
    }
  }
  switch (has_linear_references_case()) {
    // optional bool linear_references = 45;
    case kLinearReferences: {
      total_size += 2 + 1;
      break;
    }
    case HAS_LINEAR_REFERENCES_NOT_SET: {
      break;
    }
  }
  switch (has_prioritize_bidirectional_case()) {
    // optional bool prioritize_bidirectional = 48;
    case kPrioritizeBidirectional: {
      total_size += 2 + 1;
      break;
    }
    case HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET: {
      break;
    }
  }
  switch (has_expansion_action_case()) {
    // optional .valhalla.Options.Action expansion_action = 49;
    case kExpansionAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expansion_action());
      break;
    }
    case HAS_EXPANSION_ACTION_NOT_SET: {
      break;
    }
  }
  switch (has_skip_opposites_case()) {
    // optional bool skip_opposites = 50;
    case kSkipOpposites: {
      total_size += 2 + 1;
      break;
    }
    case HAS_SKIP_OPPOSITES_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Options::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Options*>(&from));
}

void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Options)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  costing_options_.MergeFrom(from.costing_options_);
  locations_.MergeFrom(from.locations_);
  exclude_locations_.MergeFrom(from.exclude_locations_);
  sources_.MergeFrom(from.sources_);
  targets_.MergeFrom(from.targets_);
  shape_.MergeFrom(from.shape_);
  contours_.MergeFrom(from.contours_);
  trace_.MergeFrom(from.trace_);
  filter_attributes_.MergeFrom(from.filter_attributes_);
  recostings_.MergeFrom(from.recostings_);
  exclude_polygons_.MergeFrom(from.exclude_polygons_);
  expansion_properties_.MergeFrom(from.expansion_properties_);
  switch (from.has_units_case()) {
    case kUnits: {
      set_units(from.units());
      break;
    }
    case HAS_UNITS_NOT_SET: {
      break;
    }
  }
  switch (from.has_language_case()) {
    case kLanguage: {
      set_language(from.language());
      break;
    }
    case HAS_LANGUAGE_NOT_SET: {
      break;
    }
  }
  switch (from.has_directions_type_case()) {
    case kDirectionsType: {
      set_directions_type(from.directions_type());
      break;
    }
    case HAS_DIRECTIONS_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_format_case()) {
    case kFormat: {
      set_format(from.format());
      break;
    }
    case HAS_FORMAT_NOT_SET: {
      break;
    }
  }
  switch (from.has_id_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case HAS_ID_NOT_SET: {
      break;
    }
  }
  switch (from.has_jsonp_case()) {
    case kJsonp: {
      set_jsonp(from.jsonp());
      break;
    }
    case HAS_JSONP_NOT_SET: {
      break;
    }
  }
  switch (from.has_encoded_polyline_case()) {
    case kEncodedPolyline: {
      set_encoded_polyline(from.encoded_polyline());
      break;
    }
    case HAS_ENCODED_POLYLINE_NOT_SET: {
      break;
    }
  }
  switch (from.has_action_case()) {
    case kAction: {
      set_action(from.action());
      break;
    }
    case HAS_ACTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_range_case()) {
    case kRange: {
      set_range(from.range());
      break;
    }
    case HAS_RANGE_NOT_SET: {
      break;
    }
  }
  switch (from.has_verbose_case()) {
    case kVerbose: {
      set_verbose(from.verbose());
      break;
    }
    case HAS_VERBOSE_NOT_SET: {
      break;
    }
  }
  switch (from.has_costing_case()) {
    case kCosting: {
      set_costing(from.costing());
      break;
    }
    case HAS_COSTING_NOT_SET: {
      break;
    }
  }
  switch (from.has_date_time_type_case()) {
    case kDateTimeType: {
      set_date_time_type(from.date_time_type());
      break;
    }
    case HAS_DATE_TIME_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.has_date_time_case()) {
    case kDateTime: {
      set_date_time(from.date_time());
      break;
    }
    case HAS_DATE_TIME_NOT_SET: {
      break;
    }
  }
  switch (from.has_resample_distance_case()) {
    case kResampleDistance: {
      set_resample_distance(from.resample_distance());
      break;
    }
    case HAS_RESAMPLE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_polygons_case()) {
    case kPolygons: {
      set_polygons(from.polygons());
      break;
    }
    case HAS_POLYGONS_NOT_SET: {
      break;
    }
  }
  switch (from.has_denoise_case()) {
    case kDenoise: {
      set_denoise(from.denoise());
      break;
    }
    case HAS_DENOISE_NOT_SET: {
      break;
    }
  }
  switch (from.has_generalize_case()) {
    case kGeneralize: {
      set_generalize(from.generalize());
      break;
    }
    case HAS_GENERALIZE_NOT_SET: {
      break;
    }
  }
  switch (from.has_show_locations_case()) {
    case kShowLocations: {
      set_show_locations(from.show_locations());
      break;
    }
    case HAS_SHOW_LOCATIONS_NOT_SET: {
      break;
    }
  }
  switch (from.has_shape_match_case()) {
    case kShapeMatch: {
      set_shape_match(from.shape_match());
      break;
    }
    case HAS_SHAPE_MATCH_NOT_SET: {
      break;
    }
  }
  switch (from.has_gps_accuracy_case()) {
    case kGpsAccuracy: {
      set_gps_accuracy(from.gps_accuracy());
      break;
    }
    case HAS_GPS_ACCURACY_NOT_SET: {
      break;
    }
  }
  switch (from.has_search_radius_case()) {
    case kSearchRadius: {
      set_search_radius(from.search_radius());
      break;
    }
    case HAS_SEARCH_RADIUS_NOT_SET: {
      break;
    }
  }
  switch (from.has_turn_penalty_factor_case()) {
    case kTurnPenaltyFactor: {
      set_turn_penalty_factor(from.turn_penalty_factor());
      break;
    }
    case HAS_TURN_PENALTY_FACTOR_NOT_SET: {
      break;
    }
  }
  switch (from.has_breakage_distance_case()) {
    case kBreakageDistance: {
      set_breakage_distance(from.breakage_distance());
      break;
    }
    case HAS_BREAKAGE_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_use_timestamps_case()) {
    case kUseTimestamps: {
      set_use_timestamps(from.use_timestamps());
      break;
    }
    case HAS_USE_TIMESTAMPS_NOT_SET: {
      break;
    }
  }
  switch (from.has_shape_format_case()) {
    case kShapeFormat: {
      set_shape_format(from.shape_format());
      break;
    }
    case HAS_SHAPE_FORMAT_NOT_SET: {
      break;
    }
  }
  switch (from.has_alternates_case()) {
    case kAlternates: {
      set_alternates(from.alternates());
      break;
    }
    case HAS_ALTERNATES_NOT_SET: {
      break;
    }
  }
  switch (from.has_interpolation_distance_case()) {
    case kInterpolationDistance: {
      set_interpolation_distance(from.interpolation_distance());
      break;
    }
    case HAS_INTERPOLATION_DISTANCE_NOT_SET: {
      break;
    }
  }
  switch (from.has_guidance_views_case()) {
    case kGuidanceViews: {
      set_guidance_views(from.guidance_views());
      break;
    }
    case HAS_GUIDANCE_VIEWS_NOT_SET: {
      break;
    }
  }
  switch (from.has_height_precision_case()) {
    case kHeightPrecision: {
      set_height_precision(from.height_precision());
      break;
    }
    case HAS_HEIGHT_PRECISION_NOT_SET: {
      break;
    }
  }
  switch (from.has_roundabout_exits_case()) {
    case kRoundaboutExits: {
      set_roundabout_exits(from.roundabout_exits());
      break;
    }
    case HAS_ROUNDABOUT_EXITS_NOT_SET: {
      break;
    }
  }
  switch (from.has_linear_references_case()) {
    case kLinearReferences: {
      set_linear_references(from.linear_references());
      break;
    }
    case HAS_LINEAR_REFERENCES_NOT_SET: {
      break;
    }
  }
  switch (from.has_prioritize_bidirectional_case()) {
    case kPrioritizeBidirectional: {
      set_prioritize_bidirectional(from.prioritize_bidirectional());
      break;
    }
    case HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET: {
      break;
    }
  }
  switch (from.has_expansion_action_case()) {
    case kExpansionAction: {
      set_expansion_action(from.expansion_action());
      break;
    }
    case HAS_EXPANSION_ACTION_NOT_SET: {
      break;
    }
  }
  switch (from.has_skip_opposites_case()) {
    case kSkipOpposites: {
      set_skip_opposites(from.skip_opposites());
      break;
    }
    case HAS_SKIP_OPPOSITES_NOT_SET: {
      break;
    }
  }
  if (from.filter_action() != 0) {
    set_filter_action(from.filter_action());
  }
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {

  return true;
}

void Options::Swap(Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options::InternalSwap(Options* other) {
  costing_options_.Swap(&other->costing_options_);
  locations_.UnsafeArenaSwap(&other->locations_);
  exclude_locations_.UnsafeArenaSwap(&other->exclude_locations_);
  sources_.UnsafeArenaSwap(&other->sources_);
  targets_.UnsafeArenaSwap(&other->targets_);
  shape_.UnsafeArenaSwap(&other->shape_);
  contours_.UnsafeArenaSwap(&other->contours_);
  trace_.UnsafeArenaSwap(&other->trace_);
  std::swap(filter_action_, other->filter_action_);
  filter_attributes_.UnsafeArenaSwap(&other->filter_attributes_);
  recostings_.UnsafeArenaSwap(&other->recostings_);
  exclude_polygons_.UnsafeArenaSwap(&other->exclude_polygons_);
  expansion_properties_.UnsafeArenaSwap(&other->expansion_properties_);
  std::swap(has_units_, other->has_units_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(has_language_, other->has_language_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(has_directions_type_, other->has_directions_type_);
  std::swap(_oneof_case_[2], other->_oneof_case_[2]);
  std::swap(has_format_, other->has_format_);
  std::swap(_oneof_case_[3], other->_oneof_case_[3]);
  std::swap(has_id_, other->has_id_);
  std::swap(_oneof_case_[4], other->_oneof_case_[4]);
  std::swap(has_jsonp_, other->has_jsonp_);
  std::swap(_oneof_case_[5], other->_oneof_case_[5]);
  std::swap(has_encoded_polyline_, other->has_encoded_polyline_);
  std::swap(_oneof_case_[6], other->_oneof_case_[6]);
  std::swap(has_action_, other->has_action_);
  std::swap(_oneof_case_[7], other->_oneof_case_[7]);
  std::swap(has_range_, other->has_range_);
  std::swap(_oneof_case_[8], other->_oneof_case_[8]);
  std::swap(has_verbose_, other->has_verbose_);
  std::swap(_oneof_case_[9], other->_oneof_case_[9]);
  std::swap(has_costing_, other->has_costing_);
  std::swap(_oneof_case_[10], other->_oneof_case_[10]);
  std::swap(has_date_time_type_, other->has_date_time_type_);
  std::swap(_oneof_case_[11], other->_oneof_case_[11]);
  std::swap(has_date_time_, other->has_date_time_);
  std::swap(_oneof_case_[12], other->_oneof_case_[12]);
  std::swap(has_resample_distance_, other->has_resample_distance_);
  std::swap(_oneof_case_[13], other->_oneof_case_[13]);
  std::swap(has_polygons_, other->has_polygons_);
  std::swap(_oneof_case_[14], other->_oneof_case_[14]);
  std::swap(has_denoise_, other->has_denoise_);
  std::swap(_oneof_case_[15], other->_oneof_case_[15]);
  std::swap(has_generalize_, other->has_generalize_);
  std::swap(_oneof_case_[16], other->_oneof_case_[16]);
  std::swap(has_show_locations_, other->has_show_locations_);
  std::swap(_oneof_case_[17], other->_oneof_case_[17]);
  std::swap(has_shape_match_, other->has_shape_match_);
  std::swap(_oneof_case_[18], other->_oneof_case_[18]);
  std::swap(has_gps_accuracy_, other->has_gps_accuracy_);
  std::swap(_oneof_case_[19], other->_oneof_case_[19]);
  std::swap(has_search_radius_, other->has_search_radius_);
  std::swap(_oneof_case_[20], other->_oneof_case_[20]);
  std::swap(has_turn_penalty_factor_, other->has_turn_penalty_factor_);
  std::swap(_oneof_case_[21], other->_oneof_case_[21]);
  std::swap(has_breakage_distance_, other->has_breakage_distance_);
  std::swap(_oneof_case_[22], other->_oneof_case_[22]);
  std::swap(has_use_timestamps_, other->has_use_timestamps_);
  std::swap(_oneof_case_[23], other->_oneof_case_[23]);
  std::swap(has_shape_format_, other->has_shape_format_);
  std::swap(_oneof_case_[24], other->_oneof_case_[24]);
  std::swap(has_alternates_, other->has_alternates_);
  std::swap(_oneof_case_[25], other->_oneof_case_[25]);
  std::swap(has_interpolation_distance_, other->has_interpolation_distance_);
  std::swap(_oneof_case_[26], other->_oneof_case_[26]);
  std::swap(has_guidance_views_, other->has_guidance_views_);
  std::swap(_oneof_case_[27], other->_oneof_case_[27]);
  std::swap(has_height_precision_, other->has_height_precision_);
  std::swap(_oneof_case_[28], other->_oneof_case_[28]);
  std::swap(has_roundabout_exits_, other->has_roundabout_exits_);
  std::swap(_oneof_case_[29], other->_oneof_case_[29]);
  std::swap(has_linear_references_, other->has_linear_references_);
  std::swap(_oneof_case_[30], other->_oneof_case_[30]);
  std::swap(has_prioritize_bidirectional_, other->has_prioritize_bidirectional_);
  std::swap(_oneof_case_[31], other->_oneof_case_[31]);
  std::swap(has_expansion_action_, other->has_expansion_action_);
  std::swap(_oneof_case_[32], other->_oneof_case_[32]);
  std::swap(has_skip_opposites_, other->has_skip_opposites_);
  std::swap(_oneof_case_[33], other->_oneof_case_[33]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Options::GetTypeName() const {
  return "valhalla.Options";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Options_Ring

// repeated .valhalla.LatLng coords = 1;
int Options_Ring::coords_size() const {
  return coords_.size();
}
void Options_Ring::clear_coords() {
  coords_.Clear();
}
const ::valhalla::LatLng& Options_Ring::coords(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.Ring.coords)
  return coords_.Get(index);
}
::valhalla::LatLng* Options_Ring::mutable_coords(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.Ring.coords)
  return coords_.Mutable(index);
}
::valhalla::LatLng* Options_Ring::add_coords() {
  // @@protoc_insertion_point(field_add:valhalla.Options.Ring.coords)
  return coords_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::LatLng >*
Options_Ring::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.Ring.coords)
  return &coords_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::LatLng >&
Options_Ring::coords() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.Ring.coords)
  return coords_;
}

// -------------------------------------------------------------------

// Options

// optional .valhalla.Options.Units units = 1;
bool Options::has_units() const {
  return has_units_case() == kUnits;
}
void Options::set_has_units() {
  _oneof_case_[0] = kUnits;
}
void Options::clear_units() {
  if (has_units()) {
    has_units_.units_ = 0;
    clear_has_has_units();
  }
}
 ::valhalla::Options_Units Options::units() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.units)
  if (has_units()) {
    return static_cast< ::valhalla::Options_Units >(has_units_.units_);
  }
  return static_cast< ::valhalla::Options_Units >(0);
}
 void Options::set_units(::valhalla::Options_Units value) {
  if (!has_units()) {
    clear_has_units();
    set_has_units();
  }
  has_units_.units_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.units)
}

// optional string language = 2;
bool Options::has_language() const {
  return has_language_case() == kLanguage;
}
void Options::set_has_language() {
  _oneof_case_[1] = kLanguage;
}
void Options::clear_language() {
  if (has_language()) {
    has_language_.language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_language();
  }
}
 const ::std::string& Options::language() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.language)
  if (has_language()) {
    return has_language_.language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Options::set_language(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.language)
  if (!has_language()) {
    clear_has_language();
    set_has_language();
    has_language_.language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_language_.language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Options.language)
}
 void Options::set_language(const char* value) {
  if (!has_language()) {
    clear_has_language();
    set_has_language();
    has_language_.language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_language_.language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Options.language)
}
 void Options::set_language(const char* value, size_t size) {
  if (!has_language()) {
    clear_has_language();
    set_has_language();
    has_language_.language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_language_.language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.language)
}
 ::std::string* Options::mutable_language() {
  if (!has_language()) {
    clear_has_language();
    set_has_language();
    has_language_.language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Options.language)
  return has_language_.language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Options::release_language() {
  // @@protoc_insertion_point(field_release:valhalla.Options.language)
  if (has_language()) {
    clear_has_has_language();
    return has_language_.language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Options::set_allocated_language(::std::string* language) {
  if (!has_language()) {
    has_language_.language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_language();
  if (language != NULL) {
    set_has_language();
    has_language_.language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        language);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Options.language)
}

// optional .valhalla.DirectionsType directions_type = 3;
bool Options::has_directions_type() const {
  return has_directions_type_case() == kDirectionsType;
}
void Options::set_has_directions_type() {
  _oneof_case_[2] = kDirectionsType;
}
void Options::clear_directions_type() {
  if (has_directions_type()) {
    has_directions_type_.directions_type_ = 0;
    clear_has_has_directions_type();
  }
}
 ::valhalla::DirectionsType Options::directions_type() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.directions_type)
  if (has_directions_type()) {
    return static_cast< ::valhalla::DirectionsType >(has_directions_type_.directions_type_);
  }
  return static_cast< ::valhalla::DirectionsType >(0);
}
 void Options::set_directions_type(::valhalla::DirectionsType value) {
  if (!has_directions_type()) {
    clear_has_directions_type();
    set_has_directions_type();
  }
  has_directions_type_.directions_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.directions_type)
}

// optional .valhalla.Options.Format format = 4;
bool Options::has_format() const {
  return has_format_case() == kFormat;
}
void Options::set_has_format() {
  _oneof_case_[3] = kFormat;
}
void Options::clear_format() {
  if (has_format()) {
    has_format_.format_ = 0;
    clear_has_has_format();
  }
}
 ::valhalla::Options_Format Options::format() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.format)
  if (has_format()) {
    return static_cast< ::valhalla::Options_Format >(has_format_.format_);
  }
  return static_cast< ::valhalla::Options_Format >(0);
}
 void Options::set_format(::valhalla::Options_Format value) {
  if (!has_format()) {
    clear_has_format();
    set_has_format();
  }
  has_format_.format_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.format)
}

// optional string id = 5;
bool Options::has_id() const {
  return has_id_case() == kId;
}
void Options::set_has_id() {
  _oneof_case_[4] = kId;
}
void Options::clear_id() {
  if (has_id()) {
    has_id_.id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_id();
  }
}
 const ::std::string& Options::id() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.id)
  if (has_id()) {
    return has_id_.id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Options::set_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.id)
  if (!has_id()) {
    clear_has_id();
    set_has_id();
    has_id_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_id_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Options.id)
}
 void Options::set_id(const char* value) {
  if (!has_id()) {
    clear_has_id();
    set_has_id();
    has_id_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_id_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Options.id)
}
 void Options::set_id(const char* value, size_t size) {
  if (!has_id()) {
    clear_has_id();
    set_has_id();
    has_id_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_id_.id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.id)
}
 ::std::string* Options::mutable_id() {
  if (!has_id()) {
    clear_has_id();
    set_has_id();
    has_id_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Options.id)
  return has_id_.id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Options::release_id() {
  // @@protoc_insertion_point(field_release:valhalla.Options.id)
  if (has_id()) {
    clear_has_has_id();
    return has_id_.id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Options::set_allocated_id(::std::string* id) {
  if (!has_id()) {
    has_id_.id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_id();
  if (id != NULL) {
    set_has_id();
    has_id_.id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        id);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Options.id)
}

// optional string jsonp = 6;
bool Options::has_jsonp() const {
  return has_jsonp_case() == kJsonp;
}
void Options::set_has_jsonp() {
  _oneof_case_[5] = kJsonp;
}
void Options::clear_jsonp() {
  if (has_jsonp()) {
    has_jsonp_.jsonp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_jsonp();
  }
}
 const ::std::string& Options::jsonp() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.jsonp)
  if (has_jsonp()) {
    return has_jsonp_.jsonp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Options::set_jsonp(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.jsonp)
  if (!has_jsonp()) {
    clear_has_jsonp();
    set_has_jsonp();
    has_jsonp_.jsonp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_jsonp_.jsonp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Options.jsonp)
}
 void Options::set_jsonp(const char* value) {
  if (!has_jsonp()) {
    clear_has_jsonp();
    set_has_jsonp();
    has_jsonp_.jsonp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_jsonp_.jsonp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Options.jsonp)
}
 void Options::set_jsonp(const char* value, size_t size) {
  if (!has_jsonp()) {
    clear_has_jsonp();
    set_has_jsonp();
    has_jsonp_.jsonp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_jsonp_.jsonp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.jsonp)
}
 ::std::string* Options::mutable_jsonp() {
  if (!has_jsonp()) {
    clear_has_jsonp();
    set_has_jsonp();
    has_jsonp_.jsonp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Options.jsonp)
  return has_jsonp_.jsonp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Options::release_jsonp() {
  // @@protoc_insertion_point(field_release:valhalla.Options.jsonp)
  if (has_jsonp()) {
    clear_has_has_jsonp();
    return has_jsonp_.jsonp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Options::set_allocated_jsonp(::std::string* jsonp) {
  if (!has_jsonp()) {
    has_jsonp_.jsonp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_jsonp();
  if (jsonp != NULL) {
    set_has_jsonp();
    has_jsonp_.jsonp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        jsonp);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Options.jsonp)
}

// optional string encoded_polyline = 7;
bool Options::has_encoded_polyline() const {
  return has_encoded_polyline_case() == kEncodedPolyline;
}
void Options::set_has_encoded_polyline() {
  _oneof_case_[6] = kEncodedPolyline;
}
void Options::clear_encoded_polyline() {
  if (has_encoded_polyline()) {
    has_encoded_polyline_.encoded_polyline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_encoded_polyline();
  }
}
 const ::std::string& Options::encoded_polyline() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.encoded_polyline)
  if (has_encoded_polyline()) {
    return has_encoded_polyline_.encoded_polyline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Options::set_encoded_polyline(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.encoded_polyline)
  if (!has_encoded_polyline()) {
    clear_has_encoded_polyline();
    set_has_encoded_polyline();
    has_encoded_polyline_.encoded_polyline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_encoded_polyline_.encoded_polyline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Options.encoded_polyline)
}
 void Options::set_encoded_polyline(const char* value) {
  if (!has_encoded_polyline()) {
    clear_has_encoded_polyline();
    set_has_encoded_polyline();
    has_encoded_polyline_.encoded_polyline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_encoded_polyline_.encoded_polyline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Options.encoded_polyline)
}
 void Options::set_encoded_polyline(const char* value, size_t size) {
  if (!has_encoded_polyline()) {
    clear_has_encoded_polyline();
    set_has_encoded_polyline();
    has_encoded_polyline_.encoded_polyline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_encoded_polyline_.encoded_polyline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.encoded_polyline)
}
 ::std::string* Options::mutable_encoded_polyline() {
  if (!has_encoded_polyline()) {
    clear_has_encoded_polyline();
    set_has_encoded_polyline();
    has_encoded_polyline_.encoded_polyline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Options.encoded_polyline)
  return has_encoded_polyline_.encoded_polyline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Options::release_encoded_polyline() {
  // @@protoc_insertion_point(field_release:valhalla.Options.encoded_polyline)
  if (has_encoded_polyline()) {
    clear_has_has_encoded_polyline();
    return has_encoded_polyline_.encoded_polyline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Options::set_allocated_encoded_polyline(::std::string* encoded_polyline) {
  if (!has_encoded_polyline()) {
    has_encoded_polyline_.encoded_polyline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_encoded_polyline();
  if (encoded_polyline != NULL) {
    set_has_encoded_polyline();
    has_encoded_polyline_.encoded_polyline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        encoded_polyline);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Options.encoded_polyline)
}

// optional .valhalla.Options.Action action = 8;
bool Options::has_action() const {
  return has_action_case() == kAction;
}
void Options::set_has_action() {
  _oneof_case_[7] = kAction;
}
void Options::clear_action() {
  if (has_action()) {
    has_action_.action_ = 0;
    clear_has_has_action();
  }
}
 ::valhalla::Options_Action Options::action() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.action)
  if (has_action()) {
    return static_cast< ::valhalla::Options_Action >(has_action_.action_);
  }
  return static_cast< ::valhalla::Options_Action >(0);
}
 void Options::set_action(::valhalla::Options_Action value) {
  if (!has_action()) {
    clear_has_action();
    set_has_action();
  }
  has_action_.action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.action)
}

// optional bool range = 10;
bool Options::has_range() const {
  return has_range_case() == kRange;
}
void Options::set_has_range() {
  _oneof_case_[8] = kRange;
}
void Options::clear_range() {
  if (has_range()) {
    has_range_.range_ = false;
    clear_has_has_range();
  }
}
 bool Options::range() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.range)
  if (has_range()) {
    return has_range_.range_;
  }
  return false;
}
 void Options::set_range(bool value) {
  if (!has_range()) {
    clear_has_range();
    set_has_range();
  }
  has_range_.range_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.range)
}

// optional bool verbose = 11;
bool Options::has_verbose() const {
  return has_verbose_case() == kVerbose;
}
void Options::set_has_verbose() {
  _oneof_case_[9] = kVerbose;
}
void Options::clear_verbose() {
  if (has_verbose()) {
    has_verbose_.verbose_ = false;
    clear_has_has_verbose();
  }
}
 bool Options::verbose() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.verbose)
  if (has_verbose()) {
    return has_verbose_.verbose_;
  }
  return false;
}
 void Options::set_verbose(bool value) {
  if (!has_verbose()) {
    clear_has_verbose();
    set_has_verbose();
  }
  has_verbose_.verbose_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.verbose)
}

// optional .valhalla.Costing costing = 12;
bool Options::has_costing() const {
  return has_costing_case() == kCosting;
}
void Options::set_has_costing() {
  _oneof_case_[10] = kCosting;
}
void Options::clear_costing() {
  if (has_costing()) {
    has_costing_.costing_ = 0;
    clear_has_has_costing();
  }
}
 ::valhalla::Costing Options::costing() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.costing)
  if (has_costing()) {
    return static_cast< ::valhalla::Costing >(has_costing_.costing_);
  }
  return static_cast< ::valhalla::Costing >(0);
}
 void Options::set_costing(::valhalla::Costing value) {
  if (!has_costing()) {
    clear_has_costing();
    set_has_costing();
  }
  has_costing_.costing_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.costing)
}

// map<int32, .valhalla.CostingOptions> costing_options = 13;
int Options::costing_options_size() const {
  return costing_options_.size();
}
void Options::clear_costing_options() {
  costing_options_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >&
Options::costing_options() const {
  // @@protoc_insertion_point(field_map:valhalla.Options.costing_options)
  return costing_options_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::valhalla::CostingOptions >*
Options::mutable_costing_options() {
  // @@protoc_insertion_point(field_mutable_map:valhalla.Options.costing_options)
  return costing_options_.MutableMap();
}

// repeated .valhalla.Location locations = 14;
int Options::locations_size() const {
  return locations_.size();
}
void Options::clear_locations() {
  locations_.Clear();
}
const ::valhalla::Location& Options::locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.locations)
  return locations_.Get(index);
}
::valhalla::Location* Options::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.locations)
  return locations_.Mutable(index);
}
::valhalla::Location* Options::add_locations() {
  // @@protoc_insertion_point(field_add:valhalla.Options.locations)
  return locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.locations)
  return &locations_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::locations() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.locations)
  return locations_;
}

// repeated .valhalla.Location exclude_locations = 15;
int Options::exclude_locations_size() const {
  return exclude_locations_.size();
}
void Options::clear_exclude_locations() {
  exclude_locations_.Clear();
}
const ::valhalla::Location& Options::exclude_locations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.exclude_locations)
  return exclude_locations_.Get(index);
}
::valhalla::Location* Options::mutable_exclude_locations(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.exclude_locations)
  return exclude_locations_.Mutable(index);
}
::valhalla::Location* Options::add_exclude_locations() {
  // @@protoc_insertion_point(field_add:valhalla.Options.exclude_locations)
  return exclude_locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_exclude_locations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.exclude_locations)
  return &exclude_locations_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::exclude_locations() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.exclude_locations)
  return exclude_locations_;
}

// repeated .valhalla.Location sources = 16;
int Options::sources_size() const {
  return sources_.size();
}
void Options::clear_sources() {
  sources_.Clear();
}
const ::valhalla::Location& Options::sources(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.sources)
  return sources_.Get(index);
}
::valhalla::Location* Options::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.sources)
  return sources_.Mutable(index);
}
::valhalla::Location* Options::add_sources() {
  // @@protoc_insertion_point(field_add:valhalla.Options.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::sources() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.sources)
  return sources_;
}

// repeated .valhalla.Location targets = 17;
int Options::targets_size() const {
  return targets_.size();
}
void Options::clear_targets() {
  targets_.Clear();
}
const ::valhalla::Location& Options::targets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.targets)
  return targets_.Get(index);
}
::valhalla::Location* Options::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.targets)
  return targets_.Mutable(index);
}
::valhalla::Location* Options::add_targets() {
  // @@protoc_insertion_point(field_add:valhalla.Options.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::targets() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.targets)
  return targets_;
}

// optional .valhalla.Options.DateTimeType date_time_type = 18;
bool Options::has_date_time_type() const {
  return has_date_time_type_case() == kDateTimeType;
}
void Options::set_has_date_time_type() {
  _oneof_case_[11] = kDateTimeType;
}
void Options::clear_date_time_type() {
  if (has_date_time_type()) {
    has_date_time_type_.date_time_type_ = 0;
    clear_has_has_date_time_type();
  }
}
 ::valhalla::Options_DateTimeType Options::date_time_type() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.date_time_type)
  if (has_date_time_type()) {
    return static_cast< ::valhalla::Options_DateTimeType >(has_date_time_type_.date_time_type_);
  }
  return static_cast< ::valhalla::Options_DateTimeType >(0);
}
 void Options::set_date_time_type(::valhalla::Options_DateTimeType value) {
  if (!has_date_time_type()) {
    clear_has_date_time_type();
    set_has_date_time_type();
  }
  has_date_time_type_.date_time_type_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.date_time_type)
}

// optional string date_time = 19;
bool Options::has_date_time() const {
  return has_date_time_case() == kDateTime;
}
void Options::set_has_date_time() {
  _oneof_case_[12] = kDateTime;
}
void Options::clear_date_time() {
  if (has_date_time()) {
    has_date_time_.date_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_has_date_time();
  }
}
 const ::std::string& Options::date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.date_time)
  if (has_date_time()) {
    return has_date_time_.date_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Options::set_date_time(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.date_time)
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:valhalla.Options.date_time)
}
 void Options::set_date_time(const char* value) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:valhalla.Options.date_time)
}
 void Options::set_date_time(const char* value, size_t size) {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  has_date_time_.date_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.date_time)
}
 ::std::string* Options::mutable_date_time() {
  if (!has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:valhalla.Options.date_time)
  return has_date_time_.date_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Options::release_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.Options.date_time)
  if (has_date_time()) {
    clear_has_has_date_time();
    return has_date_time_.date_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Options::set_allocated_date_time(::std::string* date_time) {
  if (!has_date_time()) {
    has_date_time_.date_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_has_date_time();
  if (date_time != NULL) {
    set_has_date_time();
    has_date_time_.date_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        date_time);
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Options.date_time)
}

// repeated .valhalla.Location shape = 20;
int Options::shape_size() const {
  return shape_.size();
}
void Options::clear_shape() {
  shape_.Clear();
}
const ::valhalla::Location& Options::shape(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.shape)
  return shape_.Get(index);
}
::valhalla::Location* Options::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.shape)
  return shape_.Mutable(index);
}
::valhalla::Location* Options::add_shape() {
  // @@protoc_insertion_point(field_add:valhalla.Options.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::shape() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.shape)
  return shape_;
}

// optional double resample_distance = 21;
bool Options::has_resample_distance() const {
  return has_resample_distance_case() == kResampleDistance;
}
void Options::set_has_resample_distance() {
  _oneof_case_[13] = kResampleDistance;
}
void Options::clear_resample_distance() {
  if (has_resample_distance()) {
    has_resample_distance_.resample_distance_ = 0;
    clear_has_has_resample_distance();
  }
}
 double Options::resample_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.resample_distance)
  if (has_resample_distance()) {
    return has_resample_distance_.resample_distance_;
  }
  return 0;
}
 void Options::set_resample_distance(double value) {
  if (!has_resample_distance()) {
    clear_has_resample_distance();
    set_has_resample_distance();
  }
  has_resample_distance_.resample_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.resample_distance)
}

// repeated .valhalla.Contour contours = 22;
int Options::contours_size() const {
  return contours_.size();
}
void Options::clear_contours() {
  contours_.Clear();
}
const ::valhalla::Contour& Options::contours(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.contours)
  return contours_.Get(index);
}
::valhalla::Contour* Options::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.contours)
  return contours_.Mutable(index);
}
::valhalla::Contour* Options::add_contours() {
  // @@protoc_insertion_point(field_add:valhalla.Options.contours)
  return contours_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Contour >*
Options::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.contours)
  return &contours_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Contour >&
Options::contours() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.contours)
  return contours_;
}

// optional bool polygons = 23;
bool Options::has_polygons() const {
  return has_polygons_case() == kPolygons;
}
void Options::set_has_polygons() {
  _oneof_case_[14] = kPolygons;
}
void Options::clear_polygons() {
  if (has_polygons()) {
    has_polygons_.polygons_ = false;
    clear_has_has_polygons();
  }
}
 bool Options::polygons() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.polygons)
  if (has_polygons()) {
    return has_polygons_.polygons_;
  }
  return false;
}
 void Options::set_polygons(bool value) {
  if (!has_polygons()) {
    clear_has_polygons();
    set_has_polygons();
  }
  has_polygons_.polygons_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.polygons)
}

// optional float denoise = 24;
bool Options::has_denoise() const {
  return has_denoise_case() == kDenoise;
}
void Options::set_has_denoise() {
  _oneof_case_[15] = kDenoise;
}
void Options::clear_denoise() {
  if (has_denoise()) {
    has_denoise_.denoise_ = 0;
    clear_has_has_denoise();
  }
}
 float Options::denoise() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.denoise)
  if (has_denoise()) {
    return has_denoise_.denoise_;
  }
  return 0;
}
 void Options::set_denoise(float value) {
  if (!has_denoise()) {
    clear_has_denoise();
    set_has_denoise();
  }
  has_denoise_.denoise_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.denoise)
}

// optional float generalize = 25;
bool Options::has_generalize() const {
  return has_generalize_case() == kGeneralize;
}
void Options::set_has_generalize() {
  _oneof_case_[16] = kGeneralize;
}
void Options::clear_generalize() {
  if (has_generalize()) {
    has_generalize_.generalize_ = 0;
    clear_has_has_generalize();
  }
}
 float Options::generalize() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.generalize)
  if (has_generalize()) {
    return has_generalize_.generalize_;
  }
  return 0;
}
 void Options::set_generalize(float value) {
  if (!has_generalize()) {
    clear_has_generalize();
    set_has_generalize();
  }
  has_generalize_.generalize_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.generalize)
}

// optional bool show_locations = 26;
bool Options::has_show_locations() const {
  return has_show_locations_case() == kShowLocations;
}
void Options::set_has_show_locations() {
  _oneof_case_[17] = kShowLocations;
}
void Options::clear_show_locations() {
  if (has_show_locations()) {
    has_show_locations_.show_locations_ = false;
    clear_has_has_show_locations();
  }
}
 bool Options::show_locations() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.show_locations)
  if (has_show_locations()) {
    return has_show_locations_.show_locations_;
  }
  return false;
}
 void Options::set_show_locations(bool value) {
  if (!has_show_locations()) {
    clear_has_show_locations();
    set_has_show_locations();
  }
  has_show_locations_.show_locations_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.show_locations)
}

// repeated .valhalla.Location trace = 27;
int Options::trace_size() const {
  return trace_.size();
}
void Options::clear_trace() {
  trace_.Clear();
}
const ::valhalla::Location& Options::trace(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.trace)
  return trace_.Get(index);
}
::valhalla::Location* Options::mutable_trace(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.trace)
  return trace_.Mutable(index);
}
::valhalla::Location* Options::add_trace() {
  // @@protoc_insertion_point(field_add:valhalla.Options.trace)
  return trace_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Location >*
Options::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.trace)
  return &trace_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Location >&
Options::trace() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.trace)
  return trace_;
}

// optional .valhalla.ShapeMatch shape_match = 28;
bool Options::has_shape_match() const {
  return has_shape_match_case() == kShapeMatch;
}
void Options::set_has_shape_match() {
  _oneof_case_[18] = kShapeMatch;
}
void Options::clear_shape_match() {
  if (has_shape_match()) {
    has_shape_match_.shape_match_ = 0;
    clear_has_has_shape_match();
  }
}
 ::valhalla::ShapeMatch Options::shape_match() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.shape_match)
  if (has_shape_match()) {
    return static_cast< ::valhalla::ShapeMatch >(has_shape_match_.shape_match_);
  }
  return static_cast< ::valhalla::ShapeMatch >(0);
}
 void Options::set_shape_match(::valhalla::ShapeMatch value) {
  if (!has_shape_match()) {
    clear_has_shape_match();
    set_has_shape_match();
  }
  has_shape_match_.shape_match_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.shape_match)
}

// optional float gps_accuracy = 30;
bool Options::has_gps_accuracy() const {
  return has_gps_accuracy_case() == kGpsAccuracy;
}
void Options::set_has_gps_accuracy() {
  _oneof_case_[19] = kGpsAccuracy;
}
void Options::clear_gps_accuracy() {
  if (has_gps_accuracy()) {
    has_gps_accuracy_.gps_accuracy_ = 0;
    clear_has_has_gps_accuracy();
  }
}
 float Options::gps_accuracy() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.gps_accuracy)
  if (has_gps_accuracy()) {
    return has_gps_accuracy_.gps_accuracy_;
  }
  return 0;
}
 void Options::set_gps_accuracy(float value) {
  if (!has_gps_accuracy()) {
    clear_has_gps_accuracy();
    set_has_gps_accuracy();
  }
  has_gps_accuracy_.gps_accuracy_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.gps_accuracy)
}

// optional float search_radius = 31;
bool Options::has_search_radius() const {
  return has_search_radius_case() == kSearchRadius;
}
void Options::set_has_search_radius() {
  _oneof_case_[20] = kSearchRadius;
}
void Options::clear_search_radius() {
  if (has_search_radius()) {
    has_search_radius_.search_radius_ = 0;
    clear_has_has_search_radius();
  }
}
 float Options::search_radius() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.search_radius)
  if (has_search_radius()) {
    return has_search_radius_.search_radius_;
  }
  return 0;
}
 void Options::set_search_radius(float value) {
  if (!has_search_radius()) {
    clear_has_search_radius();
    set_has_search_radius();
  }
  has_search_radius_.search_radius_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.search_radius)
}

// optional float turn_penalty_factor = 32;
bool Options::has_turn_penalty_factor() const {
  return has_turn_penalty_factor_case() == kTurnPenaltyFactor;
}
void Options::set_has_turn_penalty_factor() {
  _oneof_case_[21] = kTurnPenaltyFactor;
}
void Options::clear_turn_penalty_factor() {
  if (has_turn_penalty_factor()) {
    has_turn_penalty_factor_.turn_penalty_factor_ = 0;
    clear_has_has_turn_penalty_factor();
  }
}
 float Options::turn_penalty_factor() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.turn_penalty_factor)
  if (has_turn_penalty_factor()) {
    return has_turn_penalty_factor_.turn_penalty_factor_;
  }
  return 0;
}
 void Options::set_turn_penalty_factor(float value) {
  if (!has_turn_penalty_factor()) {
    clear_has_turn_penalty_factor();
    set_has_turn_penalty_factor();
  }
  has_turn_penalty_factor_.turn_penalty_factor_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.turn_penalty_factor)
}

// optional .valhalla.FilterAction filter_action = 33;
void Options::clear_filter_action() {
  filter_action_ = 0;
}
 ::valhalla::FilterAction Options::filter_action() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.filter_action)
  return static_cast< ::valhalla::FilterAction >(filter_action_);
}
 void Options::set_filter_action(::valhalla::FilterAction value) {
  
  filter_action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.filter_action)
}

// repeated string filter_attributes = 34;
int Options::filter_attributes_size() const {
  return filter_attributes_.size();
}
void Options::clear_filter_attributes() {
  filter_attributes_.Clear();
}
 const ::std::string& Options::filter_attributes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.filter_attributes)
  return filter_attributes_.Get(index);
}
 ::std::string* Options::mutable_filter_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.filter_attributes)
  return filter_attributes_.Mutable(index);
}
 void Options::set_filter_attributes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Options.filter_attributes)
  filter_attributes_.Mutable(index)->assign(value);
}
 void Options::set_filter_attributes(int index, const char* value) {
  filter_attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Options.filter_attributes)
}
 void Options::set_filter_attributes(int index, const char* value, size_t size) {
  filter_attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Options.filter_attributes)
}
 ::std::string* Options::add_filter_attributes() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Options.filter_attributes)
  return filter_attributes_.Add();
}
 void Options::add_filter_attributes(const ::std::string& value) {
  filter_attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Options.filter_attributes)
}
 void Options::add_filter_attributes(const char* value) {
  filter_attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Options.filter_attributes)
}
 void Options::add_filter_attributes(const char* value, size_t size) {
  filter_attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Options.filter_attributes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Options::filter_attributes() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.filter_attributes)
  return filter_attributes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Options::mutable_filter_attributes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.filter_attributes)
  return &filter_attributes_;
}

// optional float breakage_distance = 36;
bool Options::has_breakage_distance() const {
  return has_breakage_distance_case() == kBreakageDistance;
}
void Options::set_has_breakage_distance() {
  _oneof_case_[22] = kBreakageDistance;
}
void Options::clear_breakage_distance() {
  if (has_breakage_distance()) {
    has_breakage_distance_.breakage_distance_ = 0;
    clear_has_has_breakage_distance();
  }
}
 float Options::breakage_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.breakage_distance)
  if (has_breakage_distance()) {
    return has_breakage_distance_.breakage_distance_;
  }
  return 0;
}
 void Options::set_breakage_distance(float value) {
  if (!has_breakage_distance()) {
    clear_has_breakage_distance();
    set_has_breakage_distance();
  }
  has_breakage_distance_.breakage_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.breakage_distance)
}

// optional bool use_timestamps = 37;
bool Options::has_use_timestamps() const {
  return has_use_timestamps_case() == kUseTimestamps;
}
void Options::set_has_use_timestamps() {
  _oneof_case_[23] = kUseTimestamps;
}
void Options::clear_use_timestamps() {
  if (has_use_timestamps()) {
    has_use_timestamps_.use_timestamps_ = false;
    clear_has_has_use_timestamps();
  }
}
 bool Options::use_timestamps() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.use_timestamps)
  if (has_use_timestamps()) {
    return has_use_timestamps_.use_timestamps_;
  }
  return false;
}
 void Options::set_use_timestamps(bool value) {
  if (!has_use_timestamps()) {
    clear_has_use_timestamps();
    set_has_use_timestamps();
  }
  has_use_timestamps_.use_timestamps_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.use_timestamps)
}

// optional .valhalla.ShapeFormat shape_format = 38;
bool Options::has_shape_format() const {
  return has_shape_format_case() == kShapeFormat;
}
void Options::set_has_shape_format() {
  _oneof_case_[24] = kShapeFormat;
}
void Options::clear_shape_format() {
  if (has_shape_format()) {
    has_shape_format_.shape_format_ = 0;
    clear_has_has_shape_format();
  }
}
 ::valhalla::ShapeFormat Options::shape_format() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.shape_format)
  if (has_shape_format()) {
    return static_cast< ::valhalla::ShapeFormat >(has_shape_format_.shape_format_);
  }
  return static_cast< ::valhalla::ShapeFormat >(0);
}
 void Options::set_shape_format(::valhalla::ShapeFormat value) {
  if (!has_shape_format()) {
    clear_has_shape_format();
    set_has_shape_format();
  }
  has_shape_format_.shape_format_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.shape_format)
}

// optional uint32 alternates = 39;
bool Options::has_alternates() const {
  return has_alternates_case() == kAlternates;
}
void Options::set_has_alternates() {
  _oneof_case_[25] = kAlternates;
}
void Options::clear_alternates() {
  if (has_alternates()) {
    has_alternates_.alternates_ = 0u;
    clear_has_has_alternates();
  }
}
 ::google::protobuf::uint32 Options::alternates() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.alternates)
  if (has_alternates()) {
    return has_alternates_.alternates_;
  }
  return 0u;
}
 void Options::set_alternates(::google::protobuf::uint32 value) {
  if (!has_alternates()) {
    clear_has_alternates();
    set_has_alternates();
  }
  has_alternates_.alternates_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.alternates)
}

// optional float interpolation_distance = 40;
bool Options::has_interpolation_distance() const {
  return has_interpolation_distance_case() == kInterpolationDistance;
}
void Options::set_has_interpolation_distance() {
  _oneof_case_[26] = kInterpolationDistance;
}
void Options::clear_interpolation_distance() {
  if (has_interpolation_distance()) {
    has_interpolation_distance_.interpolation_distance_ = 0;
    clear_has_has_interpolation_distance();
  }
}
 float Options::interpolation_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.interpolation_distance)
  if (has_interpolation_distance()) {
    return has_interpolation_distance_.interpolation_distance_;
  }
  return 0;
}
 void Options::set_interpolation_distance(float value) {
  if (!has_interpolation_distance()) {
    clear_has_interpolation_distance();
    set_has_interpolation_distance();
  }
  has_interpolation_distance_.interpolation_distance_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.interpolation_distance)
}

// optional bool guidance_views = 41;
bool Options::has_guidance_views() const {
  return has_guidance_views_case() == kGuidanceViews;
}
void Options::set_has_guidance_views() {
  _oneof_case_[27] = kGuidanceViews;
}
void Options::clear_guidance_views() {
  if (has_guidance_views()) {
    has_guidance_views_.guidance_views_ = false;
    clear_has_has_guidance_views();
  }
}
 bool Options::guidance_views() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.guidance_views)
  if (has_guidance_views()) {
    return has_guidance_views_.guidance_views_;
  }
  return false;
}
 void Options::set_guidance_views(bool value) {
  if (!has_guidance_views()) {
    clear_has_guidance_views();
    set_has_guidance_views();
  }
  has_guidance_views_.guidance_views_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.guidance_views)
}

// optional uint32 height_precision = 43;
bool Options::has_height_precision() const {
  return has_height_precision_case() == kHeightPrecision;
}
void Options::set_has_height_precision() {
  _oneof_case_[28] = kHeightPrecision;
}
void Options::clear_height_precision() {
  if (has_height_precision()) {
    has_height_precision_.height_precision_ = 0u;
    clear_has_has_height_precision();
  }
}
 ::google::protobuf::uint32 Options::height_precision() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.height_precision)
  if (has_height_precision()) {
    return has_height_precision_.height_precision_;
  }
  return 0u;
}
 void Options::set_height_precision(::google::protobuf::uint32 value) {
  if (!has_height_precision()) {
    clear_has_height_precision();
    set_has_height_precision();
  }
  has_height_precision_.height_precision_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.height_precision)
}

// optional bool roundabout_exits = 44;
bool Options::has_roundabout_exits() const {
  return has_roundabout_exits_case() == kRoundaboutExits;
}
void Options::set_has_roundabout_exits() {
  _oneof_case_[29] = kRoundaboutExits;
}
void Options::clear_roundabout_exits() {
  if (has_roundabout_exits()) {
    has_roundabout_exits_.roundabout_exits_ = false;
    clear_has_has_roundabout_exits();
  }
}
 bool Options::roundabout_exits() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.roundabout_exits)
  if (has_roundabout_exits()) {
    return has_roundabout_exits_.roundabout_exits_;
  }
  return false;
}
 void Options::set_roundabout_exits(bool value) {
  if (!has_roundabout_exits()) {
    clear_has_roundabout_exits();
    set_has_roundabout_exits();
  }
  has_roundabout_exits_.roundabout_exits_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.roundabout_exits)
}

// optional bool linear_references = 45;
bool Options::has_linear_references() const {
  return has_linear_references_case() == kLinearReferences;
}
void Options::set_has_linear_references() {
  _oneof_case_[30] = kLinearReferences;
}
void Options::clear_linear_references() {
  if (has_linear_references()) {
    has_linear_references_.linear_references_ = false;
    clear_has_has_linear_references();
  }
}
 bool Options::linear_references() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.linear_references)
  if (has_linear_references()) {
    return has_linear_references_.linear_references_;
  }
  return false;
}
 void Options::set_linear_references(bool value) {
  if (!has_linear_references()) {
    clear_has_linear_references();
    set_has_linear_references();
  }
  has_linear_references_.linear_references_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.linear_references)
}

// repeated .valhalla.CostingOptions recostings = 46;
int Options::recostings_size() const {
  return recostings_.size();
}
void Options::clear_recostings() {
  recostings_.Clear();
}
const ::valhalla::CostingOptions& Options::recostings(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.recostings)
  return recostings_.Get(index);
}
::valhalla::CostingOptions* Options::mutable_recostings(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.recostings)
  return recostings_.Mutable(index);
}
::valhalla::CostingOptions* Options::add_recostings() {
  // @@protoc_insertion_point(field_add:valhalla.Options.recostings)
  return recostings_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::CostingOptions >*
Options::mutable_recostings() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.recostings)
  return &recostings_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::CostingOptions >&
Options::recostings() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.recostings)
  return recostings_;
}

// repeated .valhalla.Options.Ring exclude_polygons = 47;
int Options::exclude_polygons_size() const {
  return exclude_polygons_.size();
}
void Options::clear_exclude_polygons() {
  exclude_polygons_.Clear();
}
const ::valhalla::Options_Ring& Options::exclude_polygons(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.exclude_polygons)
  return exclude_polygons_.Get(index);
}
::valhalla::Options_Ring* Options::mutable_exclude_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Options.exclude_polygons)
  return exclude_polygons_.Mutable(index);
}
::valhalla::Options_Ring* Options::add_exclude_polygons() {
  // @@protoc_insertion_point(field_add:valhalla.Options.exclude_polygons)
  return exclude_polygons_.Add();
}
::google::protobuf::RepeatedPtrField< ::valhalla::Options_Ring >*
Options::mutable_exclude_polygons() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.exclude_polygons)
  return &exclude_polygons_;
}
const ::google::protobuf::RepeatedPtrField< ::valhalla::Options_Ring >&
Options::exclude_polygons() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.exclude_polygons)
  return exclude_polygons_;
}

// optional bool prioritize_bidirectional = 48;
bool Options::has_prioritize_bidirectional() const {
  return has_prioritize_bidirectional_case() == kPrioritizeBidirectional;
}
void Options::set_has_prioritize_bidirectional() {
  _oneof_case_[31] = kPrioritizeBidirectional;
}
void Options::clear_prioritize_bidirectional() {
  if (has_prioritize_bidirectional()) {
    has_prioritize_bidirectional_.prioritize_bidirectional_ = false;
    clear_has_has_prioritize_bidirectional();
  }
}
 bool Options::prioritize_bidirectional() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.prioritize_bidirectional)
  if (has_prioritize_bidirectional()) {
    return has_prioritize_bidirectional_.prioritize_bidirectional_;
  }
  return false;
}
 void Options::set_prioritize_bidirectional(bool value) {
  if (!has_prioritize_bidirectional()) {
    clear_has_prioritize_bidirectional();
    set_has_prioritize_bidirectional();
  }
  has_prioritize_bidirectional_.prioritize_bidirectional_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.prioritize_bidirectional)
}

// optional .valhalla.Options.Action expansion_action = 49;
bool Options::has_expansion_action() const {
  return has_expansion_action_case() == kExpansionAction;
}
void Options::set_has_expansion_action() {
  _oneof_case_[32] = kExpansionAction;
}
void Options::clear_expansion_action() {
  if (has_expansion_action()) {
    has_expansion_action_.expansion_action_ = 0;
    clear_has_has_expansion_action();
  }
}
 ::valhalla::Options_Action Options::expansion_action() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.expansion_action)
  if (has_expansion_action()) {
    return static_cast< ::valhalla::Options_Action >(has_expansion_action_.expansion_action_);
  }
  return static_cast< ::valhalla::Options_Action >(0);
}
 void Options::set_expansion_action(::valhalla::Options_Action value) {
  if (!has_expansion_action()) {
    clear_has_expansion_action();
    set_has_expansion_action();
  }
  has_expansion_action_.expansion_action_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.expansion_action)
}

// optional bool skip_opposites = 50;
bool Options::has_skip_opposites() const {
  return has_skip_opposites_case() == kSkipOpposites;
}
void Options::set_has_skip_opposites() {
  _oneof_case_[33] = kSkipOpposites;
}
void Options::clear_skip_opposites() {
  if (has_skip_opposites()) {
    has_skip_opposites_.skip_opposites_ = false;
    clear_has_has_skip_opposites();
  }
}
 bool Options::skip_opposites() const {
  // @@protoc_insertion_point(field_get:valhalla.Options.skip_opposites)
  if (has_skip_opposites()) {
    return has_skip_opposites_.skip_opposites_;
  }
  return false;
}
 void Options::set_skip_opposites(bool value) {
  if (!has_skip_opposites()) {
    clear_has_skip_opposites();
    set_has_skip_opposites();
  }
  has_skip_opposites_.skip_opposites_ = value;
  // @@protoc_insertion_point(field_set:valhalla.Options.skip_opposites)
}

// repeated .valhalla.Options.ExpansionProperties expansion_properties = 51;
int Options::expansion_properties_size() const {
  return expansion_properties_.size();
}
void Options::clear_expansion_properties() {
  expansion_properties_.Clear();
}
 ::valhalla::Options_ExpansionProperties Options::expansion_properties(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Options.expansion_properties)
  return static_cast< ::valhalla::Options_ExpansionProperties >(expansion_properties_.Get(index));
}
 void Options::set_expansion_properties(int index, ::valhalla::Options_ExpansionProperties value) {
  expansion_properties_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Options.expansion_properties)
}
 void Options::add_expansion_properties(::valhalla::Options_ExpansionProperties value) {
  expansion_properties_.Add(value);
  // @@protoc_insertion_point(field_add:valhalla.Options.expansion_properties)
}
 const ::google::protobuf::RepeatedField<int>&
Options::expansion_properties() const {
  // @@protoc_insertion_point(field_list:valhalla.Options.expansion_properties)
  return expansion_properties_;
}
 ::google::protobuf::RepeatedField<int>*
Options::mutable_expansion_properties() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Options.expansion_properties)
  return &expansion_properties_;
}

bool Options::has_has_units() const {
  return has_units_case() != HAS_UNITS_NOT_SET;
}
void Options::clear_has_has_units() {
  _oneof_case_[0] = HAS_UNITS_NOT_SET;
}
bool Options::has_has_language() const {
  return has_language_case() != HAS_LANGUAGE_NOT_SET;
}
void Options::clear_has_has_language() {
  _oneof_case_[1] = HAS_LANGUAGE_NOT_SET;
}
bool Options::has_has_directions_type() const {
  return has_directions_type_case() != HAS_DIRECTIONS_TYPE_NOT_SET;
}
void Options::clear_has_has_directions_type() {
  _oneof_case_[2] = HAS_DIRECTIONS_TYPE_NOT_SET;
}
bool Options::has_has_format() const {
  return has_format_case() != HAS_FORMAT_NOT_SET;
}
void Options::clear_has_has_format() {
  _oneof_case_[3] = HAS_FORMAT_NOT_SET;
}
bool Options::has_has_id() const {
  return has_id_case() != HAS_ID_NOT_SET;
}
void Options::clear_has_has_id() {
  _oneof_case_[4] = HAS_ID_NOT_SET;
}
bool Options::has_has_jsonp() const {
  return has_jsonp_case() != HAS_JSONP_NOT_SET;
}
void Options::clear_has_has_jsonp() {
  _oneof_case_[5] = HAS_JSONP_NOT_SET;
}
bool Options::has_has_encoded_polyline() const {
  return has_encoded_polyline_case() != HAS_ENCODED_POLYLINE_NOT_SET;
}
void Options::clear_has_has_encoded_polyline() {
  _oneof_case_[6] = HAS_ENCODED_POLYLINE_NOT_SET;
}
bool Options::has_has_action() const {
  return has_action_case() != HAS_ACTION_NOT_SET;
}
void Options::clear_has_has_action() {
  _oneof_case_[7] = HAS_ACTION_NOT_SET;
}
bool Options::has_has_range() const {
  return has_range_case() != HAS_RANGE_NOT_SET;
}
void Options::clear_has_has_range() {
  _oneof_case_[8] = HAS_RANGE_NOT_SET;
}
bool Options::has_has_verbose() const {
  return has_verbose_case() != HAS_VERBOSE_NOT_SET;
}
void Options::clear_has_has_verbose() {
  _oneof_case_[9] = HAS_VERBOSE_NOT_SET;
}
bool Options::has_has_costing() const {
  return has_costing_case() != HAS_COSTING_NOT_SET;
}
void Options::clear_has_has_costing() {
  _oneof_case_[10] = HAS_COSTING_NOT_SET;
}
bool Options::has_has_date_time_type() const {
  return has_date_time_type_case() != HAS_DATE_TIME_TYPE_NOT_SET;
}
void Options::clear_has_has_date_time_type() {
  _oneof_case_[11] = HAS_DATE_TIME_TYPE_NOT_SET;
}
bool Options::has_has_date_time() const {
  return has_date_time_case() != HAS_DATE_TIME_NOT_SET;
}
void Options::clear_has_has_date_time() {
  _oneof_case_[12] = HAS_DATE_TIME_NOT_SET;
}
bool Options::has_has_resample_distance() const {
  return has_resample_distance_case() != HAS_RESAMPLE_DISTANCE_NOT_SET;
}
void Options::clear_has_has_resample_distance() {
  _oneof_case_[13] = HAS_RESAMPLE_DISTANCE_NOT_SET;
}
bool Options::has_has_polygons() const {
  return has_polygons_case() != HAS_POLYGONS_NOT_SET;
}
void Options::clear_has_has_polygons() {
  _oneof_case_[14] = HAS_POLYGONS_NOT_SET;
}
bool Options::has_has_denoise() const {
  return has_denoise_case() != HAS_DENOISE_NOT_SET;
}
void Options::clear_has_has_denoise() {
  _oneof_case_[15] = HAS_DENOISE_NOT_SET;
}
bool Options::has_has_generalize() const {
  return has_generalize_case() != HAS_GENERALIZE_NOT_SET;
}
void Options::clear_has_has_generalize() {
  _oneof_case_[16] = HAS_GENERALIZE_NOT_SET;
}
bool Options::has_has_show_locations() const {
  return has_show_locations_case() != HAS_SHOW_LOCATIONS_NOT_SET;
}
void Options::clear_has_has_show_locations() {
  _oneof_case_[17] = HAS_SHOW_LOCATIONS_NOT_SET;
}
bool Options::has_has_shape_match() const {
  return has_shape_match_case() != HAS_SHAPE_MATCH_NOT_SET;
}
void Options::clear_has_has_shape_match() {
  _oneof_case_[18] = HAS_SHAPE_MATCH_NOT_SET;
}
bool Options::has_has_gps_accuracy() const {
  return has_gps_accuracy_case() != HAS_GPS_ACCURACY_NOT_SET;
}
void Options::clear_has_has_gps_accuracy() {
  _oneof_case_[19] = HAS_GPS_ACCURACY_NOT_SET;
}
bool Options::has_has_search_radius() const {
  return has_search_radius_case() != HAS_SEARCH_RADIUS_NOT_SET;
}
void Options::clear_has_has_search_radius() {
  _oneof_case_[20] = HAS_SEARCH_RADIUS_NOT_SET;
}
bool Options::has_has_turn_penalty_factor() const {
  return has_turn_penalty_factor_case() != HAS_TURN_PENALTY_FACTOR_NOT_SET;
}
void Options::clear_has_has_turn_penalty_factor() {
  _oneof_case_[21] = HAS_TURN_PENALTY_FACTOR_NOT_SET;
}
bool Options::has_has_breakage_distance() const {
  return has_breakage_distance_case() != HAS_BREAKAGE_DISTANCE_NOT_SET;
}
void Options::clear_has_has_breakage_distance() {
  _oneof_case_[22] = HAS_BREAKAGE_DISTANCE_NOT_SET;
}
bool Options::has_has_use_timestamps() const {
  return has_use_timestamps_case() != HAS_USE_TIMESTAMPS_NOT_SET;
}
void Options::clear_has_has_use_timestamps() {
  _oneof_case_[23] = HAS_USE_TIMESTAMPS_NOT_SET;
}
bool Options::has_has_shape_format() const {
  return has_shape_format_case() != HAS_SHAPE_FORMAT_NOT_SET;
}
void Options::clear_has_has_shape_format() {
  _oneof_case_[24] = HAS_SHAPE_FORMAT_NOT_SET;
}
bool Options::has_has_alternates() const {
  return has_alternates_case() != HAS_ALTERNATES_NOT_SET;
}
void Options::clear_has_has_alternates() {
  _oneof_case_[25] = HAS_ALTERNATES_NOT_SET;
}
bool Options::has_has_interpolation_distance() const {
  return has_interpolation_distance_case() != HAS_INTERPOLATION_DISTANCE_NOT_SET;
}
void Options::clear_has_has_interpolation_distance() {
  _oneof_case_[26] = HAS_INTERPOLATION_DISTANCE_NOT_SET;
}
bool Options::has_has_guidance_views() const {
  return has_guidance_views_case() != HAS_GUIDANCE_VIEWS_NOT_SET;
}
void Options::clear_has_has_guidance_views() {
  _oneof_case_[27] = HAS_GUIDANCE_VIEWS_NOT_SET;
}
bool Options::has_has_height_precision() const {
  return has_height_precision_case() != HAS_HEIGHT_PRECISION_NOT_SET;
}
void Options::clear_has_has_height_precision() {
  _oneof_case_[28] = HAS_HEIGHT_PRECISION_NOT_SET;
}
bool Options::has_has_roundabout_exits() const {
  return has_roundabout_exits_case() != HAS_ROUNDABOUT_EXITS_NOT_SET;
}
void Options::clear_has_has_roundabout_exits() {
  _oneof_case_[29] = HAS_ROUNDABOUT_EXITS_NOT_SET;
}
bool Options::has_has_linear_references() const {
  return has_linear_references_case() != HAS_LINEAR_REFERENCES_NOT_SET;
}
void Options::clear_has_has_linear_references() {
  _oneof_case_[30] = HAS_LINEAR_REFERENCES_NOT_SET;
}
bool Options::has_has_prioritize_bidirectional() const {
  return has_prioritize_bidirectional_case() != HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET;
}
void Options::clear_has_has_prioritize_bidirectional() {
  _oneof_case_[31] = HAS_PRIORITIZE_BIDIRECTIONAL_NOT_SET;
}
bool Options::has_has_expansion_action() const {
  return has_expansion_action_case() != HAS_EXPANSION_ACTION_NOT_SET;
}
void Options::clear_has_has_expansion_action() {
  _oneof_case_[32] = HAS_EXPANSION_ACTION_NOT_SET;
}
bool Options::has_has_skip_opposites() const {
  return has_skip_opposites_case() != HAS_SKIP_OPPOSITES_NOT_SET;
}
void Options::clear_has_has_skip_opposites() {
  _oneof_case_[33] = HAS_SKIP_OPPOSITES_NOT_SET;
}
Options::HasUnitsCase Options::has_units_case() const {
  return Options::HasUnitsCase(_oneof_case_[0]);
}
Options::HasLanguageCase Options::has_language_case() const {
  return Options::HasLanguageCase(_oneof_case_[1]);
}
Options::HasDirectionsTypeCase Options::has_directions_type_case() const {
  return Options::HasDirectionsTypeCase(_oneof_case_[2]);
}
Options::HasFormatCase Options::has_format_case() const {
  return Options::HasFormatCase(_oneof_case_[3]);
}
Options::HasIdCase Options::has_id_case() const {
  return Options::HasIdCase(_oneof_case_[4]);
}
Options::HasJsonpCase Options::has_jsonp_case() const {
  return Options::HasJsonpCase(_oneof_case_[5]);
}
Options::HasEncodedPolylineCase Options::has_encoded_polyline_case() const {
  return Options::HasEncodedPolylineCase(_oneof_case_[6]);
}
Options::HasActionCase Options::has_action_case() const {
  return Options::HasActionCase(_oneof_case_[7]);
}
Options::HasRangeCase Options::has_range_case() const {
  return Options::HasRangeCase(_oneof_case_[8]);
}
Options::HasVerboseCase Options::has_verbose_case() const {
  return Options::HasVerboseCase(_oneof_case_[9]);
}
Options::HasCostingCase Options::has_costing_case() const {
  return Options::HasCostingCase(_oneof_case_[10]);
}
Options::HasDateTimeTypeCase Options::has_date_time_type_case() const {
  return Options::HasDateTimeTypeCase(_oneof_case_[11]);
}
Options::HasDateTimeCase Options::has_date_time_case() const {
  return Options::HasDateTimeCase(_oneof_case_[12]);
}
Options::HasResampleDistanceCase Options::has_resample_distance_case() const {
  return Options::HasResampleDistanceCase(_oneof_case_[13]);
}
Options::HasPolygonsCase Options::has_polygons_case() const {
  return Options::HasPolygonsCase(_oneof_case_[14]);
}
Options::HasDenoiseCase Options::has_denoise_case() const {
  return Options::HasDenoiseCase(_oneof_case_[15]);
}
Options::HasGeneralizeCase Options::has_generalize_case() const {
  return Options::HasGeneralizeCase(_oneof_case_[16]);
}
Options::HasShowLocationsCase Options::has_show_locations_case() const {
  return Options::HasShowLocationsCase(_oneof_case_[17]);
}
Options::HasShapeMatchCase Options::has_shape_match_case() const {
  return Options::HasShapeMatchCase(_oneof_case_[18]);
}
Options::HasGpsAccuracyCase Options::has_gps_accuracy_case() const {
  return Options::HasGpsAccuracyCase(_oneof_case_[19]);
}
Options::HasSearchRadiusCase Options::has_search_radius_case() const {
  return Options::HasSearchRadiusCase(_oneof_case_[20]);
}
Options::HasTurnPenaltyFactorCase Options::has_turn_penalty_factor_case() const {
  return Options::HasTurnPenaltyFactorCase(_oneof_case_[21]);
}
Options::HasBreakageDistanceCase Options::has_breakage_distance_case() const {
  return Options::HasBreakageDistanceCase(_oneof_case_[22]);
}
Options::HasUseTimestampsCase Options::has_use_timestamps_case() const {
  return Options::HasUseTimestampsCase(_oneof_case_[23]);
}
Options::HasShapeFormatCase Options::has_shape_format_case() const {
  return Options::HasShapeFormatCase(_oneof_case_[24]);
}
Options::HasAlternatesCase Options::has_alternates_case() const {
  return Options::HasAlternatesCase(_oneof_case_[25]);
}
Options::HasInterpolationDistanceCase Options::has_interpolation_distance_case() const {
  return Options::HasInterpolationDistanceCase(_oneof_case_[26]);
}
Options::HasGuidanceViewsCase Options::has_guidance_views_case() const {
  return Options::HasGuidanceViewsCase(_oneof_case_[27]);
}
Options::HasHeightPrecisionCase Options::has_height_precision_case() const {
  return Options::HasHeightPrecisionCase(_oneof_case_[28]);
}
Options::HasRoundaboutExitsCase Options::has_roundabout_exits_case() const {
  return Options::HasRoundaboutExitsCase(_oneof_case_[29]);
}
Options::HasLinearReferencesCase Options::has_linear_references_case() const {
  return Options::HasLinearReferencesCase(_oneof_case_[30]);
}
Options::HasPrioritizeBidirectionalCase Options::has_prioritize_bidirectional_case() const {
  return Options::HasPrioritizeBidirectionalCase(_oneof_case_[31]);
}
Options::HasExpansionActionCase Options::has_expansion_action_case() const {
  return Options::HasExpansionActionCase(_oneof_case_[32]);
}
Options::HasSkipOppositesCase Options::has_skip_opposites_case() const {
  return Options::HasSkipOppositesCase(_oneof_case_[33]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

// @@protoc_insertion_point(global_scope)
