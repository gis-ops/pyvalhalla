// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tripcommon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tripcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tripcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tripcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tripcommon_2eproto {
  static const uint32_t offsets[];
};
namespace valhalla {
class BikeShareStationInfo;
struct BikeShareStationInfoDefaultTypeInternal;
extern BikeShareStationInfoDefaultTypeInternal _BikeShareStationInfo_default_instance_;
class BoundingBox;
struct BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class LatLng;
struct LatLngDefaultTypeInternal;
extern LatLngDefaultTypeInternal _LatLng_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Location_PathEdge;
struct Location_PathEdgeDefaultTypeInternal;
extern Location_PathEdgeDefaultTypeInternal _Location_PathEdge_default_instance_;
class Location_SearchFilter;
struct Location_SearchFilterDefaultTypeInternal;
extern Location_SearchFilterDefaultTypeInternal _Location_SearchFilter_default_instance_;
class Pronunciation;
struct PronunciationDefaultTypeInternal;
extern PronunciationDefaultTypeInternal _Pronunciation_default_instance_;
class StreetName;
struct StreetNameDefaultTypeInternal;
extern StreetNameDefaultTypeInternal _StreetName_default_instance_;
class TaggedValue;
struct TaggedValueDefaultTypeInternal;
extern TaggedValueDefaultTypeInternal _TaggedValue_default_instance_;
class TransitEgressInfo;
struct TransitEgressInfoDefaultTypeInternal;
extern TransitEgressInfoDefaultTypeInternal _TransitEgressInfo_default_instance_;
class TransitPlatformInfo;
struct TransitPlatformInfoDefaultTypeInternal;
extern TransitPlatformInfoDefaultTypeInternal _TransitPlatformInfo_default_instance_;
class TransitRouteInfo;
struct TransitRouteInfoDefaultTypeInternal;
extern TransitRouteInfoDefaultTypeInternal _TransitRouteInfo_default_instance_;
class TransitStationInfo;
struct TransitStationInfoDefaultTypeInternal;
extern TransitStationInfoDefaultTypeInternal _TransitStationInfo_default_instance_;
class TurnLane;
struct TurnLaneDefaultTypeInternal;
extern TurnLaneDefaultTypeInternal _TurnLane_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::BikeShareStationInfo* Arena::CreateMaybeMessage<::valhalla::BikeShareStationInfo>(Arena*);
template<> ::valhalla::BoundingBox* Arena::CreateMaybeMessage<::valhalla::BoundingBox>(Arena*);
template<> ::valhalla::LatLng* Arena::CreateMaybeMessage<::valhalla::LatLng>(Arena*);
template<> ::valhalla::Location* Arena::CreateMaybeMessage<::valhalla::Location>(Arena*);
template<> ::valhalla::Location_PathEdge* Arena::CreateMaybeMessage<::valhalla::Location_PathEdge>(Arena*);
template<> ::valhalla::Location_SearchFilter* Arena::CreateMaybeMessage<::valhalla::Location_SearchFilter>(Arena*);
template<> ::valhalla::Pronunciation* Arena::CreateMaybeMessage<::valhalla::Pronunciation>(Arena*);
template<> ::valhalla::StreetName* Arena::CreateMaybeMessage<::valhalla::StreetName>(Arena*);
template<> ::valhalla::TaggedValue* Arena::CreateMaybeMessage<::valhalla::TaggedValue>(Arena*);
template<> ::valhalla::TransitEgressInfo* Arena::CreateMaybeMessage<::valhalla::TransitEgressInfo>(Arena*);
template<> ::valhalla::TransitPlatformInfo* Arena::CreateMaybeMessage<::valhalla::TransitPlatformInfo>(Arena*);
template<> ::valhalla::TransitRouteInfo* Arena::CreateMaybeMessage<::valhalla::TransitRouteInfo>(Arena*);
template<> ::valhalla::TransitStationInfo* Arena::CreateMaybeMessage<::valhalla::TransitStationInfo>(Arena*);
template<> ::valhalla::TurnLane* Arena::CreateMaybeMessage<::valhalla::TurnLane>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

enum Location_Type : int {
  Location_Type_kBreak = 0,
  Location_Type_kThrough = 1,
  Location_Type_kVia = 2,
  Location_Type_kBreakThrough = 3,
  Location_Type_Location_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Location_Type_Location_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Location_Type_IsValid(int value);
constexpr Location_Type Location_Type_Type_MIN = Location_Type_kBreak;
constexpr Location_Type Location_Type_Type_MAX = Location_Type_kBreakThrough;
constexpr int Location_Type_Type_ARRAYSIZE = Location_Type_Type_MAX + 1;

const std::string& Location_Type_Name(Location_Type value);
template<typename T>
inline const std::string& Location_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Location_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Location_Type_Name.");
  return Location_Type_Name(static_cast<Location_Type>(enum_t_value));
}
bool Location_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Location_Type* value);
enum Location_SideOfStreet : int {
  Location_SideOfStreet_kNone = 0,
  Location_SideOfStreet_kLeft = 1,
  Location_SideOfStreet_kRight = 2,
  Location_SideOfStreet_Location_SideOfStreet_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Location_SideOfStreet_Location_SideOfStreet_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Location_SideOfStreet_IsValid(int value);
constexpr Location_SideOfStreet Location_SideOfStreet_SideOfStreet_MIN = Location_SideOfStreet_kNone;
constexpr Location_SideOfStreet Location_SideOfStreet_SideOfStreet_MAX = Location_SideOfStreet_kRight;
constexpr int Location_SideOfStreet_SideOfStreet_ARRAYSIZE = Location_SideOfStreet_SideOfStreet_MAX + 1;

const std::string& Location_SideOfStreet_Name(Location_SideOfStreet value);
template<typename T>
inline const std::string& Location_SideOfStreet_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Location_SideOfStreet>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Location_SideOfStreet_Name.");
  return Location_SideOfStreet_Name(static_cast<Location_SideOfStreet>(enum_t_value));
}
bool Location_SideOfStreet_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Location_SideOfStreet* value);
enum Location_PreferredSide : int {
  Location_PreferredSide_either = 0,
  Location_PreferredSide_same = 1,
  Location_PreferredSide_opposite = 2,
  Location_PreferredSide_Location_PreferredSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Location_PreferredSide_Location_PreferredSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Location_PreferredSide_IsValid(int value);
constexpr Location_PreferredSide Location_PreferredSide_PreferredSide_MIN = Location_PreferredSide_either;
constexpr Location_PreferredSide Location_PreferredSide_PreferredSide_MAX = Location_PreferredSide_opposite;
constexpr int Location_PreferredSide_PreferredSide_ARRAYSIZE = Location_PreferredSide_PreferredSide_MAX + 1;

const std::string& Location_PreferredSide_Name(Location_PreferredSide value);
template<typename T>
inline const std::string& Location_PreferredSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Location_PreferredSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Location_PreferredSide_Name.");
  return Location_PreferredSide_Name(static_cast<Location_PreferredSide>(enum_t_value));
}
bool Location_PreferredSide_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Location_PreferredSide* value);
enum TransitPlatformInfo_Type : int {
  TransitPlatformInfo_Type_kStop = 0,
  TransitPlatformInfo_Type_kStation = 1,
  TransitPlatformInfo_Type_TransitPlatformInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransitPlatformInfo_Type_TransitPlatformInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransitPlatformInfo_Type_IsValid(int value);
constexpr TransitPlatformInfo_Type TransitPlatformInfo_Type_Type_MIN = TransitPlatformInfo_Type_kStop;
constexpr TransitPlatformInfo_Type TransitPlatformInfo_Type_Type_MAX = TransitPlatformInfo_Type_kStation;
constexpr int TransitPlatformInfo_Type_Type_ARRAYSIZE = TransitPlatformInfo_Type_Type_MAX + 1;

const std::string& TransitPlatformInfo_Type_Name(TransitPlatformInfo_Type value);
template<typename T>
inline const std::string& TransitPlatformInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitPlatformInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitPlatformInfo_Type_Name.");
  return TransitPlatformInfo_Type_Name(static_cast<TransitPlatformInfo_Type>(enum_t_value));
}
bool TransitPlatformInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitPlatformInfo_Type* value);
enum Pronunciation_Alphabet : int {
  Pronunciation_Alphabet_kIpa = 0,
  Pronunciation_Alphabet_kXKatakana = 1,
  Pronunciation_Alphabet_kXJeita = 2,
  Pronunciation_Alphabet_kNtSampa = 3,
  Pronunciation_Alphabet_Pronunciation_Alphabet_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Pronunciation_Alphabet_Pronunciation_Alphabet_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Pronunciation_Alphabet_IsValid(int value);
constexpr Pronunciation_Alphabet Pronunciation_Alphabet_Alphabet_MIN = Pronunciation_Alphabet_kIpa;
constexpr Pronunciation_Alphabet Pronunciation_Alphabet_Alphabet_MAX = Pronunciation_Alphabet_kNtSampa;
constexpr int Pronunciation_Alphabet_Alphabet_ARRAYSIZE = Pronunciation_Alphabet_Alphabet_MAX + 1;

const std::string& Pronunciation_Alphabet_Name(Pronunciation_Alphabet value);
template<typename T>
inline const std::string& Pronunciation_Alphabet_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pronunciation_Alphabet>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pronunciation_Alphabet_Name.");
  return Pronunciation_Alphabet_Name(static_cast<Pronunciation_Alphabet>(enum_t_value));
}
bool Pronunciation_Alphabet_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pronunciation_Alphabet* value);
enum TurnLane_State : int {
  TurnLane_State_kInvalid = 0,
  TurnLane_State_kValid = 1,
  TurnLane_State_kActive = 2,
  TurnLane_State_TurnLane_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TurnLane_State_TurnLane_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TurnLane_State_IsValid(int value);
constexpr TurnLane_State TurnLane_State_State_MIN = TurnLane_State_kInvalid;
constexpr TurnLane_State TurnLane_State_State_MAX = TurnLane_State_kActive;
constexpr int TurnLane_State_State_ARRAYSIZE = TurnLane_State_State_MAX + 1;

const std::string& TurnLane_State_Name(TurnLane_State value);
template<typename T>
inline const std::string& TurnLane_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TurnLane_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TurnLane_State_Name.");
  return TurnLane_State_Name(static_cast<TurnLane_State>(enum_t_value));
}
bool TurnLane_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TurnLane_State* value);
enum TaggedValue_Type : int {
  TaggedValue_Type_kNone = 0,
  TaggedValue_Type_kLayer = 1,
  TaggedValue_Type_kPronunciation = 2,
  TaggedValue_Type_kBssInfo = 3,
  TaggedValue_Type_kTunnel = 49,
  TaggedValue_Type_kBridge = 50,
  TaggedValue_Type_TaggedValue_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaggedValue_Type_TaggedValue_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaggedValue_Type_IsValid(int value);
constexpr TaggedValue_Type TaggedValue_Type_Type_MIN = TaggedValue_Type_kNone;
constexpr TaggedValue_Type TaggedValue_Type_Type_MAX = TaggedValue_Type_kBridge;
constexpr int TaggedValue_Type_Type_ARRAYSIZE = TaggedValue_Type_Type_MAX + 1;

const std::string& TaggedValue_Type_Name(TaggedValue_Type value);
template<typename T>
inline const std::string& TaggedValue_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaggedValue_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaggedValue_Type_Name.");
  return TaggedValue_Type_Name(static_cast<TaggedValue_Type>(enum_t_value));
}
bool TaggedValue_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaggedValue_Type* value);
enum RoadClass : int {
  kMotorway = 0,
  kTrunk = 1,
  kPrimary = 2,
  kSecondary = 3,
  kTertiary = 4,
  kUnclassified = 5,
  kResidential = 6,
  kServiceOther = 7,
  RoadClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoadClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoadClass_IsValid(int value);
constexpr RoadClass RoadClass_MIN = kMotorway;
constexpr RoadClass RoadClass_MAX = kServiceOther;
constexpr int RoadClass_ARRAYSIZE = RoadClass_MAX + 1;

const std::string& RoadClass_Name(RoadClass value);
template<typename T>
inline const std::string& RoadClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoadClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoadClass_Name.");
  return RoadClass_Name(static_cast<RoadClass>(enum_t_value));
}
bool RoadClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoadClass* value);
enum TravelMode : int {
  kDrive = 0,
  kPedestrian = 1,
  kBicycle = 2,
  kTransit = 3,
  TravelMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TravelMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TravelMode_IsValid(int value);
constexpr TravelMode TravelMode_MIN = kDrive;
constexpr TravelMode TravelMode_MAX = kTransit;
constexpr int TravelMode_ARRAYSIZE = TravelMode_MAX + 1;

const std::string& TravelMode_Name(TravelMode value);
template<typename T>
inline const std::string& TravelMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TravelMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TravelMode_Name.");
  return TravelMode_Name(static_cast<TravelMode>(enum_t_value));
}
bool TravelMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TravelMode* value);
enum VehicleType : int {
  kCar = 0,
  kMotorcycle = 1,
  kAutoBus = 2,
  kTractorTrailer = 3,
  kMotorScooter = 4,
  VehicleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleType_IsValid(int value);
constexpr VehicleType VehicleType_MIN = kCar;
constexpr VehicleType VehicleType_MAX = kMotorScooter;
constexpr int VehicleType_ARRAYSIZE = VehicleType_MAX + 1;

const std::string& VehicleType_Name(VehicleType value);
template<typename T>
inline const std::string& VehicleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleType_Name.");
  return VehicleType_Name(static_cast<VehicleType>(enum_t_value));
}
bool VehicleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleType* value);
enum PedestrianType : int {
  kFoot = 0,
  kWheelchair = 1,
  kSegway = 2,
  PedestrianType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PedestrianType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PedestrianType_IsValid(int value);
constexpr PedestrianType PedestrianType_MIN = kFoot;
constexpr PedestrianType PedestrianType_MAX = kSegway;
constexpr int PedestrianType_ARRAYSIZE = PedestrianType_MAX + 1;

const std::string& PedestrianType_Name(PedestrianType value);
template<typename T>
inline const std::string& PedestrianType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PedestrianType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PedestrianType_Name.");
  return PedestrianType_Name(static_cast<PedestrianType>(enum_t_value));
}
bool PedestrianType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PedestrianType* value);
enum BicycleType : int {
  kRoad = 0,
  kCross = 1,
  kHybrid = 2,
  kMountain = 3,
  BicycleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BicycleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BicycleType_IsValid(int value);
constexpr BicycleType BicycleType_MIN = kRoad;
constexpr BicycleType BicycleType_MAX = kMountain;
constexpr int BicycleType_ARRAYSIZE = BicycleType_MAX + 1;

const std::string& BicycleType_Name(BicycleType value);
template<typename T>
inline const std::string& BicycleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BicycleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BicycleType_Name.");
  return BicycleType_Name(static_cast<BicycleType>(enum_t_value));
}
bool BicycleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BicycleType* value);
enum TransitType : int {
  kTram = 0,
  kMetro = 1,
  kRail = 2,
  kBus = 3,
  kFerry = 4,
  kCableCar = 5,
  kGondola = 6,
  kFunicular = 7,
  TransitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransitType_IsValid(int value);
constexpr TransitType TransitType_MIN = kTram;
constexpr TransitType TransitType_MAX = kFunicular;
constexpr int TransitType_ARRAYSIZE = TransitType_MAX + 1;

const std::string& TransitType_Name(TransitType value);
template<typename T>
inline const std::string& TransitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitType_Name.");
  return TransitType_Name(static_cast<TransitType>(enum_t_value));
}
bool TransitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransitType* value);
// ===================================================================

class LatLng final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.LatLng) */ {
 public:
  inline LatLng() : LatLng(nullptr) {}
  ~LatLng() override;
  explicit PROTOBUF_CONSTEXPR LatLng(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatLng(const LatLng& from);
  LatLng(LatLng&& from) noexcept
    : LatLng() {
    *this = ::std::move(from);
  }

  inline LatLng& operator=(const LatLng& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatLng& operator=(LatLng&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LatLng& default_instance() {
    return *internal_default_instance();
  }
  enum HasLatCase {
    kLat = 1,
    HAS_LAT_NOT_SET = 0,
  };

  enum HasLngCase {
    kLng = 2,
    HAS_LNG_NOT_SET = 0,
  };

  static inline const LatLng* internal_default_instance() {
    return reinterpret_cast<const LatLng*>(
               &_LatLng_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LatLng& a, LatLng& b) {
    a.Swap(&b);
  }
  inline void Swap(LatLng* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatLng* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatLng* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatLng>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LatLng& from);
  void MergeFrom(const LatLng& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LatLng* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.LatLng";
  }
  protected:
  explicit LatLng(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  bool has_lng() const;
  private:
  bool _internal_has_lng() const;
  public:
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  void clear_has_lat();
  HasLatCase has_lat_case() const;
  void clear_has_lng();
  HasLngCase has_lng_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.LatLng)
 private:
  class _Internal;
  void set_has_lat();
  void set_has_lng();

  inline bool has_has_lat() const;
  inline void clear_has_has_lat();

  inline bool has_has_lng() const;
  inline void clear_has_has_lng();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasLatUnion {
      constexpr HasLatUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double lat_;
    } has_lat_;
    union HasLngUnion {
      constexpr HasLngUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double lng_;
    } has_lng_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.BoundingBox) */ {
 public:
  inline BoundingBox() : BoundingBox(nullptr) {}
  ~BoundingBox() override;
  explicit PROTOBUF_CONSTEXPR BoundingBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox(const BoundingBox& from);
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoundingBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoundingBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.BoundingBox";
  }
  protected:
  explicit BoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinLlFieldNumber = 1,
    kMaxLlFieldNumber = 2,
  };
  // .valhalla.LatLng min_ll = 1;
  bool has_min_ll() const;
  private:
  bool _internal_has_min_ll() const;
  public:
  void clear_min_ll();
  const ::valhalla::LatLng& min_ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_min_ll();
  ::valhalla::LatLng* mutable_min_ll();
  void set_allocated_min_ll(::valhalla::LatLng* min_ll);
  private:
  const ::valhalla::LatLng& _internal_min_ll() const;
  ::valhalla::LatLng* _internal_mutable_min_ll();
  public:
  void unsafe_arena_set_allocated_min_ll(
      ::valhalla::LatLng* min_ll);
  ::valhalla::LatLng* unsafe_arena_release_min_ll();

  // .valhalla.LatLng max_ll = 2;
  bool has_max_ll() const;
  private:
  bool _internal_has_max_ll() const;
  public:
  void clear_max_ll();
  const ::valhalla::LatLng& max_ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_max_ll();
  ::valhalla::LatLng* mutable_max_ll();
  void set_allocated_max_ll(::valhalla::LatLng* max_ll);
  private:
  const ::valhalla::LatLng& _internal_max_ll() const;
  ::valhalla::LatLng* _internal_mutable_max_ll();
  public:
  void unsafe_arena_set_allocated_max_ll(
      ::valhalla::LatLng* max_ll);
  ::valhalla::LatLng* unsafe_arena_release_max_ll();

  // @@protoc_insertion_point(class_scope:valhalla.BoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::valhalla::LatLng* min_ll_;
    ::valhalla::LatLng* max_ll_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class Location_PathEdge final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location.PathEdge) */ {
 public:
  inline Location_PathEdge() : Location_PathEdge(nullptr) {}
  ~Location_PathEdge() override;
  explicit PROTOBUF_CONSTEXPR Location_PathEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location_PathEdge(const Location_PathEdge& from);
  Location_PathEdge(Location_PathEdge&& from) noexcept
    : Location_PathEdge() {
    *this = ::std::move(from);
  }

  inline Location_PathEdge& operator=(const Location_PathEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location_PathEdge& operator=(Location_PathEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Location_PathEdge& default_instance() {
    return *internal_default_instance();
  }
  enum HasGraphIdCase {
    kGraphId = 1,
    HAS_GRAPH_ID_NOT_SET = 0,
  };

  enum HasPercentAlongCase {
    kPercentAlong = 2,
    HAS_PERCENT_ALONG_NOT_SET = 0,
  };

  enum HasSideOfStreetCase {
    kSideOfStreet = 4,
    HAS_SIDE_OF_STREET_NOT_SET = 0,
  };

  enum HasDistanceCase {
    kDistance = 5,
    HAS_DISTANCE_NOT_SET = 0,
  };

  enum HasMinimumReachabilityCase {
    kMinimumReachability = 6,
    HAS_MINIMUM_REACHABILITY_NOT_SET = 0,
  };

  enum HasBeginNodeCase {
    kBeginNode = 7,
    HAS_BEGIN_NODE_NOT_SET = 0,
  };

  enum HasEndNodeCase {
    kEndNode = 8,
    HAS_END_NODE_NOT_SET = 0,
  };

  enum HasOutboundReachCase {
    kOutboundReach = 11,
    HAS_OUTBOUND_REACH_NOT_SET = 0,
  };

  enum HasInboundReachCase {
    kInboundReach = 12,
    HAS_INBOUND_REACH_NOT_SET = 0,
  };

  enum HasHeadingCase {
    kHeading = 13,
    HAS_HEADING_NOT_SET = 0,
  };

  static inline const Location_PathEdge* internal_default_instance() {
    return reinterpret_cast<const Location_PathEdge*>(
               &_Location_PathEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Location_PathEdge& a, Location_PathEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(Location_PathEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location_PathEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location_PathEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location_PathEdge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Location_PathEdge& from);
  void MergeFrom(const Location_PathEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location_PathEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Location.PathEdge";
  }
  protected:
  explicit Location_PathEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 10,
    kLlFieldNumber = 3,
    kGraphIdFieldNumber = 1,
    kPercentAlongFieldNumber = 2,
    kSideOfStreetFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kMinimumReachabilityFieldNumber = 6,
    kBeginNodeFieldNumber = 7,
    kEndNodeFieldNumber = 8,
    kOutboundReachFieldNumber = 11,
    kInboundReachFieldNumber = 12,
    kHeadingFieldNumber = 13,
  };
  // repeated string names = 10;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .valhalla.LatLng ll = 3;
  bool has_ll() const;
  private:
  bool _internal_has_ll() const;
  public:
  void clear_ll();
  const ::valhalla::LatLng& ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_ll();
  ::valhalla::LatLng* mutable_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);
  private:
  const ::valhalla::LatLng& _internal_ll() const;
  ::valhalla::LatLng* _internal_mutable_ll();
  public:
  void unsafe_arena_set_allocated_ll(
      ::valhalla::LatLng* ll);
  ::valhalla::LatLng* unsafe_arena_release_ll();

  // uint64 graph_id = 1;
  bool has_graph_id() const;
  private:
  bool _internal_has_graph_id() const;
  public:
  void clear_graph_id();
  uint64_t graph_id() const;
  void set_graph_id(uint64_t value);
  private:
  uint64_t _internal_graph_id() const;
  void _internal_set_graph_id(uint64_t value);
  public:

  // double percent_along = 2;
  bool has_percent_along() const;
  private:
  bool _internal_has_percent_along() const;
  public:
  void clear_percent_along();
  double percent_along() const;
  void set_percent_along(double value);
  private:
  double _internal_percent_along() const;
  void _internal_set_percent_along(double value);
  public:

  // .valhalla.Location.SideOfStreet side_of_street = 4;
  bool has_side_of_street() const;
  private:
  bool _internal_has_side_of_street() const;
  public:
  void clear_side_of_street();
  ::valhalla::Location_SideOfStreet side_of_street() const;
  void set_side_of_street(::valhalla::Location_SideOfStreet value);
  private:
  ::valhalla::Location_SideOfStreet _internal_side_of_street() const;
  void _internal_set_side_of_street(::valhalla::Location_SideOfStreet value);
  public:

  // double distance = 5;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // int32 minimum_reachability = 6;
  bool has_minimum_reachability() const;
  private:
  bool _internal_has_minimum_reachability() const;
  public:
  void clear_minimum_reachability();
  int32_t minimum_reachability() const;
  void set_minimum_reachability(int32_t value);
  private:
  int32_t _internal_minimum_reachability() const;
  void _internal_set_minimum_reachability(int32_t value);
  public:

  // bool begin_node = 7;
  bool has_begin_node() const;
  private:
  bool _internal_has_begin_node() const;
  public:
  void clear_begin_node();
  bool begin_node() const;
  void set_begin_node(bool value);
  private:
  bool _internal_begin_node() const;
  void _internal_set_begin_node(bool value);
  public:

  // bool end_node = 8;
  bool has_end_node() const;
  private:
  bool _internal_has_end_node() const;
  public:
  void clear_end_node();
  bool end_node() const;
  void set_end_node(bool value);
  private:
  bool _internal_end_node() const;
  void _internal_set_end_node(bool value);
  public:

  // int32 outbound_reach = 11;
  bool has_outbound_reach() const;
  private:
  bool _internal_has_outbound_reach() const;
  public:
  void clear_outbound_reach();
  int32_t outbound_reach() const;
  void set_outbound_reach(int32_t value);
  private:
  int32_t _internal_outbound_reach() const;
  void _internal_set_outbound_reach(int32_t value);
  public:

  // int32 inbound_reach = 12;
  bool has_inbound_reach() const;
  private:
  bool _internal_has_inbound_reach() const;
  public:
  void clear_inbound_reach();
  int32_t inbound_reach() const;
  void set_inbound_reach(int32_t value);
  private:
  int32_t _internal_inbound_reach() const;
  void _internal_set_inbound_reach(int32_t value);
  public:

  // float heading = 13;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  void clear_has_graph_id();
  HasGraphIdCase has_graph_id_case() const;
  void clear_has_percent_along();
  HasPercentAlongCase has_percent_along_case() const;
  void clear_has_side_of_street();
  HasSideOfStreetCase has_side_of_street_case() const;
  void clear_has_distance();
  HasDistanceCase has_distance_case() const;
  void clear_has_minimum_reachability();
  HasMinimumReachabilityCase has_minimum_reachability_case() const;
  void clear_has_begin_node();
  HasBeginNodeCase has_begin_node_case() const;
  void clear_has_end_node();
  HasEndNodeCase has_end_node_case() const;
  void clear_has_outbound_reach();
  HasOutboundReachCase has_outbound_reach_case() const;
  void clear_has_inbound_reach();
  HasInboundReachCase has_inbound_reach_case() const;
  void clear_has_heading();
  HasHeadingCase has_heading_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location.PathEdge)
 private:
  class _Internal;
  void set_has_graph_id();
  void set_has_percent_along();
  void set_has_side_of_street();
  void set_has_distance();
  void set_has_minimum_reachability();
  void set_has_begin_node();
  void set_has_end_node();
  void set_has_outbound_reach();
  void set_has_inbound_reach();
  void set_has_heading();

  inline bool has_has_graph_id() const;
  inline void clear_has_has_graph_id();

  inline bool has_has_percent_along() const;
  inline void clear_has_has_percent_along();

  inline bool has_has_side_of_street() const;
  inline void clear_has_has_side_of_street();

  inline bool has_has_distance() const;
  inline void clear_has_has_distance();

  inline bool has_has_minimum_reachability() const;
  inline void clear_has_has_minimum_reachability();

  inline bool has_has_begin_node() const;
  inline void clear_has_has_begin_node();

  inline bool has_has_end_node() const;
  inline void clear_has_has_end_node();

  inline bool has_has_outbound_reach() const;
  inline void clear_has_has_outbound_reach();

  inline bool has_has_inbound_reach() const;
  inline void clear_has_has_inbound_reach();

  inline bool has_has_heading() const;
  inline void clear_has_has_heading();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::valhalla::LatLng* ll_;
    union HasGraphIdUnion {
      constexpr HasGraphIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t graph_id_;
    } has_graph_id_;
    union HasPercentAlongUnion {
      constexpr HasPercentAlongUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double percent_along_;
    } has_percent_along_;
    union HasSideOfStreetUnion {
      constexpr HasSideOfStreetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int side_of_street_;
    } has_side_of_street_;
    union HasDistanceUnion {
      constexpr HasDistanceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double distance_;
    } has_distance_;
    union HasMinimumReachabilityUnion {
      constexpr HasMinimumReachabilityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t minimum_reachability_;
    } has_minimum_reachability_;
    union HasBeginNodeUnion {
      constexpr HasBeginNodeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool begin_node_;
    } has_begin_node_;
    union HasEndNodeUnion {
      constexpr HasEndNodeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool end_node_;
    } has_end_node_;
    union HasOutboundReachUnion {
      constexpr HasOutboundReachUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t outbound_reach_;
    } has_outbound_reach_;
    union HasInboundReachUnion {
      constexpr HasInboundReachUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t inbound_reach_;
    } has_inbound_reach_;
    union HasHeadingUnion {
      constexpr HasHeadingUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float heading_;
    } has_heading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[10];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class Location_SearchFilter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location.SearchFilter) */ {
 public:
  inline Location_SearchFilter() : Location_SearchFilter(nullptr) {}
  ~Location_SearchFilter() override;
  explicit PROTOBUF_CONSTEXPR Location_SearchFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location_SearchFilter(const Location_SearchFilter& from);
  Location_SearchFilter(Location_SearchFilter&& from) noexcept
    : Location_SearchFilter() {
    *this = ::std::move(from);
  }

  inline Location_SearchFilter& operator=(const Location_SearchFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location_SearchFilter& operator=(Location_SearchFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Location_SearchFilter& default_instance() {
    return *internal_default_instance();
  }
  enum HasMinRoadClassCase {
    kMinRoadClass = 1,
    HAS_MIN_ROAD_CLASS_NOT_SET = 0,
  };

  enum HasMaxRoadClassCase {
    kMaxRoadClass = 2,
    HAS_MAX_ROAD_CLASS_NOT_SET = 0,
  };

  enum HasExcludeTunnelCase {
    kExcludeTunnel = 3,
    HAS_EXCLUDE_TUNNEL_NOT_SET = 0,
  };

  enum HasExcludeBridgeCase {
    kExcludeBridge = 4,
    HAS_EXCLUDE_BRIDGE_NOT_SET = 0,
  };

  enum HasExcludeRampCase {
    kExcludeRamp = 5,
    HAS_EXCLUDE_RAMP_NOT_SET = 0,
  };

  enum HasExcludeClosuresCase {
    kExcludeClosures = 6,
    HAS_EXCLUDE_CLOSURES_NOT_SET = 0,
  };

  static inline const Location_SearchFilter* internal_default_instance() {
    return reinterpret_cast<const Location_SearchFilter*>(
               &_Location_SearchFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Location_SearchFilter& a, Location_SearchFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(Location_SearchFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location_SearchFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location_SearchFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location_SearchFilter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Location_SearchFilter& from);
  void MergeFrom(const Location_SearchFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location_SearchFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Location.SearchFilter";
  }
  protected:
  explicit Location_SearchFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinRoadClassFieldNumber = 1,
    kMaxRoadClassFieldNumber = 2,
    kExcludeTunnelFieldNumber = 3,
    kExcludeBridgeFieldNumber = 4,
    kExcludeRampFieldNumber = 5,
    kExcludeClosuresFieldNumber = 6,
  };
  // .valhalla.RoadClass min_road_class = 1;
  bool has_min_road_class() const;
  private:
  bool _internal_has_min_road_class() const;
  public:
  void clear_min_road_class();
  ::valhalla::RoadClass min_road_class() const;
  void set_min_road_class(::valhalla::RoadClass value);
  private:
  ::valhalla::RoadClass _internal_min_road_class() const;
  void _internal_set_min_road_class(::valhalla::RoadClass value);
  public:

  // .valhalla.RoadClass max_road_class = 2;
  bool has_max_road_class() const;
  private:
  bool _internal_has_max_road_class() const;
  public:
  void clear_max_road_class();
  ::valhalla::RoadClass max_road_class() const;
  void set_max_road_class(::valhalla::RoadClass value);
  private:
  ::valhalla::RoadClass _internal_max_road_class() const;
  void _internal_set_max_road_class(::valhalla::RoadClass value);
  public:

  // bool exclude_tunnel = 3;
  bool has_exclude_tunnel() const;
  private:
  bool _internal_has_exclude_tunnel() const;
  public:
  void clear_exclude_tunnel();
  bool exclude_tunnel() const;
  void set_exclude_tunnel(bool value);
  private:
  bool _internal_exclude_tunnel() const;
  void _internal_set_exclude_tunnel(bool value);
  public:

  // bool exclude_bridge = 4;
  bool has_exclude_bridge() const;
  private:
  bool _internal_has_exclude_bridge() const;
  public:
  void clear_exclude_bridge();
  bool exclude_bridge() const;
  void set_exclude_bridge(bool value);
  private:
  bool _internal_exclude_bridge() const;
  void _internal_set_exclude_bridge(bool value);
  public:

  // bool exclude_ramp = 5;
  bool has_exclude_ramp() const;
  private:
  bool _internal_has_exclude_ramp() const;
  public:
  void clear_exclude_ramp();
  bool exclude_ramp() const;
  void set_exclude_ramp(bool value);
  private:
  bool _internal_exclude_ramp() const;
  void _internal_set_exclude_ramp(bool value);
  public:

  // bool exclude_closures = 6;
  bool has_exclude_closures() const;
  private:
  bool _internal_has_exclude_closures() const;
  public:
  void clear_exclude_closures();
  bool exclude_closures() const;
  void set_exclude_closures(bool value);
  private:
  bool _internal_exclude_closures() const;
  void _internal_set_exclude_closures(bool value);
  public:

  void clear_has_min_road_class();
  HasMinRoadClassCase has_min_road_class_case() const;
  void clear_has_max_road_class();
  HasMaxRoadClassCase has_max_road_class_case() const;
  void clear_has_exclude_tunnel();
  HasExcludeTunnelCase has_exclude_tunnel_case() const;
  void clear_has_exclude_bridge();
  HasExcludeBridgeCase has_exclude_bridge_case() const;
  void clear_has_exclude_ramp();
  HasExcludeRampCase has_exclude_ramp_case() const;
  void clear_has_exclude_closures();
  HasExcludeClosuresCase has_exclude_closures_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location.SearchFilter)
 private:
  class _Internal;
  void set_has_min_road_class();
  void set_has_max_road_class();
  void set_has_exclude_tunnel();
  void set_has_exclude_bridge();
  void set_has_exclude_ramp();
  void set_has_exclude_closures();

  inline bool has_has_min_road_class() const;
  inline void clear_has_has_min_road_class();

  inline bool has_has_max_road_class() const;
  inline void clear_has_has_max_road_class();

  inline bool has_has_exclude_tunnel() const;
  inline void clear_has_has_exclude_tunnel();

  inline bool has_has_exclude_bridge() const;
  inline void clear_has_has_exclude_bridge();

  inline bool has_has_exclude_ramp() const;
  inline void clear_has_has_exclude_ramp();

  inline bool has_has_exclude_closures() const;
  inline void clear_has_has_exclude_closures();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasMinRoadClassUnion {
      constexpr HasMinRoadClassUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int min_road_class_;
    } has_min_road_class_;
    union HasMaxRoadClassUnion {
      constexpr HasMaxRoadClassUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int max_road_class_;
    } has_max_road_class_;
    union HasExcludeTunnelUnion {
      constexpr HasExcludeTunnelUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool exclude_tunnel_;
    } has_exclude_tunnel_;
    union HasExcludeBridgeUnion {
      constexpr HasExcludeBridgeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool exclude_bridge_;
    } has_exclude_bridge_;
    union HasExcludeRampUnion {
      constexpr HasExcludeRampUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool exclude_ramp_;
    } has_exclude_ramp_;
    union HasExcludeClosuresUnion {
      constexpr HasExcludeClosuresUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool exclude_closures_;
    } has_exclude_closures_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[6];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Location& default_instance() {
    return *internal_default_instance();
  }
  enum HasTypeCase {
    kType = 2,
    HAS_TYPE_NOT_SET = 0,
  };

  enum HasHeadingCase {
    kHeading = 3,
    HAS_HEADING_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 4,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasStreetCase {
    kStreet = 5,
    HAS_STREET_NOT_SET = 0,
  };

  enum HasCityCase {
    kCity = 6,
    HAS_CITY_NOT_SET = 0,
  };

  enum HasStateCase {
    kState = 7,
    HAS_STATE_NOT_SET = 0,
  };

  enum HasPostalCodeCase {
    kPostalCode = 8,
    HAS_POSTAL_CODE_NOT_SET = 0,
  };

  enum HasCountryCase {
    kCountry = 9,
    HAS_COUNTRY_NOT_SET = 0,
  };

  enum HasPhoneCase {
    kPhone = 10,
    HAS_PHONE_NOT_SET = 0,
  };

  enum HasUrlCase {
    kUrl = 11,
    HAS_URL_NOT_SET = 0,
  };

  enum HasDateTimeCase {
    kDateTime = 12,
    HAS_DATE_TIME_NOT_SET = 0,
  };

  enum HasSideOfStreetCase {
    kSideOfStreet = 13,
    HAS_SIDE_OF_STREET_NOT_SET = 0,
  };

  enum HasHeadingToleranceCase {
    kHeadingTolerance = 14,
    HAS_HEADING_TOLERANCE_NOT_SET = 0,
  };

  enum HasNodeSnapToleranceCase {
    kNodeSnapTolerance = 15,
    HAS_NODE_SNAP_TOLERANCE_NOT_SET = 0,
  };

  enum HasWayIdCase {
    kWayId = 16,
    HAS_WAY_ID_NOT_SET = 0,
  };

  enum HasMinimumReachabilityCase {
    kMinimumReachability = 17,
    HAS_MINIMUM_REACHABILITY_NOT_SET = 0,
  };

  enum HasRadiusCase {
    kRadius = 18,
    HAS_RADIUS_NOT_SET = 0,
  };

  enum HasAccuracyCase {
    kAccuracy = 19,
    HAS_ACCURACY_NOT_SET = 0,
  };

  enum HasTimeCase {
    kTime = 20,
    HAS_TIME_NOT_SET = 0,
  };

  enum HasSkipRankingCandidatesCase {
    kSkipRankingCandidates = 21,
    HAS_SKIP_RANKING_CANDIDATES_NOT_SET = 0,
  };

  enum HasOriginalIndexCase {
    kOriginalIndex = 24,
    HAS_ORIGINAL_INDEX_NOT_SET = 0,
  };

  enum HasLegShapeIndexCase {
    kLegShapeIndex = 35,
    HAS_LEG_SHAPE_INDEX_NOT_SET = 0,
  };

  enum HasDistanceFromLegOriginCase {
    kDistanceFromLegOrigin = 36,
    HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET = 0,
  };

  enum HasPreferredSideCase {
    kPreferredSide = 26,
    HAS_PREFERRED_SIDE_NOT_SET = 0,
  };

  enum HasSearchCutoffCase {
    kSearchCutoff = 28,
    HAS_SEARCH_CUTOFF_NOT_SET = 0,
  };

  enum HasStreetSideToleranceCase {
    kStreetSideTolerance = 29,
    HAS_STREET_SIDE_TOLERANCE_NOT_SET = 0,
  };

  enum HasRouteIndexCase {
    kRouteIndex = 30,
    HAS_ROUTE_INDEX_NOT_SET = 0,
  };

  enum HasWaypointIndexCase {
    kWaypointIndex = 31,
    HAS_WAYPOINT_INDEX_NOT_SET = 0,
  };

  enum HasStreetSideMaxDistanceCase {
    kStreetSideMaxDistance = 33,
    HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET = 0,
  };

  enum HasPreferredLayerCase {
    kPreferredLayer = 34,
    HAS_PREFERRED_LAYER_NOT_SET = 0,
  };

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Location_PathEdge PathEdge;
  typedef Location_SearchFilter SearchFilter;

  typedef Location_Type Type;
  static constexpr Type kBreak =
    Location_Type_kBreak;
  static constexpr Type kThrough =
    Location_Type_kThrough;
  static constexpr Type kVia =
    Location_Type_kVia;
  static constexpr Type kBreakThrough =
    Location_Type_kBreakThrough;
  static inline bool Type_IsValid(int value) {
    return Location_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Location_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Location_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Location_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Location_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Location_Type_Parse(name, value);
  }

  typedef Location_SideOfStreet SideOfStreet;
  static constexpr SideOfStreet kNone =
    Location_SideOfStreet_kNone;
  static constexpr SideOfStreet kLeft =
    Location_SideOfStreet_kLeft;
  static constexpr SideOfStreet kRight =
    Location_SideOfStreet_kRight;
  static inline bool SideOfStreet_IsValid(int value) {
    return Location_SideOfStreet_IsValid(value);
  }
  static constexpr SideOfStreet SideOfStreet_MIN =
    Location_SideOfStreet_SideOfStreet_MIN;
  static constexpr SideOfStreet SideOfStreet_MAX =
    Location_SideOfStreet_SideOfStreet_MAX;
  static constexpr int SideOfStreet_ARRAYSIZE =
    Location_SideOfStreet_SideOfStreet_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SideOfStreet_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SideOfStreet>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SideOfStreet_Name.");
    return Location_SideOfStreet_Name(enum_t_value);
  }
  static inline bool SideOfStreet_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SideOfStreet* value) {
    return Location_SideOfStreet_Parse(name, value);
  }

  typedef Location_PreferredSide PreferredSide;
  static constexpr PreferredSide either =
    Location_PreferredSide_either;
  static constexpr PreferredSide same =
    Location_PreferredSide_same;
  static constexpr PreferredSide opposite =
    Location_PreferredSide_opposite;
  static inline bool PreferredSide_IsValid(int value) {
    return Location_PreferredSide_IsValid(value);
  }
  static constexpr PreferredSide PreferredSide_MIN =
    Location_PreferredSide_PreferredSide_MIN;
  static constexpr PreferredSide PreferredSide_MAX =
    Location_PreferredSide_PreferredSide_MAX;
  static constexpr int PreferredSide_ARRAYSIZE =
    Location_PreferredSide_PreferredSide_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PreferredSide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PreferredSide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PreferredSide_Name.");
    return Location_PreferredSide_Name(enum_t_value);
  }
  static inline bool PreferredSide_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PreferredSide* value) {
    return Location_PreferredSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathEdgesFieldNumber = 22,
    kFilteredEdgesFieldNumber = 23,
    kLlFieldNumber = 1,
    kProjectedLlFieldNumber = 25,
    kDisplayLlFieldNumber = 27,
    kSearchFilterFieldNumber = 32,
    kTypeFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kNameFieldNumber = 4,
    kStreetFieldNumber = 5,
    kCityFieldNumber = 6,
    kStateFieldNumber = 7,
    kPostalCodeFieldNumber = 8,
    kCountryFieldNumber = 9,
    kPhoneFieldNumber = 10,
    kUrlFieldNumber = 11,
    kDateTimeFieldNumber = 12,
    kSideOfStreetFieldNumber = 13,
    kHeadingToleranceFieldNumber = 14,
    kNodeSnapToleranceFieldNumber = 15,
    kWayIdFieldNumber = 16,
    kMinimumReachabilityFieldNumber = 17,
    kRadiusFieldNumber = 18,
    kAccuracyFieldNumber = 19,
    kTimeFieldNumber = 20,
    kSkipRankingCandidatesFieldNumber = 21,
    kOriginalIndexFieldNumber = 24,
    kLegShapeIndexFieldNumber = 35,
    kDistanceFromLegOriginFieldNumber = 36,
    kPreferredSideFieldNumber = 26,
    kSearchCutoffFieldNumber = 28,
    kStreetSideToleranceFieldNumber = 29,
    kRouteIndexFieldNumber = 30,
    kWaypointIndexFieldNumber = 31,
    kStreetSideMaxDistanceFieldNumber = 33,
    kPreferredLayerFieldNumber = 34,
  };
  // repeated .valhalla.Location.PathEdge path_edges = 22;
  int path_edges_size() const;
  private:
  int _internal_path_edges_size() const;
  public:
  void clear_path_edges();
  ::valhalla::Location_PathEdge* mutable_path_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >*
      mutable_path_edges();
  private:
  const ::valhalla::Location_PathEdge& _internal_path_edges(int index) const;
  ::valhalla::Location_PathEdge* _internal_add_path_edges();
  public:
  const ::valhalla::Location_PathEdge& path_edges(int index) const;
  ::valhalla::Location_PathEdge* add_path_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >&
      path_edges() const;

  // repeated .valhalla.Location.PathEdge filtered_edges = 23;
  int filtered_edges_size() const;
  private:
  int _internal_filtered_edges_size() const;
  public:
  void clear_filtered_edges();
  ::valhalla::Location_PathEdge* mutable_filtered_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >*
      mutable_filtered_edges();
  private:
  const ::valhalla::Location_PathEdge& _internal_filtered_edges(int index) const;
  ::valhalla::Location_PathEdge* _internal_add_filtered_edges();
  public:
  const ::valhalla::Location_PathEdge& filtered_edges(int index) const;
  ::valhalla::Location_PathEdge* add_filtered_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >&
      filtered_edges() const;

  // .valhalla.LatLng ll = 1;
  bool has_ll() const;
  private:
  bool _internal_has_ll() const;
  public:
  void clear_ll();
  const ::valhalla::LatLng& ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_ll();
  ::valhalla::LatLng* mutable_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);
  private:
  const ::valhalla::LatLng& _internal_ll() const;
  ::valhalla::LatLng* _internal_mutable_ll();
  public:
  void unsafe_arena_set_allocated_ll(
      ::valhalla::LatLng* ll);
  ::valhalla::LatLng* unsafe_arena_release_ll();

  // .valhalla.LatLng projected_ll = 25;
  bool has_projected_ll() const;
  private:
  bool _internal_has_projected_ll() const;
  public:
  void clear_projected_ll();
  const ::valhalla::LatLng& projected_ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_projected_ll();
  ::valhalla::LatLng* mutable_projected_ll();
  void set_allocated_projected_ll(::valhalla::LatLng* projected_ll);
  private:
  const ::valhalla::LatLng& _internal_projected_ll() const;
  ::valhalla::LatLng* _internal_mutable_projected_ll();
  public:
  void unsafe_arena_set_allocated_projected_ll(
      ::valhalla::LatLng* projected_ll);
  ::valhalla::LatLng* unsafe_arena_release_projected_ll();

  // .valhalla.LatLng display_ll = 27;
  bool has_display_ll() const;
  private:
  bool _internal_has_display_ll() const;
  public:
  void clear_display_ll();
  const ::valhalla::LatLng& display_ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_display_ll();
  ::valhalla::LatLng* mutable_display_ll();
  void set_allocated_display_ll(::valhalla::LatLng* display_ll);
  private:
  const ::valhalla::LatLng& _internal_display_ll() const;
  ::valhalla::LatLng* _internal_mutable_display_ll();
  public:
  void unsafe_arena_set_allocated_display_ll(
      ::valhalla::LatLng* display_ll);
  ::valhalla::LatLng* unsafe_arena_release_display_ll();

  // .valhalla.Location.SearchFilter search_filter = 32;
  bool has_search_filter() const;
  private:
  bool _internal_has_search_filter() const;
  public:
  void clear_search_filter();
  const ::valhalla::Location_SearchFilter& search_filter() const;
  PROTOBUF_NODISCARD ::valhalla::Location_SearchFilter* release_search_filter();
  ::valhalla::Location_SearchFilter* mutable_search_filter();
  void set_allocated_search_filter(::valhalla::Location_SearchFilter* search_filter);
  private:
  const ::valhalla::Location_SearchFilter& _internal_search_filter() const;
  ::valhalla::Location_SearchFilter* _internal_mutable_search_filter();
  public:
  void unsafe_arena_set_allocated_search_filter(
      ::valhalla::Location_SearchFilter* search_filter);
  ::valhalla::Location_SearchFilter* unsafe_arena_release_search_filter();

  // .valhalla.Location.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::valhalla::Location_Type type() const;
  void set_type(::valhalla::Location_Type value);
  private:
  ::valhalla::Location_Type _internal_type() const;
  void _internal_set_type(::valhalla::Location_Type value);
  public:

  // uint32 heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  uint32_t heading() const;
  void set_heading(uint32_t value);
  private:
  uint32_t _internal_heading() const;
  void _internal_set_heading(uint32_t value);
  public:

  // string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string street = 5;
  bool has_street() const;
  private:
  bool _internal_has_street() const;
  public:
  void clear_street();
  const std::string& street() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_street(ArgT0&& arg0, ArgT... args);
  std::string* mutable_street();
  PROTOBUF_NODISCARD std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string city = 6;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string state = 7;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string postal_code = 8;
  bool has_postal_code() const;
  private:
  bool _internal_has_postal_code() const;
  public:
  void clear_postal_code();
  const std::string& postal_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postal_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postal_code();
  PROTOBUF_NODISCARD std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string country = 9;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string phone = 10;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string url = 11;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string date_time = 12;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;
  public:
  void clear_date_time();
  const std::string& date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time();
  PROTOBUF_NODISCARD std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // .valhalla.Location.SideOfStreet side_of_street = 13;
  bool has_side_of_street() const;
  private:
  bool _internal_has_side_of_street() const;
  public:
  void clear_side_of_street();
  ::valhalla::Location_SideOfStreet side_of_street() const;
  void set_side_of_street(::valhalla::Location_SideOfStreet value);
  private:
  ::valhalla::Location_SideOfStreet _internal_side_of_street() const;
  void _internal_set_side_of_street(::valhalla::Location_SideOfStreet value);
  public:

  // uint32 heading_tolerance = 14;
  bool has_heading_tolerance() const;
  private:
  bool _internal_has_heading_tolerance() const;
  public:
  void clear_heading_tolerance();
  uint32_t heading_tolerance() const;
  void set_heading_tolerance(uint32_t value);
  private:
  uint32_t _internal_heading_tolerance() const;
  void _internal_set_heading_tolerance(uint32_t value);
  public:

  // uint32 node_snap_tolerance = 15;
  bool has_node_snap_tolerance() const;
  private:
  bool _internal_has_node_snap_tolerance() const;
  public:
  void clear_node_snap_tolerance();
  uint32_t node_snap_tolerance() const;
  void set_node_snap_tolerance(uint32_t value);
  private:
  uint32_t _internal_node_snap_tolerance() const;
  void _internal_set_node_snap_tolerance(uint32_t value);
  public:

  // uint64 way_id = 16;
  bool has_way_id() const;
  private:
  bool _internal_has_way_id() const;
  public:
  void clear_way_id();
  uint64_t way_id() const;
  void set_way_id(uint64_t value);
  private:
  uint64_t _internal_way_id() const;
  void _internal_set_way_id(uint64_t value);
  public:

  // uint32 minimum_reachability = 17;
  bool has_minimum_reachability() const;
  private:
  bool _internal_has_minimum_reachability() const;
  public:
  void clear_minimum_reachability();
  uint32_t minimum_reachability() const;
  void set_minimum_reachability(uint32_t value);
  private:
  uint32_t _internal_minimum_reachability() const;
  void _internal_set_minimum_reachability(uint32_t value);
  public:

  // uint32 radius = 18;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  uint32_t radius() const;
  void set_radius(uint32_t value);
  private:
  uint32_t _internal_radius() const;
  void _internal_set_radius(uint32_t value);
  public:

  // uint32 accuracy = 19;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  uint32_t accuracy() const;
  void set_accuracy(uint32_t value);
  private:
  uint32_t _internal_accuracy() const;
  void _internal_set_accuracy(uint32_t value);
  public:

  // double time = 20;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // bool skip_ranking_candidates = 21;
  bool has_skip_ranking_candidates() const;
  private:
  bool _internal_has_skip_ranking_candidates() const;
  public:
  void clear_skip_ranking_candidates();
  bool skip_ranking_candidates() const;
  void set_skip_ranking_candidates(bool value);
  private:
  bool _internal_skip_ranking_candidates() const;
  void _internal_set_skip_ranking_candidates(bool value);
  public:

  // uint32 original_index = 24;
  bool has_original_index() const;
  private:
  bool _internal_has_original_index() const;
  public:
  void clear_original_index();
  uint32_t original_index() const;
  void set_original_index(uint32_t value);
  private:
  uint32_t _internal_original_index() const;
  void _internal_set_original_index(uint32_t value);
  public:

  // uint32 leg_shape_index = 35;
  bool has_leg_shape_index() const;
  private:
  bool _internal_has_leg_shape_index() const;
  public:
  void clear_leg_shape_index();
  uint32_t leg_shape_index() const;
  void set_leg_shape_index(uint32_t value);
  private:
  uint32_t _internal_leg_shape_index() const;
  void _internal_set_leg_shape_index(uint32_t value);
  public:

  // double distance_from_leg_origin = 36;
  bool has_distance_from_leg_origin() const;
  private:
  bool _internal_has_distance_from_leg_origin() const;
  public:
  void clear_distance_from_leg_origin();
  double distance_from_leg_origin() const;
  void set_distance_from_leg_origin(double value);
  private:
  double _internal_distance_from_leg_origin() const;
  void _internal_set_distance_from_leg_origin(double value);
  public:

  // .valhalla.Location.PreferredSide preferred_side = 26;
  bool has_preferred_side() const;
  private:
  bool _internal_has_preferred_side() const;
  public:
  void clear_preferred_side();
  ::valhalla::Location_PreferredSide preferred_side() const;
  void set_preferred_side(::valhalla::Location_PreferredSide value);
  private:
  ::valhalla::Location_PreferredSide _internal_preferred_side() const;
  void _internal_set_preferred_side(::valhalla::Location_PreferredSide value);
  public:

  // uint32 search_cutoff = 28;
  bool has_search_cutoff() const;
  private:
  bool _internal_has_search_cutoff() const;
  public:
  void clear_search_cutoff();
  uint32_t search_cutoff() const;
  void set_search_cutoff(uint32_t value);
  private:
  uint32_t _internal_search_cutoff() const;
  void _internal_set_search_cutoff(uint32_t value);
  public:

  // uint32 street_side_tolerance = 29;
  bool has_street_side_tolerance() const;
  private:
  bool _internal_has_street_side_tolerance() const;
  public:
  void clear_street_side_tolerance();
  uint32_t street_side_tolerance() const;
  void set_street_side_tolerance(uint32_t value);
  private:
  uint32_t _internal_street_side_tolerance() const;
  void _internal_set_street_side_tolerance(uint32_t value);
  public:

  // uint32 route_index = 30;
  bool has_route_index() const;
  private:
  bool _internal_has_route_index() const;
  public:
  void clear_route_index();
  uint32_t route_index() const;
  void set_route_index(uint32_t value);
  private:
  uint32_t _internal_route_index() const;
  void _internal_set_route_index(uint32_t value);
  public:

  // uint32 waypoint_index = 31;
  bool has_waypoint_index() const;
  private:
  bool _internal_has_waypoint_index() const;
  public:
  void clear_waypoint_index();
  uint32_t waypoint_index() const;
  void set_waypoint_index(uint32_t value);
  private:
  uint32_t _internal_waypoint_index() const;
  void _internal_set_waypoint_index(uint32_t value);
  public:

  // uint32 street_side_max_distance = 33;
  bool has_street_side_max_distance() const;
  private:
  bool _internal_has_street_side_max_distance() const;
  public:
  void clear_street_side_max_distance();
  uint32_t street_side_max_distance() const;
  void set_street_side_max_distance(uint32_t value);
  private:
  uint32_t _internal_street_side_max_distance() const;
  void _internal_set_street_side_max_distance(uint32_t value);
  public:

  // int32 preferred_layer = 34;
  bool has_preferred_layer() const;
  private:
  bool _internal_has_preferred_layer() const;
  public:
  void clear_preferred_layer();
  int32_t preferred_layer() const;
  void set_preferred_layer(int32_t value);
  private:
  int32_t _internal_preferred_layer() const;
  void _internal_set_preferred_layer(int32_t value);
  public:

  void clear_has_type();
  HasTypeCase has_type_case() const;
  void clear_has_heading();
  HasHeadingCase has_heading_case() const;
  void clear_has_name();
  HasNameCase has_name_case() const;
  void clear_has_street();
  HasStreetCase has_street_case() const;
  void clear_has_city();
  HasCityCase has_city_case() const;
  void clear_has_state();
  HasStateCase has_state_case() const;
  void clear_has_postal_code();
  HasPostalCodeCase has_postal_code_case() const;
  void clear_has_country();
  HasCountryCase has_country_case() const;
  void clear_has_phone();
  HasPhoneCase has_phone_case() const;
  void clear_has_url();
  HasUrlCase has_url_case() const;
  void clear_has_date_time();
  HasDateTimeCase has_date_time_case() const;
  void clear_has_side_of_street();
  HasSideOfStreetCase has_side_of_street_case() const;
  void clear_has_heading_tolerance();
  HasHeadingToleranceCase has_heading_tolerance_case() const;
  void clear_has_node_snap_tolerance();
  HasNodeSnapToleranceCase has_node_snap_tolerance_case() const;
  void clear_has_way_id();
  HasWayIdCase has_way_id_case() const;
  void clear_has_minimum_reachability();
  HasMinimumReachabilityCase has_minimum_reachability_case() const;
  void clear_has_radius();
  HasRadiusCase has_radius_case() const;
  void clear_has_accuracy();
  HasAccuracyCase has_accuracy_case() const;
  void clear_has_time();
  HasTimeCase has_time_case() const;
  void clear_has_skip_ranking_candidates();
  HasSkipRankingCandidatesCase has_skip_ranking_candidates_case() const;
  void clear_has_original_index();
  HasOriginalIndexCase has_original_index_case() const;
  void clear_has_leg_shape_index();
  HasLegShapeIndexCase has_leg_shape_index_case() const;
  void clear_has_distance_from_leg_origin();
  HasDistanceFromLegOriginCase has_distance_from_leg_origin_case() const;
  void clear_has_preferred_side();
  HasPreferredSideCase has_preferred_side_case() const;
  void clear_has_search_cutoff();
  HasSearchCutoffCase has_search_cutoff_case() const;
  void clear_has_street_side_tolerance();
  HasStreetSideToleranceCase has_street_side_tolerance_case() const;
  void clear_has_route_index();
  HasRouteIndexCase has_route_index_case() const;
  void clear_has_waypoint_index();
  HasWaypointIndexCase has_waypoint_index_case() const;
  void clear_has_street_side_max_distance();
  HasStreetSideMaxDistanceCase has_street_side_max_distance_case() const;
  void clear_has_preferred_layer();
  HasPreferredLayerCase has_preferred_layer_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Location)
 private:
  class _Internal;
  void set_has_type();
  void set_has_heading();
  void set_has_name();
  void set_has_street();
  void set_has_city();
  void set_has_state();
  void set_has_postal_code();
  void set_has_country();
  void set_has_phone();
  void set_has_url();
  void set_has_date_time();
  void set_has_side_of_street();
  void set_has_heading_tolerance();
  void set_has_node_snap_tolerance();
  void set_has_way_id();
  void set_has_minimum_reachability();
  void set_has_radius();
  void set_has_accuracy();
  void set_has_time();
  void set_has_skip_ranking_candidates();
  void set_has_original_index();
  void set_has_leg_shape_index();
  void set_has_distance_from_leg_origin();
  void set_has_preferred_side();
  void set_has_search_cutoff();
  void set_has_street_side_tolerance();
  void set_has_route_index();
  void set_has_waypoint_index();
  void set_has_street_side_max_distance();
  void set_has_preferred_layer();

  inline bool has_has_type() const;
  inline void clear_has_has_type();

  inline bool has_has_heading() const;
  inline void clear_has_has_heading();

  inline bool has_has_name() const;
  inline void clear_has_has_name();

  inline bool has_has_street() const;
  inline void clear_has_has_street();

  inline bool has_has_city() const;
  inline void clear_has_has_city();

  inline bool has_has_state() const;
  inline void clear_has_has_state();

  inline bool has_has_postal_code() const;
  inline void clear_has_has_postal_code();

  inline bool has_has_country() const;
  inline void clear_has_has_country();

  inline bool has_has_phone() const;
  inline void clear_has_has_phone();

  inline bool has_has_url() const;
  inline void clear_has_has_url();

  inline bool has_has_date_time() const;
  inline void clear_has_has_date_time();

  inline bool has_has_side_of_street() const;
  inline void clear_has_has_side_of_street();

  inline bool has_has_heading_tolerance() const;
  inline void clear_has_has_heading_tolerance();

  inline bool has_has_node_snap_tolerance() const;
  inline void clear_has_has_node_snap_tolerance();

  inline bool has_has_way_id() const;
  inline void clear_has_has_way_id();

  inline bool has_has_minimum_reachability() const;
  inline void clear_has_has_minimum_reachability();

  inline bool has_has_radius() const;
  inline void clear_has_has_radius();

  inline bool has_has_accuracy() const;
  inline void clear_has_has_accuracy();

  inline bool has_has_time() const;
  inline void clear_has_has_time();

  inline bool has_has_skip_ranking_candidates() const;
  inline void clear_has_has_skip_ranking_candidates();

  inline bool has_has_original_index() const;
  inline void clear_has_has_original_index();

  inline bool has_has_leg_shape_index() const;
  inline void clear_has_has_leg_shape_index();

  inline bool has_has_distance_from_leg_origin() const;
  inline void clear_has_has_distance_from_leg_origin();

  inline bool has_has_preferred_side() const;
  inline void clear_has_has_preferred_side();

  inline bool has_has_search_cutoff() const;
  inline void clear_has_has_search_cutoff();

  inline bool has_has_street_side_tolerance() const;
  inline void clear_has_has_street_side_tolerance();

  inline bool has_has_route_index() const;
  inline void clear_has_has_route_index();

  inline bool has_has_waypoint_index() const;
  inline void clear_has_has_waypoint_index();

  inline bool has_has_street_side_max_distance() const;
  inline void clear_has_has_street_side_max_distance();

  inline bool has_has_preferred_layer() const;
  inline void clear_has_has_preferred_layer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge > path_edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge > filtered_edges_;
    ::valhalla::LatLng* ll_;
    ::valhalla::LatLng* projected_ll_;
    ::valhalla::LatLng* display_ll_;
    ::valhalla::Location_SearchFilter* search_filter_;
    union HasTypeUnion {
      constexpr HasTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int type_;
    } has_type_;
    union HasHeadingUnion {
      constexpr HasHeadingUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t heading_;
    } has_heading_;
    union HasNameUnion {
      constexpr HasNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } has_name_;
    union HasStreetUnion {
      constexpr HasStreetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
    } has_street_;
    union HasCityUnion {
      constexpr HasCityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    } has_city_;
    union HasStateUnion {
      constexpr HasStateUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    } has_state_;
    union HasPostalCodeUnion {
      constexpr HasPostalCodeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
    } has_postal_code_;
    union HasCountryUnion {
      constexpr HasCountryUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    } has_country_;
    union HasPhoneUnion {
      constexpr HasPhoneUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    } has_phone_;
    union HasUrlUnion {
      constexpr HasUrlUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    } has_url_;
    union HasDateTimeUnion {
      constexpr HasDateTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
    } has_date_time_;
    union HasSideOfStreetUnion {
      constexpr HasSideOfStreetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int side_of_street_;
    } has_side_of_street_;
    union HasHeadingToleranceUnion {
      constexpr HasHeadingToleranceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t heading_tolerance_;
    } has_heading_tolerance_;
    union HasNodeSnapToleranceUnion {
      constexpr HasNodeSnapToleranceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t node_snap_tolerance_;
    } has_node_snap_tolerance_;
    union HasWayIdUnion {
      constexpr HasWayIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t way_id_;
    } has_way_id_;
    union HasMinimumReachabilityUnion {
      constexpr HasMinimumReachabilityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t minimum_reachability_;
    } has_minimum_reachability_;
    union HasRadiusUnion {
      constexpr HasRadiusUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t radius_;
    } has_radius_;
    union HasAccuracyUnion {
      constexpr HasAccuracyUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t accuracy_;
    } has_accuracy_;
    union HasTimeUnion {
      constexpr HasTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double time_;
    } has_time_;
    union HasSkipRankingCandidatesUnion {
      constexpr HasSkipRankingCandidatesUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool skip_ranking_candidates_;
    } has_skip_ranking_candidates_;
    union HasOriginalIndexUnion {
      constexpr HasOriginalIndexUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t original_index_;
    } has_original_index_;
    union HasLegShapeIndexUnion {
      constexpr HasLegShapeIndexUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t leg_shape_index_;
    } has_leg_shape_index_;
    union HasDistanceFromLegOriginUnion {
      constexpr HasDistanceFromLegOriginUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double distance_from_leg_origin_;
    } has_distance_from_leg_origin_;
    union HasPreferredSideUnion {
      constexpr HasPreferredSideUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int preferred_side_;
    } has_preferred_side_;
    union HasSearchCutoffUnion {
      constexpr HasSearchCutoffUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t search_cutoff_;
    } has_search_cutoff_;
    union HasStreetSideToleranceUnion {
      constexpr HasStreetSideToleranceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t street_side_tolerance_;
    } has_street_side_tolerance_;
    union HasRouteIndexUnion {
      constexpr HasRouteIndexUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t route_index_;
    } has_route_index_;
    union HasWaypointIndexUnion {
      constexpr HasWaypointIndexUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t waypoint_index_;
    } has_waypoint_index_;
    union HasStreetSideMaxDistanceUnion {
      constexpr HasStreetSideMaxDistanceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t street_side_max_distance_;
    } has_street_side_max_distance_;
    union HasPreferredLayerUnion {
      constexpr HasPreferredLayerUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t preferred_layer_;
    } has_preferred_layer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[30];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TransitEgressInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitEgressInfo) */ {
 public:
  inline TransitEgressInfo() : TransitEgressInfo(nullptr) {}
  ~TransitEgressInfo() override;
  explicit PROTOBUF_CONSTEXPR TransitEgressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitEgressInfo(const TransitEgressInfo& from);
  TransitEgressInfo(TransitEgressInfo&& from) noexcept
    : TransitEgressInfo() {
    *this = ::std::move(from);
  }

  inline TransitEgressInfo& operator=(const TransitEgressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitEgressInfo& operator=(TransitEgressInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransitEgressInfo& default_instance() {
    return *internal_default_instance();
  }
  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 2,
    HAS_NAME_NOT_SET = 0,
  };

  static inline const TransitEgressInfo* internal_default_instance() {
    return reinterpret_cast<const TransitEgressInfo*>(
               &_TransitEgressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransitEgressInfo& a, TransitEgressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitEgressInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitEgressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitEgressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitEgressInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransitEgressInfo& from);
  void MergeFrom(const TransitEgressInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitEgressInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TransitEgressInfo";
  }
  protected:
  explicit TransitEgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlFieldNumber = 3,
    kOnestopIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // .valhalla.LatLng ll = 3;
  bool has_ll() const;
  private:
  bool _internal_has_ll() const;
  public:
  void clear_ll();
  const ::valhalla::LatLng& ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_ll();
  ::valhalla::LatLng* mutable_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);
  private:
  const ::valhalla::LatLng& _internal_ll() const;
  ::valhalla::LatLng* _internal_mutable_ll();
  public:
  void unsafe_arena_set_allocated_ll(
      ::valhalla::LatLng* ll);
  ::valhalla::LatLng* unsafe_arena_release_ll();

  // string onestop_id = 1;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_has_onestop_id();
  HasOnestopIdCase has_onestop_id_case() const;
  void clear_has_name();
  HasNameCase has_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitEgressInfo)
 private:
  class _Internal;
  void set_has_onestop_id();
  void set_has_name();

  inline bool has_has_onestop_id() const;
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  inline void clear_has_has_name();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::valhalla::LatLng* ll_;
    union HasOnestopIdUnion {
      constexpr HasOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    } has_onestop_id_;
    union HasNameUnion {
      constexpr HasNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } has_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TransitStationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitStationInfo) */ {
 public:
  inline TransitStationInfo() : TransitStationInfo(nullptr) {}
  ~TransitStationInfo() override;
  explicit PROTOBUF_CONSTEXPR TransitStationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitStationInfo(const TransitStationInfo& from);
  TransitStationInfo(TransitStationInfo&& from) noexcept
    : TransitStationInfo() {
    *this = ::std::move(from);
  }

  inline TransitStationInfo& operator=(const TransitStationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitStationInfo& operator=(TransitStationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransitStationInfo& default_instance() {
    return *internal_default_instance();
  }
  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 2,
    HAS_NAME_NOT_SET = 0,
  };

  static inline const TransitStationInfo* internal_default_instance() {
    return reinterpret_cast<const TransitStationInfo*>(
               &_TransitStationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransitStationInfo& a, TransitStationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitStationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitStationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitStationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitStationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransitStationInfo& from);
  void MergeFrom(const TransitStationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitStationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TransitStationInfo";
  }
  protected:
  explicit TransitStationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlFieldNumber = 3,
    kOnestopIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // .valhalla.LatLng ll = 3;
  bool has_ll() const;
  private:
  bool _internal_has_ll() const;
  public:
  void clear_ll();
  const ::valhalla::LatLng& ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_ll();
  ::valhalla::LatLng* mutable_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);
  private:
  const ::valhalla::LatLng& _internal_ll() const;
  ::valhalla::LatLng* _internal_mutable_ll();
  public:
  void unsafe_arena_set_allocated_ll(
      ::valhalla::LatLng* ll);
  ::valhalla::LatLng* unsafe_arena_release_ll();

  // string onestop_id = 1;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_has_onestop_id();
  HasOnestopIdCase has_onestop_id_case() const;
  void clear_has_name();
  HasNameCase has_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitStationInfo)
 private:
  class _Internal;
  void set_has_onestop_id();
  void set_has_name();

  inline bool has_has_onestop_id() const;
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  inline void clear_has_has_name();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::valhalla::LatLng* ll_;
    union HasOnestopIdUnion {
      constexpr HasOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    } has_onestop_id_;
    union HasNameUnion {
      constexpr HasNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } has_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class BikeShareStationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.BikeShareStationInfo) */ {
 public:
  inline BikeShareStationInfo() : BikeShareStationInfo(nullptr) {}
  ~BikeShareStationInfo() override;
  explicit PROTOBUF_CONSTEXPR BikeShareStationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BikeShareStationInfo(const BikeShareStationInfo& from);
  BikeShareStationInfo(BikeShareStationInfo&& from) noexcept
    : BikeShareStationInfo() {
    *this = ::std::move(from);
  }

  inline BikeShareStationInfo& operator=(const BikeShareStationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BikeShareStationInfo& operator=(BikeShareStationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BikeShareStationInfo& default_instance() {
    return *internal_default_instance();
  }
  enum HasNameCase {
    kName = 1,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasRefCase {
    kRef = 2,
    HAS_REF_NOT_SET = 0,
  };

  enum HasCapacityCase {
    kCapacity = 3,
    HAS_CAPACITY_NOT_SET = 0,
  };

  enum HasNetworkCase {
    kNetwork = 4,
    HAS_NETWORK_NOT_SET = 0,
  };

  enum HasOperatorCase {
    kOperator = 5,
    HAS_OPERATOR__NOT_SET = 0,
  };

  enum HasRentCostCase {
    kRentCost = 6,
    HAS_RENT_COST_NOT_SET = 0,
  };

  enum HasReturnCostCase {
    kReturnCost = 7,
    HAS_RETURN_COST_NOT_SET = 0,
  };

  static inline const BikeShareStationInfo* internal_default_instance() {
    return reinterpret_cast<const BikeShareStationInfo*>(
               &_BikeShareStationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BikeShareStationInfo& a, BikeShareStationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BikeShareStationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BikeShareStationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BikeShareStationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BikeShareStationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BikeShareStationInfo& from);
  void MergeFrom(const BikeShareStationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BikeShareStationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.BikeShareStationInfo";
  }
  protected:
  explicit BikeShareStationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRefFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kNetworkFieldNumber = 4,
    kOperatorFieldNumber = 5,
    kRentCostFieldNumber = 6,
    kReturnCostFieldNumber = 7,
  };
  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ref = 2;
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  const std::string& ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ref();
  PROTOBUF_NODISCARD std::string* release_ref();
  void set_allocated_ref(std::string* ref);
  private:
  const std::string& _internal_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ref(const std::string& value);
  std::string* _internal_mutable_ref();
  public:

  // uint32 capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  uint32_t capacity() const;
  void set_capacity(uint32_t value);
  private:
  uint32_t _internal_capacity() const;
  void _internal_set_capacity(uint32_t value);
  public:

  // string network = 4;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_NODISCARD std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string operator = 5;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_NODISCARD std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // float rent_cost = 6;
  bool has_rent_cost() const;
  private:
  bool _internal_has_rent_cost() const;
  public:
  void clear_rent_cost();
  float rent_cost() const;
  void set_rent_cost(float value);
  private:
  float _internal_rent_cost() const;
  void _internal_set_rent_cost(float value);
  public:

  // float return_cost = 7;
  bool has_return_cost() const;
  private:
  bool _internal_has_return_cost() const;
  public:
  void clear_return_cost();
  float return_cost() const;
  void set_return_cost(float value);
  private:
  float _internal_return_cost() const;
  void _internal_set_return_cost(float value);
  public:

  void clear_has_name();
  HasNameCase has_name_case() const;
  void clear_has_ref();
  HasRefCase has_ref_case() const;
  void clear_has_capacity();
  HasCapacityCase has_capacity_case() const;
  void clear_has_network();
  HasNetworkCase has_network_case() const;
  void clear_has_operator_();
  HasOperatorCase has_operator__case() const;
  void clear_has_rent_cost();
  HasRentCostCase has_rent_cost_case() const;
  void clear_has_return_cost();
  HasReturnCostCase has_return_cost_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.BikeShareStationInfo)
 private:
  class _Internal;
  void set_has_name();
  void set_has_ref();
  void set_has_capacity();
  void set_has_network();
  void set_has_operator_();
  void set_has_rent_cost();
  void set_has_return_cost();

  inline bool has_has_name() const;
  inline void clear_has_has_name();

  inline bool has_has_ref() const;
  inline void clear_has_has_ref();

  inline bool has_has_capacity() const;
  inline void clear_has_has_capacity();

  inline bool has_has_network() const;
  inline void clear_has_has_network();

  inline bool has_has_operator_() const;
  inline void clear_has_has_operator_();

  inline bool has_has_rent_cost() const;
  inline void clear_has_has_rent_cost();

  inline bool has_has_return_cost() const;
  inline void clear_has_has_return_cost();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasNameUnion {
      constexpr HasNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } has_name_;
    union HasRefUnion {
      constexpr HasRefUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
    } has_ref_;
    union HasCapacityUnion {
      constexpr HasCapacityUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t capacity_;
    } has_capacity_;
    union HasNetworkUnion {
      constexpr HasNetworkUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
    } has_network_;
    union HasOperatorUnion {
      constexpr HasOperatorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
    } has_operator__;
    union HasRentCostUnion {
      constexpr HasRentCostUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float rent_cost_;
    } has_rent_cost_;
    union HasReturnCostUnion {
      constexpr HasReturnCostUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float return_cost_;
    } has_return_cost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[7];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TransitPlatformInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitPlatformInfo) */ {
 public:
  inline TransitPlatformInfo() : TransitPlatformInfo(nullptr) {}
  ~TransitPlatformInfo() override;
  explicit PROTOBUF_CONSTEXPR TransitPlatformInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitPlatformInfo(const TransitPlatformInfo& from);
  TransitPlatformInfo(TransitPlatformInfo&& from) noexcept
    : TransitPlatformInfo() {
    *this = ::std::move(from);
  }

  inline TransitPlatformInfo& operator=(const TransitPlatformInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitPlatformInfo& operator=(TransitPlatformInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransitPlatformInfo& default_instance() {
    return *internal_default_instance();
  }
  enum HasTypeCase {
    kType = 1,
    HAS_TYPE_NOT_SET = 0,
  };

  enum HasOnestopIdCase {
    kOnestopId = 2,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasNameCase {
    kName = 3,
    HAS_NAME_NOT_SET = 0,
  };

  enum HasArrivalDateTimeCase {
    kArrivalDateTime = 4,
    HAS_ARRIVAL_DATE_TIME_NOT_SET = 0,
  };

  enum HasDepartureDateTimeCase {
    kDepartureDateTime = 5,
    HAS_DEPARTURE_DATE_TIME_NOT_SET = 0,
  };

  enum HasAssumedScheduleCase {
    kAssumedSchedule = 6,
    HAS_ASSUMED_SCHEDULE_NOT_SET = 0,
  };

  enum HasStationOnestopIdCase {
    kStationOnestopId = 8,
    HAS_STATION_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasStationNameCase {
    kStationName = 9,
    HAS_STATION_NAME_NOT_SET = 0,
  };

  static inline const TransitPlatformInfo* internal_default_instance() {
    return reinterpret_cast<const TransitPlatformInfo*>(
               &_TransitPlatformInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransitPlatformInfo& a, TransitPlatformInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitPlatformInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitPlatformInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitPlatformInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitPlatformInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransitPlatformInfo& from);
  void MergeFrom(const TransitPlatformInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitPlatformInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TransitPlatformInfo";
  }
  protected:
  explicit TransitPlatformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TransitPlatformInfo_Type Type;
  static constexpr Type kStop =
    TransitPlatformInfo_Type_kStop;
  static constexpr Type kStation =
    TransitPlatformInfo_Type_kStation;
  static inline bool Type_IsValid(int value) {
    return TransitPlatformInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TransitPlatformInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TransitPlatformInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TransitPlatformInfo_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TransitPlatformInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TransitPlatformInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLlFieldNumber = 7,
    kTypeFieldNumber = 1,
    kOnestopIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kArrivalDateTimeFieldNumber = 4,
    kDepartureDateTimeFieldNumber = 5,
    kAssumedScheduleFieldNumber = 6,
    kStationOnestopIdFieldNumber = 8,
    kStationNameFieldNumber = 9,
  };
  // .valhalla.LatLng ll = 7;
  bool has_ll() const;
  private:
  bool _internal_has_ll() const;
  public:
  void clear_ll();
  const ::valhalla::LatLng& ll() const;
  PROTOBUF_NODISCARD ::valhalla::LatLng* release_ll();
  ::valhalla::LatLng* mutable_ll();
  void set_allocated_ll(::valhalla::LatLng* ll);
  private:
  const ::valhalla::LatLng& _internal_ll() const;
  ::valhalla::LatLng* _internal_mutable_ll();
  public:
  void unsafe_arena_set_allocated_ll(
      ::valhalla::LatLng* ll);
  ::valhalla::LatLng* unsafe_arena_release_ll();

  // .valhalla.TransitPlatformInfo.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::valhalla::TransitPlatformInfo_Type type() const;
  void set_type(::valhalla::TransitPlatformInfo_Type value);
  private:
  ::valhalla::TransitPlatformInfo_Type _internal_type() const;
  void _internal_set_type(::valhalla::TransitPlatformInfo_Type value);
  public:

  // string onestop_id = 2;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string arrival_date_time = 4;
  bool has_arrival_date_time() const;
  private:
  bool _internal_has_arrival_date_time() const;
  public:
  void clear_arrival_date_time();
  const std::string& arrival_date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arrival_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arrival_date_time();
  PROTOBUF_NODISCARD std::string* release_arrival_date_time();
  void set_allocated_arrival_date_time(std::string* arrival_date_time);
  private:
  const std::string& _internal_arrival_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arrival_date_time(const std::string& value);
  std::string* _internal_mutable_arrival_date_time();
  public:

  // string departure_date_time = 5;
  bool has_departure_date_time() const;
  private:
  bool _internal_has_departure_date_time() const;
  public:
  void clear_departure_date_time();
  const std::string& departure_date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departure_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departure_date_time();
  PROTOBUF_NODISCARD std::string* release_departure_date_time();
  void set_allocated_departure_date_time(std::string* departure_date_time);
  private:
  const std::string& _internal_departure_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departure_date_time(const std::string& value);
  std::string* _internal_mutable_departure_date_time();
  public:

  // bool assumed_schedule = 6;
  bool has_assumed_schedule() const;
  private:
  bool _internal_has_assumed_schedule() const;
  public:
  void clear_assumed_schedule();
  bool assumed_schedule() const;
  void set_assumed_schedule(bool value);
  private:
  bool _internal_assumed_schedule() const;
  void _internal_set_assumed_schedule(bool value);
  public:

  // string station_onestop_id = 8;
  bool has_station_onestop_id() const;
  private:
  bool _internal_has_station_onestop_id() const;
  public:
  void clear_station_onestop_id();
  const std::string& station_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_station_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_station_onestop_id();
  PROTOBUF_NODISCARD std::string* release_station_onestop_id();
  void set_allocated_station_onestop_id(std::string* station_onestop_id);
  private:
  const std::string& _internal_station_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_station_onestop_id(const std::string& value);
  std::string* _internal_mutable_station_onestop_id();
  public:

  // string station_name = 9;
  bool has_station_name() const;
  private:
  bool _internal_has_station_name() const;
  public:
  void clear_station_name();
  const std::string& station_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_station_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_station_name();
  PROTOBUF_NODISCARD std::string* release_station_name();
  void set_allocated_station_name(std::string* station_name);
  private:
  const std::string& _internal_station_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_station_name(const std::string& value);
  std::string* _internal_mutable_station_name();
  public:

  void clear_has_type();
  HasTypeCase has_type_case() const;
  void clear_has_onestop_id();
  HasOnestopIdCase has_onestop_id_case() const;
  void clear_has_name();
  HasNameCase has_name_case() const;
  void clear_has_arrival_date_time();
  HasArrivalDateTimeCase has_arrival_date_time_case() const;
  void clear_has_departure_date_time();
  HasDepartureDateTimeCase has_departure_date_time_case() const;
  void clear_has_assumed_schedule();
  HasAssumedScheduleCase has_assumed_schedule_case() const;
  void clear_has_station_onestop_id();
  HasStationOnestopIdCase has_station_onestop_id_case() const;
  void clear_has_station_name();
  HasStationNameCase has_station_name_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitPlatformInfo)
 private:
  class _Internal;
  void set_has_type();
  void set_has_onestop_id();
  void set_has_name();
  void set_has_arrival_date_time();
  void set_has_departure_date_time();
  void set_has_assumed_schedule();
  void set_has_station_onestop_id();
  void set_has_station_name();

  inline bool has_has_type() const;
  inline void clear_has_has_type();

  inline bool has_has_onestop_id() const;
  inline void clear_has_has_onestop_id();

  inline bool has_has_name() const;
  inline void clear_has_has_name();

  inline bool has_has_arrival_date_time() const;
  inline void clear_has_has_arrival_date_time();

  inline bool has_has_departure_date_time() const;
  inline void clear_has_has_departure_date_time();

  inline bool has_has_assumed_schedule() const;
  inline void clear_has_has_assumed_schedule();

  inline bool has_has_station_onestop_id() const;
  inline void clear_has_has_station_onestop_id();

  inline bool has_has_station_name() const;
  inline void clear_has_has_station_name();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::valhalla::LatLng* ll_;
    union HasTypeUnion {
      constexpr HasTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int type_;
    } has_type_;
    union HasOnestopIdUnion {
      constexpr HasOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    } has_onestop_id_;
    union HasNameUnion {
      constexpr HasNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } has_name_;
    union HasArrivalDateTimeUnion {
      constexpr HasArrivalDateTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrival_date_time_;
    } has_arrival_date_time_;
    union HasDepartureDateTimeUnion {
      constexpr HasDepartureDateTimeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departure_date_time_;
    } has_departure_date_time_;
    union HasAssumedScheduleUnion {
      constexpr HasAssumedScheduleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool assumed_schedule_;
    } has_assumed_schedule_;
    union HasStationOnestopIdUnion {
      constexpr HasStationOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_onestop_id_;
    } has_station_onestop_id_;
    union HasStationNameUnion {
      constexpr HasStationNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_name_;
    } has_station_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[8];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TransitRouteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TransitRouteInfo) */ {
 public:
  inline TransitRouteInfo() : TransitRouteInfo(nullptr) {}
  ~TransitRouteInfo() override;
  explicit PROTOBUF_CONSTEXPR TransitRouteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransitRouteInfo(const TransitRouteInfo& from);
  TransitRouteInfo(TransitRouteInfo&& from) noexcept
    : TransitRouteInfo() {
    *this = ::std::move(from);
  }

  inline TransitRouteInfo& operator=(const TransitRouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransitRouteInfo& operator=(TransitRouteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TransitRouteInfo& default_instance() {
    return *internal_default_instance();
  }
  enum HasOnestopIdCase {
    kOnestopId = 1,
    HAS_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasBlockIdCase {
    kBlockId = 2,
    HAS_BLOCK_ID_NOT_SET = 0,
  };

  enum HasTripIdCase {
    kTripId = 3,
    HAS_TRIP_ID_NOT_SET = 0,
  };

  enum HasShortNameCase {
    kShortName = 4,
    HAS_SHORT_NAME_NOT_SET = 0,
  };

  enum HasLongNameCase {
    kLongName = 5,
    HAS_LONG_NAME_NOT_SET = 0,
  };

  enum HasHeadsignCase {
    kHeadsign = 6,
    HAS_HEADSIGN_NOT_SET = 0,
  };

  enum HasColorCase {
    kColor = 7,
    HAS_COLOR_NOT_SET = 0,
  };

  enum HasTextColorCase {
    kTextColor = 8,
    HAS_TEXT_COLOR_NOT_SET = 0,
  };

  enum HasDescriptionCase {
    kDescription = 9,
    HAS_DESCRIPTION_NOT_SET = 0,
  };

  enum HasOperatorOnestopIdCase {
    kOperatorOnestopId = 10,
    HAS_OPERATOR_ONESTOP_ID_NOT_SET = 0,
  };

  enum HasOperatorNameCase {
    kOperatorName = 11,
    HAS_OPERATOR_NAME_NOT_SET = 0,
  };

  enum HasOperatorUrlCase {
    kOperatorUrl = 12,
    HAS_OPERATOR_URL_NOT_SET = 0,
  };

  static inline const TransitRouteInfo* internal_default_instance() {
    return reinterpret_cast<const TransitRouteInfo*>(
               &_TransitRouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransitRouteInfo& a, TransitRouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransitRouteInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransitRouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransitRouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransitRouteInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TransitRouteInfo& from);
  void MergeFrom(const TransitRouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransitRouteInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TransitRouteInfo";
  }
  protected:
  explicit TransitRouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransitStopsFieldNumber = 13,
    kOnestopIdFieldNumber = 1,
    kBlockIdFieldNumber = 2,
    kTripIdFieldNumber = 3,
    kShortNameFieldNumber = 4,
    kLongNameFieldNumber = 5,
    kHeadsignFieldNumber = 6,
    kColorFieldNumber = 7,
    kTextColorFieldNumber = 8,
    kDescriptionFieldNumber = 9,
    kOperatorOnestopIdFieldNumber = 10,
    kOperatorNameFieldNumber = 11,
    kOperatorUrlFieldNumber = 12,
  };
  // repeated .valhalla.TransitPlatformInfo transit_stops = 13;
  int transit_stops_size() const;
  private:
  int _internal_transit_stops_size() const;
  public:
  void clear_transit_stops();
  ::valhalla::TransitPlatformInfo* mutable_transit_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TransitPlatformInfo >*
      mutable_transit_stops();
  private:
  const ::valhalla::TransitPlatformInfo& _internal_transit_stops(int index) const;
  ::valhalla::TransitPlatformInfo* _internal_add_transit_stops();
  public:
  const ::valhalla::TransitPlatformInfo& transit_stops(int index) const;
  ::valhalla::TransitPlatformInfo* add_transit_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TransitPlatformInfo >&
      transit_stops() const;

  // string onestop_id = 1;
  bool has_onestop_id() const;
  private:
  bool _internal_has_onestop_id() const;
  public:
  void clear_onestop_id();
  const std::string& onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_onestop_id();
  PROTOBUF_NODISCARD std::string* release_onestop_id();
  void set_allocated_onestop_id(std::string* onestop_id);
  private:
  const std::string& _internal_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_onestop_id(const std::string& value);
  std::string* _internal_mutable_onestop_id();
  public:

  // uint32 block_id = 2;
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  uint32_t block_id() const;
  void set_block_id(uint32_t value);
  private:
  uint32_t _internal_block_id() const;
  void _internal_set_block_id(uint32_t value);
  public:

  // uint32 trip_id = 3;
  bool has_trip_id() const;
  private:
  bool _internal_has_trip_id() const;
  public:
  void clear_trip_id();
  uint32_t trip_id() const;
  void set_trip_id(uint32_t value);
  private:
  uint32_t _internal_trip_id() const;
  void _internal_set_trip_id(uint32_t value);
  public:

  // string short_name = 4;
  bool has_short_name() const;
  private:
  bool _internal_has_short_name() const;
  public:
  void clear_short_name();
  const std::string& short_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_name();
  PROTOBUF_NODISCARD std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);
  private:
  const std::string& _internal_short_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_name(const std::string& value);
  std::string* _internal_mutable_short_name();
  public:

  // string long_name = 5;
  bool has_long_name() const;
  private:
  bool _internal_has_long_name() const;
  public:
  void clear_long_name();
  const std::string& long_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_name();
  PROTOBUF_NODISCARD std::string* release_long_name();
  void set_allocated_long_name(std::string* long_name);
  private:
  const std::string& _internal_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_name(const std::string& value);
  std::string* _internal_mutable_long_name();
  public:

  // string headsign = 6;
  bool has_headsign() const;
  private:
  bool _internal_has_headsign() const;
  public:
  void clear_headsign();
  const std::string& headsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headsign();
  PROTOBUF_NODISCARD std::string* release_headsign();
  void set_allocated_headsign(std::string* headsign);
  private:
  const std::string& _internal_headsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headsign(const std::string& value);
  std::string* _internal_mutable_headsign();
  public:

  // uint32 color = 7;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // uint32 text_color = 8;
  bool has_text_color() const;
  private:
  bool _internal_has_text_color() const;
  public:
  void clear_text_color();
  uint32_t text_color() const;
  void set_text_color(uint32_t value);
  private:
  uint32_t _internal_text_color() const;
  void _internal_set_text_color(uint32_t value);
  public:

  // string description = 9;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string operator_onestop_id = 10;
  bool has_operator_onestop_id() const;
  private:
  bool _internal_has_operator_onestop_id() const;
  public:
  void clear_operator_onestop_id();
  const std::string& operator_onestop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_onestop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_onestop_id();
  PROTOBUF_NODISCARD std::string* release_operator_onestop_id();
  void set_allocated_operator_onestop_id(std::string* operator_onestop_id);
  private:
  const std::string& _internal_operator_onestop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_onestop_id(const std::string& value);
  std::string* _internal_mutable_operator_onestop_id();
  public:

  // string operator_name = 11;
  bool has_operator_name() const;
  private:
  bool _internal_has_operator_name() const;
  public:
  void clear_operator_name();
  const std::string& operator_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_name();
  PROTOBUF_NODISCARD std::string* release_operator_name();
  void set_allocated_operator_name(std::string* operator_name);
  private:
  const std::string& _internal_operator_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_name(const std::string& value);
  std::string* _internal_mutable_operator_name();
  public:

  // string operator_url = 12;
  bool has_operator_url() const;
  private:
  bool _internal_has_operator_url() const;
  public:
  void clear_operator_url();
  const std::string& operator_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_url();
  PROTOBUF_NODISCARD std::string* release_operator_url();
  void set_allocated_operator_url(std::string* operator_url);
  private:
  const std::string& _internal_operator_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_url(const std::string& value);
  std::string* _internal_mutable_operator_url();
  public:

  void clear_has_onestop_id();
  HasOnestopIdCase has_onestop_id_case() const;
  void clear_has_block_id();
  HasBlockIdCase has_block_id_case() const;
  void clear_has_trip_id();
  HasTripIdCase has_trip_id_case() const;
  void clear_has_short_name();
  HasShortNameCase has_short_name_case() const;
  void clear_has_long_name();
  HasLongNameCase has_long_name_case() const;
  void clear_has_headsign();
  HasHeadsignCase has_headsign_case() const;
  void clear_has_color();
  HasColorCase has_color_case() const;
  void clear_has_text_color();
  HasTextColorCase has_text_color_case() const;
  void clear_has_description();
  HasDescriptionCase has_description_case() const;
  void clear_has_operator_onestop_id();
  HasOperatorOnestopIdCase has_operator_onestop_id_case() const;
  void clear_has_operator_name();
  HasOperatorNameCase has_operator_name_case() const;
  void clear_has_operator_url();
  HasOperatorUrlCase has_operator_url_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TransitRouteInfo)
 private:
  class _Internal;
  void set_has_onestop_id();
  void set_has_block_id();
  void set_has_trip_id();
  void set_has_short_name();
  void set_has_long_name();
  void set_has_headsign();
  void set_has_color();
  void set_has_text_color();
  void set_has_description();
  void set_has_operator_onestop_id();
  void set_has_operator_name();
  void set_has_operator_url();

  inline bool has_has_onestop_id() const;
  inline void clear_has_has_onestop_id();

  inline bool has_has_block_id() const;
  inline void clear_has_has_block_id();

  inline bool has_has_trip_id() const;
  inline void clear_has_has_trip_id();

  inline bool has_has_short_name() const;
  inline void clear_has_has_short_name();

  inline bool has_has_long_name() const;
  inline void clear_has_has_long_name();

  inline bool has_has_headsign() const;
  inline void clear_has_has_headsign();

  inline bool has_has_color() const;
  inline void clear_has_has_color();

  inline bool has_has_text_color() const;
  inline void clear_has_has_text_color();

  inline bool has_has_description() const;
  inline void clear_has_has_description();

  inline bool has_has_operator_onestop_id() const;
  inline void clear_has_has_operator_onestop_id();

  inline bool has_has_operator_name() const;
  inline void clear_has_has_operator_name();

  inline bool has_has_operator_url() const;
  inline void clear_has_has_operator_url();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TransitPlatformInfo > transit_stops_;
    union HasOnestopIdUnion {
      constexpr HasOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onestop_id_;
    } has_onestop_id_;
    union HasBlockIdUnion {
      constexpr HasBlockIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t block_id_;
    } has_block_id_;
    union HasTripIdUnion {
      constexpr HasTripIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t trip_id_;
    } has_trip_id_;
    union HasShortNameUnion {
      constexpr HasShortNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
    } has_short_name_;
    union HasLongNameUnion {
      constexpr HasLongNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_name_;
    } has_long_name_;
    union HasHeadsignUnion {
      constexpr HasHeadsignUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headsign_;
    } has_headsign_;
    union HasColorUnion {
      constexpr HasColorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t color_;
    } has_color_;
    union HasTextColorUnion {
      constexpr HasTextColorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t text_color_;
    } has_text_color_;
    union HasDescriptionUnion {
      constexpr HasDescriptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    } has_description_;
    union HasOperatorOnestopIdUnion {
      constexpr HasOperatorOnestopIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_onestop_id_;
    } has_operator_onestop_id_;
    union HasOperatorNameUnion {
      constexpr HasOperatorNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_name_;
    } has_operator_name_;
    union HasOperatorUrlUnion {
      constexpr HasOperatorUrlUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator_url_;
    } has_operator_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[12];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class Pronunciation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Pronunciation) */ {
 public:
  inline Pronunciation() : Pronunciation(nullptr) {}
  ~Pronunciation() override;
  explicit PROTOBUF_CONSTEXPR Pronunciation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pronunciation(const Pronunciation& from);
  Pronunciation(Pronunciation&& from) noexcept
    : Pronunciation() {
    *this = ::std::move(from);
  }

  inline Pronunciation& operator=(const Pronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pronunciation& operator=(Pronunciation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Pronunciation& default_instance() {
    return *internal_default_instance();
  }
  enum HasAlphabetCase {
    kAlphabet = 1,
    HAS_ALPHABET_NOT_SET = 0,
  };

  enum HasValueCase {
    kValue = 2,
    HAS_VALUE_NOT_SET = 0,
  };

  static inline const Pronunciation* internal_default_instance() {
    return reinterpret_cast<const Pronunciation*>(
               &_Pronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Pronunciation& a, Pronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(Pronunciation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pronunciation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Pronunciation& from);
  void MergeFrom(const Pronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pronunciation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Pronunciation";
  }
  protected:
  explicit Pronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Pronunciation_Alphabet Alphabet;
  static constexpr Alphabet kIpa =
    Pronunciation_Alphabet_kIpa;
  static constexpr Alphabet kXKatakana =
    Pronunciation_Alphabet_kXKatakana;
  static constexpr Alphabet kXJeita =
    Pronunciation_Alphabet_kXJeita;
  static constexpr Alphabet kNtSampa =
    Pronunciation_Alphabet_kNtSampa;
  static inline bool Alphabet_IsValid(int value) {
    return Pronunciation_Alphabet_IsValid(value);
  }
  static constexpr Alphabet Alphabet_MIN =
    Pronunciation_Alphabet_Alphabet_MIN;
  static constexpr Alphabet Alphabet_MAX =
    Pronunciation_Alphabet_Alphabet_MAX;
  static constexpr int Alphabet_ARRAYSIZE =
    Pronunciation_Alphabet_Alphabet_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Alphabet_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Alphabet>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Alphabet_Name.");
    return Pronunciation_Alphabet_Name(enum_t_value);
  }
  static inline bool Alphabet_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Alphabet* value) {
    return Pronunciation_Alphabet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlphabetFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .valhalla.Pronunciation.Alphabet alphabet = 1;
  bool has_alphabet() const;
  private:
  bool _internal_has_alphabet() const;
  public:
  void clear_alphabet();
  ::valhalla::Pronunciation_Alphabet alphabet() const;
  void set_alphabet(::valhalla::Pronunciation_Alphabet value);
  private:
  ::valhalla::Pronunciation_Alphabet _internal_alphabet() const;
  void _internal_set_alphabet(::valhalla::Pronunciation_Alphabet value);
  public:

  // string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  void clear_has_alphabet();
  HasAlphabetCase has_alphabet_case() const;
  void clear_has_value();
  HasValueCase has_value_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.Pronunciation)
 private:
  class _Internal;
  void set_has_alphabet();
  void set_has_value();

  inline bool has_has_alphabet() const;
  inline void clear_has_has_alphabet();

  inline bool has_has_value() const;
  inline void clear_has_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasAlphabetUnion {
      constexpr HasAlphabetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int alphabet_;
    } has_alphabet_;
    union HasValueUnion {
      constexpr HasValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    } has_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class StreetName final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.StreetName) */ {
 public:
  inline StreetName() : StreetName(nullptr) {}
  ~StreetName() override;
  explicit PROTOBUF_CONSTEXPR StreetName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreetName(const StreetName& from);
  StreetName(StreetName&& from) noexcept
    : StreetName() {
    *this = ::std::move(from);
  }

  inline StreetName& operator=(const StreetName& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreetName& operator=(StreetName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StreetName& default_instance() {
    return *internal_default_instance();
  }
  enum HasValueCase {
    kValue = 1,
    HAS_VALUE_NOT_SET = 0,
  };

  enum HasIsRouteNumberCase {
    kIsRouteNumber = 2,
    HAS_IS_ROUTE_NUMBER_NOT_SET = 0,
  };

  static inline const StreetName* internal_default_instance() {
    return reinterpret_cast<const StreetName*>(
               &_StreetName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreetName& a, StreetName& b) {
    a.Swap(&b);
  }
  inline void Swap(StreetName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreetName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreetName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreetName>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StreetName& from);
  void MergeFrom(const StreetName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.StreetName";
  }
  protected:
  explicit StreetName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 3,
    kValueFieldNumber = 1,
    kIsRouteNumberFieldNumber = 2,
  };
  // .valhalla.Pronunciation pronunciation = 3;
  bool has_pronunciation() const;
  private:
  bool _internal_has_pronunciation() const;
  public:
  void clear_pronunciation();
  const ::valhalla::Pronunciation& pronunciation() const;
  PROTOBUF_NODISCARD ::valhalla::Pronunciation* release_pronunciation();
  ::valhalla::Pronunciation* mutable_pronunciation();
  void set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation);
  private:
  const ::valhalla::Pronunciation& _internal_pronunciation() const;
  ::valhalla::Pronunciation* _internal_mutable_pronunciation();
  public:
  void unsafe_arena_set_allocated_pronunciation(
      ::valhalla::Pronunciation* pronunciation);
  ::valhalla::Pronunciation* unsafe_arena_release_pronunciation();

  // string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool is_route_number = 2;
  bool has_is_route_number() const;
  private:
  bool _internal_has_is_route_number() const;
  public:
  void clear_is_route_number();
  bool is_route_number() const;
  void set_is_route_number(bool value);
  private:
  bool _internal_is_route_number() const;
  void _internal_set_is_route_number(bool value);
  public:

  void clear_has_value();
  HasValueCase has_value_case() const;
  void clear_has_is_route_number();
  HasIsRouteNumberCase has_is_route_number_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.StreetName)
 private:
  class _Internal;
  void set_has_value();
  void set_has_is_route_number();

  inline bool has_has_value() const;
  inline void clear_has_has_value();

  inline bool has_has_is_route_number() const;
  inline void clear_has_has_is_route_number();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::valhalla::Pronunciation* pronunciation_;
    union HasValueUnion {
      constexpr HasValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    } has_value_;
    union HasIsRouteNumberUnion {
      constexpr HasIsRouteNumberUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool is_route_number_;
    } has_is_route_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TurnLane final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TurnLane) */ {
 public:
  inline TurnLane() : TurnLane(nullptr) {}
  ~TurnLane() override;
  explicit PROTOBUF_CONSTEXPR TurnLane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnLane(const TurnLane& from);
  TurnLane(TurnLane&& from) noexcept
    : TurnLane() {
    *this = ::std::move(from);
  }

  inline TurnLane& operator=(const TurnLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnLane& operator=(TurnLane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TurnLane& default_instance() {
    return *internal_default_instance();
  }
  enum HasDirectionsMaskCase {
    kDirectionsMask = 1,
    HAS_DIRECTIONS_MASK_NOT_SET = 0,
  };

  enum HasStateCase {
    kState = 2,
    HAS_STATE_NOT_SET = 0,
  };

  enum HasActiveDirectionCase {
    kActiveDirection = 3,
    HAS_ACTIVE_DIRECTION_NOT_SET = 0,
  };

  static inline const TurnLane* internal_default_instance() {
    return reinterpret_cast<const TurnLane*>(
               &_TurnLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TurnLane& a, TurnLane& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnLane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnLane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnLane>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TurnLane& from);
  void MergeFrom(const TurnLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TurnLane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TurnLane";
  }
  protected:
  explicit TurnLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TurnLane_State State;
  static constexpr State kInvalid =
    TurnLane_State_kInvalid;
  static constexpr State kValid =
    TurnLane_State_kValid;
  static constexpr State kActive =
    TurnLane_State_kActive;
  static inline bool State_IsValid(int value) {
    return TurnLane_State_IsValid(value);
  }
  static constexpr State State_MIN =
    TurnLane_State_State_MIN;
  static constexpr State State_MAX =
    TurnLane_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    TurnLane_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return TurnLane_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return TurnLane_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionsMaskFieldNumber = 1,
    kStateFieldNumber = 2,
    kActiveDirectionFieldNumber = 3,
  };
  // uint32 directions_mask = 1;
  bool has_directions_mask() const;
  private:
  bool _internal_has_directions_mask() const;
  public:
  void clear_directions_mask();
  uint32_t directions_mask() const;
  void set_directions_mask(uint32_t value);
  private:
  uint32_t _internal_directions_mask() const;
  void _internal_set_directions_mask(uint32_t value);
  public:

  // .valhalla.TurnLane.State state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::valhalla::TurnLane_State state() const;
  void set_state(::valhalla::TurnLane_State value);
  private:
  ::valhalla::TurnLane_State _internal_state() const;
  void _internal_set_state(::valhalla::TurnLane_State value);
  public:

  // uint32 active_direction = 3;
  bool has_active_direction() const;
  private:
  bool _internal_has_active_direction() const;
  public:
  void clear_active_direction();
  uint32_t active_direction() const;
  void set_active_direction(uint32_t value);
  private:
  uint32_t _internal_active_direction() const;
  void _internal_set_active_direction(uint32_t value);
  public:

  void clear_has_directions_mask();
  HasDirectionsMaskCase has_directions_mask_case() const;
  void clear_has_state();
  HasStateCase has_state_case() const;
  void clear_has_active_direction();
  HasActiveDirectionCase has_active_direction_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TurnLane)
 private:
  class _Internal;
  void set_has_directions_mask();
  void set_has_state();
  void set_has_active_direction();

  inline bool has_has_directions_mask() const;
  inline void clear_has_has_directions_mask();

  inline bool has_has_state() const;
  inline void clear_has_has_state();

  inline bool has_has_active_direction() const;
  inline void clear_has_has_active_direction();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasDirectionsMaskUnion {
      constexpr HasDirectionsMaskUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t directions_mask_;
    } has_directions_mask_;
    union HasStateUnion {
      constexpr HasStateUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int state_;
    } has_state_;
    union HasActiveDirectionUnion {
      constexpr HasActiveDirectionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t active_direction_;
    } has_active_direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// -------------------------------------------------------------------

class TaggedValue final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.TaggedValue) */ {
 public:
  inline TaggedValue() : TaggedValue(nullptr) {}
  ~TaggedValue() override;
  explicit PROTOBUF_CONSTEXPR TaggedValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaggedValue(const TaggedValue& from);
  TaggedValue(TaggedValue&& from) noexcept
    : TaggedValue() {
    *this = ::std::move(from);
  }

  inline TaggedValue& operator=(const TaggedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaggedValue& operator=(TaggedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TaggedValue& default_instance() {
    return *internal_default_instance();
  }
  enum HasValueCase {
    kValue = 1,
    HAS_VALUE_NOT_SET = 0,
  };

  enum HasTypeCase {
    kType = 2,
    HAS_TYPE_NOT_SET = 0,
  };

  static inline const TaggedValue* internal_default_instance() {
    return reinterpret_cast<const TaggedValue*>(
               &_TaggedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TaggedValue& a, TaggedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TaggedValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaggedValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaggedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaggedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TaggedValue& from);
  void MergeFrom(const TaggedValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaggedValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.TaggedValue";
  }
  protected:
  explicit TaggedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TaggedValue_Type Type;
  static constexpr Type kNone =
    TaggedValue_Type_kNone;
  static constexpr Type kLayer =
    TaggedValue_Type_kLayer;
  static constexpr Type kPronunciation =
    TaggedValue_Type_kPronunciation;
  static constexpr Type kBssInfo =
    TaggedValue_Type_kBssInfo;
  static constexpr Type kTunnel =
    TaggedValue_Type_kTunnel;
  static constexpr Type kBridge =
    TaggedValue_Type_kBridge;
  static inline bool Type_IsValid(int value) {
    return TaggedValue_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TaggedValue_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TaggedValue_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TaggedValue_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TaggedValue_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TaggedValue_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .valhalla.TaggedValue.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::valhalla::TaggedValue_Type type() const;
  void set_type(::valhalla::TaggedValue_Type value);
  private:
  ::valhalla::TaggedValue_Type _internal_type() const;
  void _internal_set_type(::valhalla::TaggedValue_Type value);
  public:

  void clear_has_value();
  HasValueCase has_value_case() const;
  void clear_has_type();
  HasTypeCase has_type_case() const;
  // @@protoc_insertion_point(class_scope:valhalla.TaggedValue)
 private:
  class _Internal;
  void set_has_value();
  void set_has_type();

  inline bool has_has_value() const;
  inline void clear_has_has_value();

  inline bool has_has_type() const;
  inline void clear_has_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union HasValueUnion {
      constexpr HasValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    } has_value_;
    union HasTypeUnion {
      constexpr HasTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int type_;
    } has_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tripcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatLng

// double lat = 1;
inline bool LatLng::_internal_has_lat() const {
  return has_lat_case() == kLat;
}
inline bool LatLng::has_lat() const {
  return _internal_has_lat();
}
inline void LatLng::set_has_lat() {
  _impl_._oneof_case_[0] = kLat;
}
inline void LatLng::clear_lat() {
  if (_internal_has_lat()) {
    _impl_.has_lat_.lat_ = 0;
    clear_has_has_lat();
  }
}
inline double LatLng::_internal_lat() const {
  if (_internal_has_lat()) {
    return _impl_.has_lat_.lat_;
  }
  return 0;
}
inline void LatLng::_internal_set_lat(double value) {
  if (!_internal_has_lat()) {
    clear_has_lat();
    set_has_lat();
  }
  _impl_.has_lat_.lat_ = value;
}
inline double LatLng::lat() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lat)
  return _internal_lat();
}
inline void LatLng::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lat)
}

// double lng = 2;
inline bool LatLng::_internal_has_lng() const {
  return has_lng_case() == kLng;
}
inline bool LatLng::has_lng() const {
  return _internal_has_lng();
}
inline void LatLng::set_has_lng() {
  _impl_._oneof_case_[1] = kLng;
}
inline void LatLng::clear_lng() {
  if (_internal_has_lng()) {
    _impl_.has_lng_.lng_ = 0;
    clear_has_has_lng();
  }
}
inline double LatLng::_internal_lng() const {
  if (_internal_has_lng()) {
    return _impl_.has_lng_.lng_;
  }
  return 0;
}
inline void LatLng::_internal_set_lng(double value) {
  if (!_internal_has_lng()) {
    clear_has_lng();
    set_has_lng();
  }
  _impl_.has_lng_.lng_ = value;
}
inline double LatLng::lng() const {
  // @@protoc_insertion_point(field_get:valhalla.LatLng.lng)
  return _internal_lng();
}
inline void LatLng::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:valhalla.LatLng.lng)
}

inline bool LatLng::has_has_lat() const {
  return has_lat_case() != HAS_LAT_NOT_SET;
}
inline void LatLng::clear_has_has_lat() {
  _impl_._oneof_case_[0] = HAS_LAT_NOT_SET;
}
inline bool LatLng::has_has_lng() const {
  return has_lng_case() != HAS_LNG_NOT_SET;
}
inline void LatLng::clear_has_has_lng() {
  _impl_._oneof_case_[1] = HAS_LNG_NOT_SET;
}
inline LatLng::HasLatCase LatLng::has_lat_case() const {
  return LatLng::HasLatCase(_impl_._oneof_case_[0]);
}
inline LatLng::HasLngCase LatLng::has_lng_case() const {
  return LatLng::HasLngCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// BoundingBox

// .valhalla.LatLng min_ll = 1;
inline bool BoundingBox::_internal_has_min_ll() const {
  return this != internal_default_instance() && _impl_.min_ll_ != nullptr;
}
inline bool BoundingBox::has_min_ll() const {
  return _internal_has_min_ll();
}
inline void BoundingBox::clear_min_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_ll_ != nullptr) {
    delete _impl_.min_ll_;
  }
  _impl_.min_ll_ = nullptr;
}
inline const ::valhalla::LatLng& BoundingBox::_internal_min_ll() const {
  const ::valhalla::LatLng* p = _impl_.min_ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& BoundingBox::min_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.min_ll)
  return _internal_min_ll();
}
inline void BoundingBox::unsafe_arena_set_allocated_min_ll(
    ::valhalla::LatLng* min_ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_ll_);
  }
  _impl_.min_ll_ = min_ll;
  if (min_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.BoundingBox.min_ll)
}
inline ::valhalla::LatLng* BoundingBox::release_min_ll() {
  
  ::valhalla::LatLng* temp = _impl_.min_ll_;
  _impl_.min_ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* BoundingBox::unsafe_arena_release_min_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.min_ll)
  
  ::valhalla::LatLng* temp = _impl_.min_ll_;
  _impl_.min_ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* BoundingBox::_internal_mutable_min_ll() {
  
  if (_impl_.min_ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.min_ll_ = p;
  }
  return _impl_.min_ll_;
}
inline ::valhalla::LatLng* BoundingBox::mutable_min_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_min_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.min_ll)
  return _msg;
}
inline void BoundingBox::set_allocated_min_ll(::valhalla::LatLng* min_ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.min_ll_;
  }
  if (min_ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min_ll);
    if (message_arena != submessage_arena) {
      min_ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.min_ll_ = min_ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.min_ll)
}

// .valhalla.LatLng max_ll = 2;
inline bool BoundingBox::_internal_has_max_ll() const {
  return this != internal_default_instance() && _impl_.max_ll_ != nullptr;
}
inline bool BoundingBox::has_max_ll() const {
  return _internal_has_max_ll();
}
inline void BoundingBox::clear_max_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_ll_ != nullptr) {
    delete _impl_.max_ll_;
  }
  _impl_.max_ll_ = nullptr;
}
inline const ::valhalla::LatLng& BoundingBox::_internal_max_ll() const {
  const ::valhalla::LatLng* p = _impl_.max_ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& BoundingBox::max_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.BoundingBox.max_ll)
  return _internal_max_ll();
}
inline void BoundingBox::unsafe_arena_set_allocated_max_ll(
    ::valhalla::LatLng* max_ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_ll_);
  }
  _impl_.max_ll_ = max_ll;
  if (max_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.BoundingBox.max_ll)
}
inline ::valhalla::LatLng* BoundingBox::release_max_ll() {
  
  ::valhalla::LatLng* temp = _impl_.max_ll_;
  _impl_.max_ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* BoundingBox::unsafe_arena_release_max_ll() {
  // @@protoc_insertion_point(field_release:valhalla.BoundingBox.max_ll)
  
  ::valhalla::LatLng* temp = _impl_.max_ll_;
  _impl_.max_ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* BoundingBox::_internal_mutable_max_ll() {
  
  if (_impl_.max_ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.max_ll_ = p;
  }
  return _impl_.max_ll_;
}
inline ::valhalla::LatLng* BoundingBox::mutable_max_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_max_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.BoundingBox.max_ll)
  return _msg;
}
inline void BoundingBox::set_allocated_max_ll(::valhalla::LatLng* max_ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.max_ll_;
  }
  if (max_ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max_ll);
    if (message_arena != submessage_arena) {
      max_ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.max_ll_ = max_ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.BoundingBox.max_ll)
}

// -------------------------------------------------------------------

// Location_PathEdge

// uint64 graph_id = 1;
inline bool Location_PathEdge::_internal_has_graph_id() const {
  return has_graph_id_case() == kGraphId;
}
inline bool Location_PathEdge::has_graph_id() const {
  return _internal_has_graph_id();
}
inline void Location_PathEdge::set_has_graph_id() {
  _impl_._oneof_case_[0] = kGraphId;
}
inline void Location_PathEdge::clear_graph_id() {
  if (_internal_has_graph_id()) {
    _impl_.has_graph_id_.graph_id_ = uint64_t{0u};
    clear_has_has_graph_id();
  }
}
inline uint64_t Location_PathEdge::_internal_graph_id() const {
  if (_internal_has_graph_id()) {
    return _impl_.has_graph_id_.graph_id_;
  }
  return uint64_t{0u};
}
inline void Location_PathEdge::_internal_set_graph_id(uint64_t value) {
  if (!_internal_has_graph_id()) {
    clear_has_graph_id();
    set_has_graph_id();
  }
  _impl_.has_graph_id_.graph_id_ = value;
}
inline uint64_t Location_PathEdge::graph_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.graph_id)
  return _internal_graph_id();
}
inline void Location_PathEdge::set_graph_id(uint64_t value) {
  _internal_set_graph_id(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.graph_id)
}

// double percent_along = 2;
inline bool Location_PathEdge::_internal_has_percent_along() const {
  return has_percent_along_case() == kPercentAlong;
}
inline bool Location_PathEdge::has_percent_along() const {
  return _internal_has_percent_along();
}
inline void Location_PathEdge::set_has_percent_along() {
  _impl_._oneof_case_[1] = kPercentAlong;
}
inline void Location_PathEdge::clear_percent_along() {
  if (_internal_has_percent_along()) {
    _impl_.has_percent_along_.percent_along_ = 0;
    clear_has_has_percent_along();
  }
}
inline double Location_PathEdge::_internal_percent_along() const {
  if (_internal_has_percent_along()) {
    return _impl_.has_percent_along_.percent_along_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_percent_along(double value) {
  if (!_internal_has_percent_along()) {
    clear_has_percent_along();
    set_has_percent_along();
  }
  _impl_.has_percent_along_.percent_along_ = value;
}
inline double Location_PathEdge::percent_along() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.percent_along)
  return _internal_percent_along();
}
inline void Location_PathEdge::set_percent_along(double value) {
  _internal_set_percent_along(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.percent_along)
}

// .valhalla.LatLng ll = 3;
inline bool Location_PathEdge::_internal_has_ll() const {
  return this != internal_default_instance() && _impl_.ll_ != nullptr;
}
inline bool Location_PathEdge::has_ll() const {
  return _internal_has_ll();
}
inline void Location_PathEdge::clear_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_ != nullptr) {
    delete _impl_.ll_;
  }
  _impl_.ll_ = nullptr;
}
inline const ::valhalla::LatLng& Location_PathEdge::_internal_ll() const {
  const ::valhalla::LatLng* p = _impl_.ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& Location_PathEdge::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.ll)
  return _internal_ll();
}
inline void Location_PathEdge::unsafe_arena_set_allocated_ll(
    ::valhalla::LatLng* ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_);
  }
  _impl_.ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Location.PathEdge.ll)
}
inline ::valhalla::LatLng* Location_PathEdge::release_ll() {
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* Location_PathEdge::unsafe_arena_release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.PathEdge.ll)
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* Location_PathEdge::_internal_mutable_ll() {
  
  if (_impl_.ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.ll_ = p;
  }
  return _impl_.ll_;
}
inline ::valhalla::LatLng* Location_PathEdge::mutable_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.ll)
  return _msg;
}
inline void Location_PathEdge::set_allocated_ll(::valhalla::LatLng* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ll_;
  }
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_ = ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.PathEdge.ll)
}

// .valhalla.Location.SideOfStreet side_of_street = 4;
inline bool Location_PathEdge::_internal_has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
inline bool Location_PathEdge::has_side_of_street() const {
  return _internal_has_side_of_street();
}
inline void Location_PathEdge::set_has_side_of_street() {
  _impl_._oneof_case_[2] = kSideOfStreet;
}
inline void Location_PathEdge::clear_side_of_street() {
  if (_internal_has_side_of_street()) {
    _impl_.has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
inline ::valhalla::Location_SideOfStreet Location_PathEdge::_internal_side_of_street() const {
  if (_internal_has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(_impl_.has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
inline ::valhalla::Location_SideOfStreet Location_PathEdge::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.side_of_street)
  return _internal_side_of_street();
}
inline void Location_PathEdge::_internal_set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!_internal_has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  _impl_.has_side_of_street_.side_of_street_ = value;
}
inline void Location_PathEdge::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  _internal_set_side_of_street(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.side_of_street)
}

// double distance = 5;
inline bool Location_PathEdge::_internal_has_distance() const {
  return has_distance_case() == kDistance;
}
inline bool Location_PathEdge::has_distance() const {
  return _internal_has_distance();
}
inline void Location_PathEdge::set_has_distance() {
  _impl_._oneof_case_[3] = kDistance;
}
inline void Location_PathEdge::clear_distance() {
  if (_internal_has_distance()) {
    _impl_.has_distance_.distance_ = 0;
    clear_has_has_distance();
  }
}
inline double Location_PathEdge::_internal_distance() const {
  if (_internal_has_distance()) {
    return _impl_.has_distance_.distance_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_distance(double value) {
  if (!_internal_has_distance()) {
    clear_has_distance();
    set_has_distance();
  }
  _impl_.has_distance_.distance_ = value;
}
inline double Location_PathEdge::distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.distance)
  return _internal_distance();
}
inline void Location_PathEdge::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.distance)
}

// int32 minimum_reachability = 6;
inline bool Location_PathEdge::_internal_has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
inline bool Location_PathEdge::has_minimum_reachability() const {
  return _internal_has_minimum_reachability();
}
inline void Location_PathEdge::set_has_minimum_reachability() {
  _impl_._oneof_case_[4] = kMinimumReachability;
}
inline void Location_PathEdge::clear_minimum_reachability() {
  if (_internal_has_minimum_reachability()) {
    _impl_.has_minimum_reachability_.minimum_reachability_ = 0;
    clear_has_has_minimum_reachability();
  }
}
inline int32_t Location_PathEdge::_internal_minimum_reachability() const {
  if (_internal_has_minimum_reachability()) {
    return _impl_.has_minimum_reachability_.minimum_reachability_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_minimum_reachability(int32_t value) {
  if (!_internal_has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  _impl_.has_minimum_reachability_.minimum_reachability_ = value;
}
inline int32_t Location_PathEdge::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.minimum_reachability)
  return _internal_minimum_reachability();
}
inline void Location_PathEdge::set_minimum_reachability(int32_t value) {
  _internal_set_minimum_reachability(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.minimum_reachability)
}

// bool begin_node = 7;
inline bool Location_PathEdge::_internal_has_begin_node() const {
  return has_begin_node_case() == kBeginNode;
}
inline bool Location_PathEdge::has_begin_node() const {
  return _internal_has_begin_node();
}
inline void Location_PathEdge::set_has_begin_node() {
  _impl_._oneof_case_[5] = kBeginNode;
}
inline void Location_PathEdge::clear_begin_node() {
  if (_internal_has_begin_node()) {
    _impl_.has_begin_node_.begin_node_ = false;
    clear_has_has_begin_node();
  }
}
inline bool Location_PathEdge::_internal_begin_node() const {
  if (_internal_has_begin_node()) {
    return _impl_.has_begin_node_.begin_node_;
  }
  return false;
}
inline void Location_PathEdge::_internal_set_begin_node(bool value) {
  if (!_internal_has_begin_node()) {
    clear_has_begin_node();
    set_has_begin_node();
  }
  _impl_.has_begin_node_.begin_node_ = value;
}
inline bool Location_PathEdge::begin_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.begin_node)
  return _internal_begin_node();
}
inline void Location_PathEdge::set_begin_node(bool value) {
  _internal_set_begin_node(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.begin_node)
}

// bool end_node = 8;
inline bool Location_PathEdge::_internal_has_end_node() const {
  return has_end_node_case() == kEndNode;
}
inline bool Location_PathEdge::has_end_node() const {
  return _internal_has_end_node();
}
inline void Location_PathEdge::set_has_end_node() {
  _impl_._oneof_case_[6] = kEndNode;
}
inline void Location_PathEdge::clear_end_node() {
  if (_internal_has_end_node()) {
    _impl_.has_end_node_.end_node_ = false;
    clear_has_has_end_node();
  }
}
inline bool Location_PathEdge::_internal_end_node() const {
  if (_internal_has_end_node()) {
    return _impl_.has_end_node_.end_node_;
  }
  return false;
}
inline void Location_PathEdge::_internal_set_end_node(bool value) {
  if (!_internal_has_end_node()) {
    clear_has_end_node();
    set_has_end_node();
  }
  _impl_.has_end_node_.end_node_ = value;
}
inline bool Location_PathEdge::end_node() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.end_node)
  return _internal_end_node();
}
inline void Location_PathEdge::set_end_node(bool value) {
  _internal_set_end_node(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.end_node)
}

// repeated string names = 10;
inline int Location_PathEdge::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int Location_PathEdge::names_size() const {
  return _internal_names_size();
}
inline void Location_PathEdge::clear_names() {
  _impl_.names_.Clear();
}
inline std::string* Location_PathEdge::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:valhalla.Location.PathEdge.names)
  return _s;
}
inline const std::string& Location_PathEdge::_internal_names(int index) const {
  return _impl_.names_.Get(index);
}
inline const std::string& Location_PathEdge::names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.names)
  return _internal_names(index);
}
inline std::string* Location_PathEdge::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.PathEdge.names)
  return _impl_.names_.Mutable(index);
}
inline void Location_PathEdge::set_names(int index, const std::string& value) {
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::set_names(int index, std::string&& value) {
  _impl_.names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::set_names(int index, const char* value, size_t size) {
  _impl_.names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Location.PathEdge.names)
}
inline std::string* Location_PathEdge::_internal_add_names() {
  return _impl_.names_.Add();
}
inline void Location_PathEdge::add_names(const std::string& value) {
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::add_names(std::string&& value) {
  _impl_.names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Location.PathEdge.names)
}
inline void Location_PathEdge::add_names(const char* value, size_t size) {
  _impl_.names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Location.PathEdge.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Location_PathEdge::names() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.PathEdge.names)
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Location_PathEdge::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.PathEdge.names)
  return &_impl_.names_;
}

// int32 outbound_reach = 11;
inline bool Location_PathEdge::_internal_has_outbound_reach() const {
  return has_outbound_reach_case() == kOutboundReach;
}
inline bool Location_PathEdge::has_outbound_reach() const {
  return _internal_has_outbound_reach();
}
inline void Location_PathEdge::set_has_outbound_reach() {
  _impl_._oneof_case_[7] = kOutboundReach;
}
inline void Location_PathEdge::clear_outbound_reach() {
  if (_internal_has_outbound_reach()) {
    _impl_.has_outbound_reach_.outbound_reach_ = 0;
    clear_has_has_outbound_reach();
  }
}
inline int32_t Location_PathEdge::_internal_outbound_reach() const {
  if (_internal_has_outbound_reach()) {
    return _impl_.has_outbound_reach_.outbound_reach_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_outbound_reach(int32_t value) {
  if (!_internal_has_outbound_reach()) {
    clear_has_outbound_reach();
    set_has_outbound_reach();
  }
  _impl_.has_outbound_reach_.outbound_reach_ = value;
}
inline int32_t Location_PathEdge::outbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.outbound_reach)
  return _internal_outbound_reach();
}
inline void Location_PathEdge::set_outbound_reach(int32_t value) {
  _internal_set_outbound_reach(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.outbound_reach)
}

// int32 inbound_reach = 12;
inline bool Location_PathEdge::_internal_has_inbound_reach() const {
  return has_inbound_reach_case() == kInboundReach;
}
inline bool Location_PathEdge::has_inbound_reach() const {
  return _internal_has_inbound_reach();
}
inline void Location_PathEdge::set_has_inbound_reach() {
  _impl_._oneof_case_[8] = kInboundReach;
}
inline void Location_PathEdge::clear_inbound_reach() {
  if (_internal_has_inbound_reach()) {
    _impl_.has_inbound_reach_.inbound_reach_ = 0;
    clear_has_has_inbound_reach();
  }
}
inline int32_t Location_PathEdge::_internal_inbound_reach() const {
  if (_internal_has_inbound_reach()) {
    return _impl_.has_inbound_reach_.inbound_reach_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_inbound_reach(int32_t value) {
  if (!_internal_has_inbound_reach()) {
    clear_has_inbound_reach();
    set_has_inbound_reach();
  }
  _impl_.has_inbound_reach_.inbound_reach_ = value;
}
inline int32_t Location_PathEdge::inbound_reach() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.inbound_reach)
  return _internal_inbound_reach();
}
inline void Location_PathEdge::set_inbound_reach(int32_t value) {
  _internal_set_inbound_reach(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.inbound_reach)
}

// float heading = 13;
inline bool Location_PathEdge::_internal_has_heading() const {
  return has_heading_case() == kHeading;
}
inline bool Location_PathEdge::has_heading() const {
  return _internal_has_heading();
}
inline void Location_PathEdge::set_has_heading() {
  _impl_._oneof_case_[9] = kHeading;
}
inline void Location_PathEdge::clear_heading() {
  if (_internal_has_heading()) {
    _impl_.has_heading_.heading_ = 0;
    clear_has_has_heading();
  }
}
inline float Location_PathEdge::_internal_heading() const {
  if (_internal_has_heading()) {
    return _impl_.has_heading_.heading_;
  }
  return 0;
}
inline void Location_PathEdge::_internal_set_heading(float value) {
  if (!_internal_has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  _impl_.has_heading_.heading_ = value;
}
inline float Location_PathEdge::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.PathEdge.heading)
  return _internal_heading();
}
inline void Location_PathEdge::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.PathEdge.heading)
}

inline bool Location_PathEdge::has_has_graph_id() const {
  return has_graph_id_case() != HAS_GRAPH_ID_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_graph_id() {
  _impl_._oneof_case_[0] = HAS_GRAPH_ID_NOT_SET;
}
inline bool Location_PathEdge::has_has_percent_along() const {
  return has_percent_along_case() != HAS_PERCENT_ALONG_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_percent_along() {
  _impl_._oneof_case_[1] = HAS_PERCENT_ALONG_NOT_SET;
}
inline bool Location_PathEdge::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_side_of_street() {
  _impl_._oneof_case_[2] = HAS_SIDE_OF_STREET_NOT_SET;
}
inline bool Location_PathEdge::has_has_distance() const {
  return has_distance_case() != HAS_DISTANCE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_distance() {
  _impl_._oneof_case_[3] = HAS_DISTANCE_NOT_SET;
}
inline bool Location_PathEdge::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_minimum_reachability() {
  _impl_._oneof_case_[4] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline bool Location_PathEdge::has_has_begin_node() const {
  return has_begin_node_case() != HAS_BEGIN_NODE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_begin_node() {
  _impl_._oneof_case_[5] = HAS_BEGIN_NODE_NOT_SET;
}
inline bool Location_PathEdge::has_has_end_node() const {
  return has_end_node_case() != HAS_END_NODE_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_end_node() {
  _impl_._oneof_case_[6] = HAS_END_NODE_NOT_SET;
}
inline bool Location_PathEdge::has_has_outbound_reach() const {
  return has_outbound_reach_case() != HAS_OUTBOUND_REACH_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_outbound_reach() {
  _impl_._oneof_case_[7] = HAS_OUTBOUND_REACH_NOT_SET;
}
inline bool Location_PathEdge::has_has_inbound_reach() const {
  return has_inbound_reach_case() != HAS_INBOUND_REACH_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_inbound_reach() {
  _impl_._oneof_case_[8] = HAS_INBOUND_REACH_NOT_SET;
}
inline bool Location_PathEdge::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
inline void Location_PathEdge::clear_has_has_heading() {
  _impl_._oneof_case_[9] = HAS_HEADING_NOT_SET;
}
inline Location_PathEdge::HasGraphIdCase Location_PathEdge::has_graph_id_case() const {
  return Location_PathEdge::HasGraphIdCase(_impl_._oneof_case_[0]);
}
inline Location_PathEdge::HasPercentAlongCase Location_PathEdge::has_percent_along_case() const {
  return Location_PathEdge::HasPercentAlongCase(_impl_._oneof_case_[1]);
}
inline Location_PathEdge::HasSideOfStreetCase Location_PathEdge::has_side_of_street_case() const {
  return Location_PathEdge::HasSideOfStreetCase(_impl_._oneof_case_[2]);
}
inline Location_PathEdge::HasDistanceCase Location_PathEdge::has_distance_case() const {
  return Location_PathEdge::HasDistanceCase(_impl_._oneof_case_[3]);
}
inline Location_PathEdge::HasMinimumReachabilityCase Location_PathEdge::has_minimum_reachability_case() const {
  return Location_PathEdge::HasMinimumReachabilityCase(_impl_._oneof_case_[4]);
}
inline Location_PathEdge::HasBeginNodeCase Location_PathEdge::has_begin_node_case() const {
  return Location_PathEdge::HasBeginNodeCase(_impl_._oneof_case_[5]);
}
inline Location_PathEdge::HasEndNodeCase Location_PathEdge::has_end_node_case() const {
  return Location_PathEdge::HasEndNodeCase(_impl_._oneof_case_[6]);
}
inline Location_PathEdge::HasOutboundReachCase Location_PathEdge::has_outbound_reach_case() const {
  return Location_PathEdge::HasOutboundReachCase(_impl_._oneof_case_[7]);
}
inline Location_PathEdge::HasInboundReachCase Location_PathEdge::has_inbound_reach_case() const {
  return Location_PathEdge::HasInboundReachCase(_impl_._oneof_case_[8]);
}
inline Location_PathEdge::HasHeadingCase Location_PathEdge::has_heading_case() const {
  return Location_PathEdge::HasHeadingCase(_impl_._oneof_case_[9]);
}
// -------------------------------------------------------------------

// Location_SearchFilter

// .valhalla.RoadClass min_road_class = 1;
inline bool Location_SearchFilter::_internal_has_min_road_class() const {
  return has_min_road_class_case() == kMinRoadClass;
}
inline bool Location_SearchFilter::has_min_road_class() const {
  return _internal_has_min_road_class();
}
inline void Location_SearchFilter::set_has_min_road_class() {
  _impl_._oneof_case_[0] = kMinRoadClass;
}
inline void Location_SearchFilter::clear_min_road_class() {
  if (_internal_has_min_road_class()) {
    _impl_.has_min_road_class_.min_road_class_ = 0;
    clear_has_has_min_road_class();
  }
}
inline ::valhalla::RoadClass Location_SearchFilter::_internal_min_road_class() const {
  if (_internal_has_min_road_class()) {
    return static_cast< ::valhalla::RoadClass >(_impl_.has_min_road_class_.min_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
inline ::valhalla::RoadClass Location_SearchFilter::min_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.min_road_class)
  return _internal_min_road_class();
}
inline void Location_SearchFilter::_internal_set_min_road_class(::valhalla::RoadClass value) {
  if (!_internal_has_min_road_class()) {
    clear_has_min_road_class();
    set_has_min_road_class();
  }
  _impl_.has_min_road_class_.min_road_class_ = value;
}
inline void Location_SearchFilter::set_min_road_class(::valhalla::RoadClass value) {
  _internal_set_min_road_class(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.min_road_class)
}

// .valhalla.RoadClass max_road_class = 2;
inline bool Location_SearchFilter::_internal_has_max_road_class() const {
  return has_max_road_class_case() == kMaxRoadClass;
}
inline bool Location_SearchFilter::has_max_road_class() const {
  return _internal_has_max_road_class();
}
inline void Location_SearchFilter::set_has_max_road_class() {
  _impl_._oneof_case_[1] = kMaxRoadClass;
}
inline void Location_SearchFilter::clear_max_road_class() {
  if (_internal_has_max_road_class()) {
    _impl_.has_max_road_class_.max_road_class_ = 0;
    clear_has_has_max_road_class();
  }
}
inline ::valhalla::RoadClass Location_SearchFilter::_internal_max_road_class() const {
  if (_internal_has_max_road_class()) {
    return static_cast< ::valhalla::RoadClass >(_impl_.has_max_road_class_.max_road_class_);
  }
  return static_cast< ::valhalla::RoadClass >(0);
}
inline ::valhalla::RoadClass Location_SearchFilter::max_road_class() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.max_road_class)
  return _internal_max_road_class();
}
inline void Location_SearchFilter::_internal_set_max_road_class(::valhalla::RoadClass value) {
  if (!_internal_has_max_road_class()) {
    clear_has_max_road_class();
    set_has_max_road_class();
  }
  _impl_.has_max_road_class_.max_road_class_ = value;
}
inline void Location_SearchFilter::set_max_road_class(::valhalla::RoadClass value) {
  _internal_set_max_road_class(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.max_road_class)
}

// bool exclude_tunnel = 3;
inline bool Location_SearchFilter::_internal_has_exclude_tunnel() const {
  return has_exclude_tunnel_case() == kExcludeTunnel;
}
inline bool Location_SearchFilter::has_exclude_tunnel() const {
  return _internal_has_exclude_tunnel();
}
inline void Location_SearchFilter::set_has_exclude_tunnel() {
  _impl_._oneof_case_[2] = kExcludeTunnel;
}
inline void Location_SearchFilter::clear_exclude_tunnel() {
  if (_internal_has_exclude_tunnel()) {
    _impl_.has_exclude_tunnel_.exclude_tunnel_ = false;
    clear_has_has_exclude_tunnel();
  }
}
inline bool Location_SearchFilter::_internal_exclude_tunnel() const {
  if (_internal_has_exclude_tunnel()) {
    return _impl_.has_exclude_tunnel_.exclude_tunnel_;
  }
  return false;
}
inline void Location_SearchFilter::_internal_set_exclude_tunnel(bool value) {
  if (!_internal_has_exclude_tunnel()) {
    clear_has_exclude_tunnel();
    set_has_exclude_tunnel();
  }
  _impl_.has_exclude_tunnel_.exclude_tunnel_ = value;
}
inline bool Location_SearchFilter::exclude_tunnel() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_tunnel)
  return _internal_exclude_tunnel();
}
inline void Location_SearchFilter::set_exclude_tunnel(bool value) {
  _internal_set_exclude_tunnel(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_tunnel)
}

// bool exclude_bridge = 4;
inline bool Location_SearchFilter::_internal_has_exclude_bridge() const {
  return has_exclude_bridge_case() == kExcludeBridge;
}
inline bool Location_SearchFilter::has_exclude_bridge() const {
  return _internal_has_exclude_bridge();
}
inline void Location_SearchFilter::set_has_exclude_bridge() {
  _impl_._oneof_case_[3] = kExcludeBridge;
}
inline void Location_SearchFilter::clear_exclude_bridge() {
  if (_internal_has_exclude_bridge()) {
    _impl_.has_exclude_bridge_.exclude_bridge_ = false;
    clear_has_has_exclude_bridge();
  }
}
inline bool Location_SearchFilter::_internal_exclude_bridge() const {
  if (_internal_has_exclude_bridge()) {
    return _impl_.has_exclude_bridge_.exclude_bridge_;
  }
  return false;
}
inline void Location_SearchFilter::_internal_set_exclude_bridge(bool value) {
  if (!_internal_has_exclude_bridge()) {
    clear_has_exclude_bridge();
    set_has_exclude_bridge();
  }
  _impl_.has_exclude_bridge_.exclude_bridge_ = value;
}
inline bool Location_SearchFilter::exclude_bridge() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_bridge)
  return _internal_exclude_bridge();
}
inline void Location_SearchFilter::set_exclude_bridge(bool value) {
  _internal_set_exclude_bridge(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_bridge)
}

// bool exclude_ramp = 5;
inline bool Location_SearchFilter::_internal_has_exclude_ramp() const {
  return has_exclude_ramp_case() == kExcludeRamp;
}
inline bool Location_SearchFilter::has_exclude_ramp() const {
  return _internal_has_exclude_ramp();
}
inline void Location_SearchFilter::set_has_exclude_ramp() {
  _impl_._oneof_case_[4] = kExcludeRamp;
}
inline void Location_SearchFilter::clear_exclude_ramp() {
  if (_internal_has_exclude_ramp()) {
    _impl_.has_exclude_ramp_.exclude_ramp_ = false;
    clear_has_has_exclude_ramp();
  }
}
inline bool Location_SearchFilter::_internal_exclude_ramp() const {
  if (_internal_has_exclude_ramp()) {
    return _impl_.has_exclude_ramp_.exclude_ramp_;
  }
  return false;
}
inline void Location_SearchFilter::_internal_set_exclude_ramp(bool value) {
  if (!_internal_has_exclude_ramp()) {
    clear_has_exclude_ramp();
    set_has_exclude_ramp();
  }
  _impl_.has_exclude_ramp_.exclude_ramp_ = value;
}
inline bool Location_SearchFilter::exclude_ramp() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_ramp)
  return _internal_exclude_ramp();
}
inline void Location_SearchFilter::set_exclude_ramp(bool value) {
  _internal_set_exclude_ramp(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_ramp)
}

// bool exclude_closures = 6;
inline bool Location_SearchFilter::_internal_has_exclude_closures() const {
  return has_exclude_closures_case() == kExcludeClosures;
}
inline bool Location_SearchFilter::has_exclude_closures() const {
  return _internal_has_exclude_closures();
}
inline void Location_SearchFilter::set_has_exclude_closures() {
  _impl_._oneof_case_[5] = kExcludeClosures;
}
inline void Location_SearchFilter::clear_exclude_closures() {
  if (_internal_has_exclude_closures()) {
    _impl_.has_exclude_closures_.exclude_closures_ = false;
    clear_has_has_exclude_closures();
  }
}
inline bool Location_SearchFilter::_internal_exclude_closures() const {
  if (_internal_has_exclude_closures()) {
    return _impl_.has_exclude_closures_.exclude_closures_;
  }
  return false;
}
inline void Location_SearchFilter::_internal_set_exclude_closures(bool value) {
  if (!_internal_has_exclude_closures()) {
    clear_has_exclude_closures();
    set_has_exclude_closures();
  }
  _impl_.has_exclude_closures_.exclude_closures_ = value;
}
inline bool Location_SearchFilter::exclude_closures() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.SearchFilter.exclude_closures)
  return _internal_exclude_closures();
}
inline void Location_SearchFilter::set_exclude_closures(bool value) {
  _internal_set_exclude_closures(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.SearchFilter.exclude_closures)
}

inline bool Location_SearchFilter::has_has_min_road_class() const {
  return has_min_road_class_case() != HAS_MIN_ROAD_CLASS_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_min_road_class() {
  _impl_._oneof_case_[0] = HAS_MIN_ROAD_CLASS_NOT_SET;
}
inline bool Location_SearchFilter::has_has_max_road_class() const {
  return has_max_road_class_case() != HAS_MAX_ROAD_CLASS_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_max_road_class() {
  _impl_._oneof_case_[1] = HAS_MAX_ROAD_CLASS_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_tunnel() const {
  return has_exclude_tunnel_case() != HAS_EXCLUDE_TUNNEL_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_tunnel() {
  _impl_._oneof_case_[2] = HAS_EXCLUDE_TUNNEL_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_bridge() const {
  return has_exclude_bridge_case() != HAS_EXCLUDE_BRIDGE_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_bridge() {
  _impl_._oneof_case_[3] = HAS_EXCLUDE_BRIDGE_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_ramp() const {
  return has_exclude_ramp_case() != HAS_EXCLUDE_RAMP_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_ramp() {
  _impl_._oneof_case_[4] = HAS_EXCLUDE_RAMP_NOT_SET;
}
inline bool Location_SearchFilter::has_has_exclude_closures() const {
  return has_exclude_closures_case() != HAS_EXCLUDE_CLOSURES_NOT_SET;
}
inline void Location_SearchFilter::clear_has_has_exclude_closures() {
  _impl_._oneof_case_[5] = HAS_EXCLUDE_CLOSURES_NOT_SET;
}
inline Location_SearchFilter::HasMinRoadClassCase Location_SearchFilter::has_min_road_class_case() const {
  return Location_SearchFilter::HasMinRoadClassCase(_impl_._oneof_case_[0]);
}
inline Location_SearchFilter::HasMaxRoadClassCase Location_SearchFilter::has_max_road_class_case() const {
  return Location_SearchFilter::HasMaxRoadClassCase(_impl_._oneof_case_[1]);
}
inline Location_SearchFilter::HasExcludeTunnelCase Location_SearchFilter::has_exclude_tunnel_case() const {
  return Location_SearchFilter::HasExcludeTunnelCase(_impl_._oneof_case_[2]);
}
inline Location_SearchFilter::HasExcludeBridgeCase Location_SearchFilter::has_exclude_bridge_case() const {
  return Location_SearchFilter::HasExcludeBridgeCase(_impl_._oneof_case_[3]);
}
inline Location_SearchFilter::HasExcludeRampCase Location_SearchFilter::has_exclude_ramp_case() const {
  return Location_SearchFilter::HasExcludeRampCase(_impl_._oneof_case_[4]);
}
inline Location_SearchFilter::HasExcludeClosuresCase Location_SearchFilter::has_exclude_closures_case() const {
  return Location_SearchFilter::HasExcludeClosuresCase(_impl_._oneof_case_[5]);
}
// -------------------------------------------------------------------

// Location

// .valhalla.LatLng ll = 1;
inline bool Location::_internal_has_ll() const {
  return this != internal_default_instance() && _impl_.ll_ != nullptr;
}
inline bool Location::has_ll() const {
  return _internal_has_ll();
}
inline void Location::clear_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_ != nullptr) {
    delete _impl_.ll_;
  }
  _impl_.ll_ = nullptr;
}
inline const ::valhalla::LatLng& Location::_internal_ll() const {
  const ::valhalla::LatLng* p = _impl_.ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& Location::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.ll)
  return _internal_ll();
}
inline void Location::unsafe_arena_set_allocated_ll(
    ::valhalla::LatLng* ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_);
  }
  _impl_.ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Location.ll)
}
inline ::valhalla::LatLng* Location::release_ll() {
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* Location::unsafe_arena_release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.ll)
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* Location::_internal_mutable_ll() {
  
  if (_impl_.ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.ll_ = p;
  }
  return _impl_.ll_;
}
inline ::valhalla::LatLng* Location::mutable_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.ll)
  return _msg;
}
inline void Location::set_allocated_ll(::valhalla::LatLng* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ll_;
  }
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_ = ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.ll)
}

// .valhalla.Location.Type type = 2;
inline bool Location::_internal_has_type() const {
  return has_type_case() == kType;
}
inline bool Location::has_type() const {
  return _internal_has_type();
}
inline void Location::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline void Location::clear_type() {
  if (_internal_has_type()) {
    _impl_.has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::Location_Type Location::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::valhalla::Location_Type >(_impl_.has_type_.type_);
  }
  return static_cast< ::valhalla::Location_Type >(0);
}
inline ::valhalla::Location_Type Location::type() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.type)
  return _internal_type();
}
inline void Location::_internal_set_type(::valhalla::Location_Type value) {
  if (!_internal_has_type()) {
    clear_has_type();
    set_has_type();
  }
  _impl_.has_type_.type_ = value;
}
inline void Location::set_type(::valhalla::Location_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.type)
}

// uint32 heading = 3;
inline bool Location::_internal_has_heading() const {
  return has_heading_case() == kHeading;
}
inline bool Location::has_heading() const {
  return _internal_has_heading();
}
inline void Location::set_has_heading() {
  _impl_._oneof_case_[1] = kHeading;
}
inline void Location::clear_heading() {
  if (_internal_has_heading()) {
    _impl_.has_heading_.heading_ = 0u;
    clear_has_has_heading();
  }
}
inline uint32_t Location::_internal_heading() const {
  if (_internal_has_heading()) {
    return _impl_.has_heading_.heading_;
  }
  return 0u;
}
inline void Location::_internal_set_heading(uint32_t value) {
  if (!_internal_has_heading()) {
    clear_has_heading();
    set_has_heading();
  }
  _impl_.has_heading_.heading_ = value;
}
inline uint32_t Location::heading() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading)
  return _internal_heading();
}
inline void Location::set_heading(uint32_t value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.heading)
}

// string name = 4;
inline bool Location::_internal_has_name() const {
  return has_name_case() == kName;
}
inline bool Location::has_name() const {
  return _internal_has_name();
}
inline void Location::set_has_name() {
  _impl_._oneof_case_[2] = kName;
}
inline void Location::clear_name() {
  if (_internal_has_name()) {
    _impl_.has_name_.name_.Destroy();
    clear_has_has_name();
  }
}
inline const std::string& Location::name() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.name)
}
inline std::string* Location::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.name)
  return _s;
}
inline const std::string& Location::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.has_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  return _impl_.has_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.Location.name)
  if (_internal_has_name()) {
    clear_has_has_name();
    return _impl_.has_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_name(std::string* name) {
  if (has_has_name()) {
    clear_has_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.has_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.name)
}

// string street = 5;
inline bool Location::_internal_has_street() const {
  return has_street_case() == kStreet;
}
inline bool Location::has_street() const {
  return _internal_has_street();
}
inline void Location::set_has_street() {
  _impl_._oneof_case_[3] = kStreet;
}
inline void Location::clear_street() {
  if (_internal_has_street()) {
    _impl_.has_street_.street_.Destroy();
    clear_has_has_street();
  }
}
inline const std::string& Location::street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street)
  return _internal_street();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_street(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_street()) {
    clear_has_street();
    set_has_street();
    _impl_.has_street_.street_.InitDefault();
  }
  _impl_.has_street_.street_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.street)
}
inline std::string* Location::mutable_street() {
  std::string* _s = _internal_mutable_street();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.street)
  return _s;
}
inline const std::string& Location::_internal_street() const {
  if (_internal_has_street()) {
    return _impl_.has_street_.street_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_street(const std::string& value) {
  if (!_internal_has_street()) {
    clear_has_street();
    set_has_street();
    _impl_.has_street_.street_.InitDefault();
  }
  _impl_.has_street_.street_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_street() {
  if (!_internal_has_street()) {
    clear_has_street();
    set_has_street();
    _impl_.has_street_.street_.InitDefault();
  }
  return _impl_.has_street_.street_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_street() {
  // @@protoc_insertion_point(field_release:valhalla.Location.street)
  if (_internal_has_street()) {
    clear_has_has_street();
    return _impl_.has_street_.street_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_street(std::string* street) {
  if (has_has_street()) {
    clear_has_street();
  }
  if (street != nullptr) {
    set_has_street();
    _impl_.has_street_.street_.InitAllocated(street, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.street)
}

// string city = 6;
inline bool Location::_internal_has_city() const {
  return has_city_case() == kCity;
}
inline bool Location::has_city() const {
  return _internal_has_city();
}
inline void Location::set_has_city() {
  _impl_._oneof_case_[4] = kCity;
}
inline void Location::clear_city() {
  if (_internal_has_city()) {
    _impl_.has_city_.city_.Destroy();
    clear_has_has_city();
  }
}
inline const std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_city(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_city()) {
    clear_has_city();
    set_has_city();
    _impl_.has_city_.city_.InitDefault();
  }
  _impl_.has_city_.city_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.city)
}
inline std::string* Location::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.city)
  return _s;
}
inline const std::string& Location::_internal_city() const {
  if (_internal_has_city()) {
    return _impl_.has_city_.city_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_city(const std::string& value) {
  if (!_internal_has_city()) {
    clear_has_city();
    set_has_city();
    _impl_.has_city_.city_.InitDefault();
  }
  _impl_.has_city_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_city() {
  if (!_internal_has_city()) {
    clear_has_city();
    set_has_city();
    _impl_.has_city_.city_.InitDefault();
  }
  return _impl_.has_city_.city_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_city() {
  // @@protoc_insertion_point(field_release:valhalla.Location.city)
  if (_internal_has_city()) {
    clear_has_has_city();
    return _impl_.has_city_.city_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_city(std::string* city) {
  if (has_has_city()) {
    clear_has_city();
  }
  if (city != nullptr) {
    set_has_city();
    _impl_.has_city_.city_.InitAllocated(city, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.city)
}

// string state = 7;
inline bool Location::_internal_has_state() const {
  return has_state_case() == kState;
}
inline bool Location::has_state() const {
  return _internal_has_state();
}
inline void Location::set_has_state() {
  _impl_._oneof_case_[5] = kState;
}
inline void Location::clear_state() {
  if (_internal_has_state()) {
    _impl_.has_state_.state_.Destroy();
    clear_has_has_state();
  }
}
inline const std::string& Location::state() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_state(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_state()) {
    clear_has_state();
    set_has_state();
    _impl_.has_state_.state_.InitDefault();
  }
  _impl_.has_state_.state_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.state)
}
inline std::string* Location::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.state)
  return _s;
}
inline const std::string& Location::_internal_state() const {
  if (_internal_has_state()) {
    return _impl_.has_state_.state_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_state(const std::string& value) {
  if (!_internal_has_state()) {
    clear_has_state();
    set_has_state();
    _impl_.has_state_.state_.InitDefault();
  }
  _impl_.has_state_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_state() {
  if (!_internal_has_state()) {
    clear_has_state();
    set_has_state();
    _impl_.has_state_.state_.InitDefault();
  }
  return _impl_.has_state_.state_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_state() {
  // @@protoc_insertion_point(field_release:valhalla.Location.state)
  if (_internal_has_state()) {
    clear_has_has_state();
    return _impl_.has_state_.state_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_state(std::string* state) {
  if (has_has_state()) {
    clear_has_state();
  }
  if (state != nullptr) {
    set_has_state();
    _impl_.has_state_.state_.InitAllocated(state, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.state)
}

// string postal_code = 8;
inline bool Location::_internal_has_postal_code() const {
  return has_postal_code_case() == kPostalCode;
}
inline bool Location::has_postal_code() const {
  return _internal_has_postal_code();
}
inline void Location::set_has_postal_code() {
  _impl_._oneof_case_[6] = kPostalCode;
}
inline void Location::clear_postal_code() {
  if (_internal_has_postal_code()) {
    _impl_.has_postal_code_.postal_code_.Destroy();
    clear_has_has_postal_code();
  }
}
inline const std::string& Location::postal_code() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.postal_code)
  return _internal_postal_code();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_postal_code(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    _impl_.has_postal_code_.postal_code_.InitDefault();
  }
  _impl_.has_postal_code_.postal_code_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.postal_code)
}
inline std::string* Location::mutable_postal_code() {
  std::string* _s = _internal_mutable_postal_code();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.postal_code)
  return _s;
}
inline const std::string& Location::_internal_postal_code() const {
  if (_internal_has_postal_code()) {
    return _impl_.has_postal_code_.postal_code_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_postal_code(const std::string& value) {
  if (!_internal_has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    _impl_.has_postal_code_.postal_code_.InitDefault();
  }
  _impl_.has_postal_code_.postal_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_postal_code() {
  if (!_internal_has_postal_code()) {
    clear_has_postal_code();
    set_has_postal_code();
    _impl_.has_postal_code_.postal_code_.InitDefault();
  }
  return _impl_.has_postal_code_.postal_code_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_postal_code() {
  // @@protoc_insertion_point(field_release:valhalla.Location.postal_code)
  if (_internal_has_postal_code()) {
    clear_has_has_postal_code();
    return _impl_.has_postal_code_.postal_code_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_postal_code(std::string* postal_code) {
  if (has_has_postal_code()) {
    clear_has_postal_code();
  }
  if (postal_code != nullptr) {
    set_has_postal_code();
    _impl_.has_postal_code_.postal_code_.InitAllocated(postal_code, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.postal_code)
}

// string country = 9;
inline bool Location::_internal_has_country() const {
  return has_country_case() == kCountry;
}
inline bool Location::has_country() const {
  return _internal_has_country();
}
inline void Location::set_has_country() {
  _impl_._oneof_case_[7] = kCountry;
}
inline void Location::clear_country() {
  if (_internal_has_country()) {
    _impl_.has_country_.country_.Destroy();
    clear_has_has_country();
  }
}
inline const std::string& Location::country() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_country(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_country()) {
    clear_has_country();
    set_has_country();
    _impl_.has_country_.country_.InitDefault();
  }
  _impl_.has_country_.country_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.country)
}
inline std::string* Location::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.country)
  return _s;
}
inline const std::string& Location::_internal_country() const {
  if (_internal_has_country()) {
    return _impl_.has_country_.country_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_country(const std::string& value) {
  if (!_internal_has_country()) {
    clear_has_country();
    set_has_country();
    _impl_.has_country_.country_.InitDefault();
  }
  _impl_.has_country_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_country() {
  if (!_internal_has_country()) {
    clear_has_country();
    set_has_country();
    _impl_.has_country_.country_.InitDefault();
  }
  return _impl_.has_country_.country_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_country() {
  // @@protoc_insertion_point(field_release:valhalla.Location.country)
  if (_internal_has_country()) {
    clear_has_has_country();
    return _impl_.has_country_.country_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_country(std::string* country) {
  if (has_has_country()) {
    clear_has_country();
  }
  if (country != nullptr) {
    set_has_country();
    _impl_.has_country_.country_.InitAllocated(country, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.country)
}

// string phone = 10;
inline bool Location::_internal_has_phone() const {
  return has_phone_case() == kPhone;
}
inline bool Location::has_phone() const {
  return _internal_has_phone();
}
inline void Location::set_has_phone() {
  _impl_._oneof_case_[8] = kPhone;
}
inline void Location::clear_phone() {
  if (_internal_has_phone()) {
    _impl_.has_phone_.phone_.Destroy();
    clear_has_has_phone();
  }
}
inline const std::string& Location::phone() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_phone(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_phone()) {
    clear_has_phone();
    set_has_phone();
    _impl_.has_phone_.phone_.InitDefault();
  }
  _impl_.has_phone_.phone_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.phone)
}
inline std::string* Location::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.phone)
  return _s;
}
inline const std::string& Location::_internal_phone() const {
  if (_internal_has_phone()) {
    return _impl_.has_phone_.phone_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_phone(const std::string& value) {
  if (!_internal_has_phone()) {
    clear_has_phone();
    set_has_phone();
    _impl_.has_phone_.phone_.InitDefault();
  }
  _impl_.has_phone_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_phone() {
  if (!_internal_has_phone()) {
    clear_has_phone();
    set_has_phone();
    _impl_.has_phone_.phone_.InitDefault();
  }
  return _impl_.has_phone_.phone_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_phone() {
  // @@protoc_insertion_point(field_release:valhalla.Location.phone)
  if (_internal_has_phone()) {
    clear_has_has_phone();
    return _impl_.has_phone_.phone_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_phone(std::string* phone) {
  if (has_has_phone()) {
    clear_has_phone();
  }
  if (phone != nullptr) {
    set_has_phone();
    _impl_.has_phone_.phone_.InitAllocated(phone, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.phone)
}

// string url = 11;
inline bool Location::_internal_has_url() const {
  return has_url_case() == kUrl;
}
inline bool Location::has_url() const {
  return _internal_has_url();
}
inline void Location::set_has_url() {
  _impl_._oneof_case_[9] = kUrl;
}
inline void Location::clear_url() {
  if (_internal_has_url()) {
    _impl_.has_url_.url_.Destroy();
    clear_has_has_url();
  }
}
inline const std::string& Location::url() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_has_url();
    set_has_url();
    _impl_.has_url_.url_.InitDefault();
  }
  _impl_.has_url_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.url)
}
inline std::string* Location::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.url)
  return _s;
}
inline const std::string& Location::_internal_url() const {
  if (_internal_has_url()) {
    return _impl_.has_url_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_has_url();
    set_has_url();
    _impl_.has_url_.url_.InitDefault();
  }
  _impl_.has_url_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_has_url();
    set_has_url();
    _impl_.has_url_.url_.InitDefault();
  }
  return _impl_.has_url_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_url() {
  // @@protoc_insertion_point(field_release:valhalla.Location.url)
  if (_internal_has_url()) {
    clear_has_has_url();
    return _impl_.has_url_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_url(std::string* url) {
  if (has_has_url()) {
    clear_has_url();
  }
  if (url != nullptr) {
    set_has_url();
    _impl_.has_url_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.url)
}

// string date_time = 12;
inline bool Location::_internal_has_date_time() const {
  return has_date_time_case() == kDateTime;
}
inline bool Location::has_date_time() const {
  return _internal_has_date_time();
}
inline void Location::set_has_date_time() {
  _impl_._oneof_case_[10] = kDateTime;
}
inline void Location::clear_date_time() {
  if (_internal_has_date_time()) {
    _impl_.has_date_time_.date_time_.Destroy();
    clear_has_has_date_time();
  }
}
inline const std::string& Location::date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.date_time)
  return _internal_date_time();
}
template <typename ArgT0, typename... ArgT>
inline void Location::set_date_time(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    _impl_.has_date_time_.date_time_.InitDefault();
  }
  _impl_.has_date_time_.date_time_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Location.date_time)
}
inline std::string* Location::mutable_date_time() {
  std::string* _s = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.date_time)
  return _s;
}
inline const std::string& Location::_internal_date_time() const {
  if (_internal_has_date_time()) {
    return _impl_.has_date_time_.date_time_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Location::_internal_set_date_time(const std::string& value) {
  if (!_internal_has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    _impl_.has_date_time_.date_time_.InitDefault();
  }
  _impl_.has_date_time_.date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_date_time() {
  if (!_internal_has_date_time()) {
    clear_has_date_time();
    set_has_date_time();
    _impl_.has_date_time_.date_time_.InitDefault();
  }
  return _impl_.has_date_time_.date_time_.Mutable(      GetArenaForAllocation());
}
inline std::string* Location::release_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.Location.date_time)
  if (_internal_has_date_time()) {
    clear_has_has_date_time();
    return _impl_.has_date_time_.date_time_.Release();
  } else {
    return nullptr;
  }
}
inline void Location::set_allocated_date_time(std::string* date_time) {
  if (has_has_date_time()) {
    clear_has_date_time();
  }
  if (date_time != nullptr) {
    set_has_date_time();
    _impl_.has_date_time_.date_time_.InitAllocated(date_time, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.date_time)
}

// .valhalla.Location.SideOfStreet side_of_street = 13;
inline bool Location::_internal_has_side_of_street() const {
  return has_side_of_street_case() == kSideOfStreet;
}
inline bool Location::has_side_of_street() const {
  return _internal_has_side_of_street();
}
inline void Location::set_has_side_of_street() {
  _impl_._oneof_case_[11] = kSideOfStreet;
}
inline void Location::clear_side_of_street() {
  if (_internal_has_side_of_street()) {
    _impl_.has_side_of_street_.side_of_street_ = 0;
    clear_has_has_side_of_street();
  }
}
inline ::valhalla::Location_SideOfStreet Location::_internal_side_of_street() const {
  if (_internal_has_side_of_street()) {
    return static_cast< ::valhalla::Location_SideOfStreet >(_impl_.has_side_of_street_.side_of_street_);
  }
  return static_cast< ::valhalla::Location_SideOfStreet >(0);
}
inline ::valhalla::Location_SideOfStreet Location::side_of_street() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.side_of_street)
  return _internal_side_of_street();
}
inline void Location::_internal_set_side_of_street(::valhalla::Location_SideOfStreet value) {
  if (!_internal_has_side_of_street()) {
    clear_has_side_of_street();
    set_has_side_of_street();
  }
  _impl_.has_side_of_street_.side_of_street_ = value;
}
inline void Location::set_side_of_street(::valhalla::Location_SideOfStreet value) {
  _internal_set_side_of_street(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.side_of_street)
}

// uint32 heading_tolerance = 14;
inline bool Location::_internal_has_heading_tolerance() const {
  return has_heading_tolerance_case() == kHeadingTolerance;
}
inline bool Location::has_heading_tolerance() const {
  return _internal_has_heading_tolerance();
}
inline void Location::set_has_heading_tolerance() {
  _impl_._oneof_case_[12] = kHeadingTolerance;
}
inline void Location::clear_heading_tolerance() {
  if (_internal_has_heading_tolerance()) {
    _impl_.has_heading_tolerance_.heading_tolerance_ = 0u;
    clear_has_has_heading_tolerance();
  }
}
inline uint32_t Location::_internal_heading_tolerance() const {
  if (_internal_has_heading_tolerance()) {
    return _impl_.has_heading_tolerance_.heading_tolerance_;
  }
  return 0u;
}
inline void Location::_internal_set_heading_tolerance(uint32_t value) {
  if (!_internal_has_heading_tolerance()) {
    clear_has_heading_tolerance();
    set_has_heading_tolerance();
  }
  _impl_.has_heading_tolerance_.heading_tolerance_ = value;
}
inline uint32_t Location::heading_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.heading_tolerance)
  return _internal_heading_tolerance();
}
inline void Location::set_heading_tolerance(uint32_t value) {
  _internal_set_heading_tolerance(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.heading_tolerance)
}

// uint32 node_snap_tolerance = 15;
inline bool Location::_internal_has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() == kNodeSnapTolerance;
}
inline bool Location::has_node_snap_tolerance() const {
  return _internal_has_node_snap_tolerance();
}
inline void Location::set_has_node_snap_tolerance() {
  _impl_._oneof_case_[13] = kNodeSnapTolerance;
}
inline void Location::clear_node_snap_tolerance() {
  if (_internal_has_node_snap_tolerance()) {
    _impl_.has_node_snap_tolerance_.node_snap_tolerance_ = 0u;
    clear_has_has_node_snap_tolerance();
  }
}
inline uint32_t Location::_internal_node_snap_tolerance() const {
  if (_internal_has_node_snap_tolerance()) {
    return _impl_.has_node_snap_tolerance_.node_snap_tolerance_;
  }
  return 0u;
}
inline void Location::_internal_set_node_snap_tolerance(uint32_t value) {
  if (!_internal_has_node_snap_tolerance()) {
    clear_has_node_snap_tolerance();
    set_has_node_snap_tolerance();
  }
  _impl_.has_node_snap_tolerance_.node_snap_tolerance_ = value;
}
inline uint32_t Location::node_snap_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.node_snap_tolerance)
  return _internal_node_snap_tolerance();
}
inline void Location::set_node_snap_tolerance(uint32_t value) {
  _internal_set_node_snap_tolerance(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.node_snap_tolerance)
}

// uint64 way_id = 16;
inline bool Location::_internal_has_way_id() const {
  return has_way_id_case() == kWayId;
}
inline bool Location::has_way_id() const {
  return _internal_has_way_id();
}
inline void Location::set_has_way_id() {
  _impl_._oneof_case_[14] = kWayId;
}
inline void Location::clear_way_id() {
  if (_internal_has_way_id()) {
    _impl_.has_way_id_.way_id_ = uint64_t{0u};
    clear_has_has_way_id();
  }
}
inline uint64_t Location::_internal_way_id() const {
  if (_internal_has_way_id()) {
    return _impl_.has_way_id_.way_id_;
  }
  return uint64_t{0u};
}
inline void Location::_internal_set_way_id(uint64_t value) {
  if (!_internal_has_way_id()) {
    clear_has_way_id();
    set_has_way_id();
  }
  _impl_.has_way_id_.way_id_ = value;
}
inline uint64_t Location::way_id() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.way_id)
  return _internal_way_id();
}
inline void Location::set_way_id(uint64_t value) {
  _internal_set_way_id(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.way_id)
}

// uint32 minimum_reachability = 17;
inline bool Location::_internal_has_minimum_reachability() const {
  return has_minimum_reachability_case() == kMinimumReachability;
}
inline bool Location::has_minimum_reachability() const {
  return _internal_has_minimum_reachability();
}
inline void Location::set_has_minimum_reachability() {
  _impl_._oneof_case_[15] = kMinimumReachability;
}
inline void Location::clear_minimum_reachability() {
  if (_internal_has_minimum_reachability()) {
    _impl_.has_minimum_reachability_.minimum_reachability_ = 0u;
    clear_has_has_minimum_reachability();
  }
}
inline uint32_t Location::_internal_minimum_reachability() const {
  if (_internal_has_minimum_reachability()) {
    return _impl_.has_minimum_reachability_.minimum_reachability_;
  }
  return 0u;
}
inline void Location::_internal_set_minimum_reachability(uint32_t value) {
  if (!_internal_has_minimum_reachability()) {
    clear_has_minimum_reachability();
    set_has_minimum_reachability();
  }
  _impl_.has_minimum_reachability_.minimum_reachability_ = value;
}
inline uint32_t Location::minimum_reachability() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.minimum_reachability)
  return _internal_minimum_reachability();
}
inline void Location::set_minimum_reachability(uint32_t value) {
  _internal_set_minimum_reachability(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.minimum_reachability)
}

// uint32 radius = 18;
inline bool Location::_internal_has_radius() const {
  return has_radius_case() == kRadius;
}
inline bool Location::has_radius() const {
  return _internal_has_radius();
}
inline void Location::set_has_radius() {
  _impl_._oneof_case_[16] = kRadius;
}
inline void Location::clear_radius() {
  if (_internal_has_radius()) {
    _impl_.has_radius_.radius_ = 0u;
    clear_has_has_radius();
  }
}
inline uint32_t Location::_internal_radius() const {
  if (_internal_has_radius()) {
    return _impl_.has_radius_.radius_;
  }
  return 0u;
}
inline void Location::_internal_set_radius(uint32_t value) {
  if (!_internal_has_radius()) {
    clear_has_radius();
    set_has_radius();
  }
  _impl_.has_radius_.radius_ = value;
}
inline uint32_t Location::radius() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.radius)
  return _internal_radius();
}
inline void Location::set_radius(uint32_t value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.radius)
}

// uint32 accuracy = 19;
inline bool Location::_internal_has_accuracy() const {
  return has_accuracy_case() == kAccuracy;
}
inline bool Location::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void Location::set_has_accuracy() {
  _impl_._oneof_case_[17] = kAccuracy;
}
inline void Location::clear_accuracy() {
  if (_internal_has_accuracy()) {
    _impl_.has_accuracy_.accuracy_ = 0u;
    clear_has_has_accuracy();
  }
}
inline uint32_t Location::_internal_accuracy() const {
  if (_internal_has_accuracy()) {
    return _impl_.has_accuracy_.accuracy_;
  }
  return 0u;
}
inline void Location::_internal_set_accuracy(uint32_t value) {
  if (!_internal_has_accuracy()) {
    clear_has_accuracy();
    set_has_accuracy();
  }
  _impl_.has_accuracy_.accuracy_ = value;
}
inline uint32_t Location::accuracy() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.accuracy)
  return _internal_accuracy();
}
inline void Location::set_accuracy(uint32_t value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.accuracy)
}

// double time = 20;
inline bool Location::_internal_has_time() const {
  return has_time_case() == kTime;
}
inline bool Location::has_time() const {
  return _internal_has_time();
}
inline void Location::set_has_time() {
  _impl_._oneof_case_[18] = kTime;
}
inline void Location::clear_time() {
  if (_internal_has_time()) {
    _impl_.has_time_.time_ = 0;
    clear_has_has_time();
  }
}
inline double Location::_internal_time() const {
  if (_internal_has_time()) {
    return _impl_.has_time_.time_;
  }
  return 0;
}
inline void Location::_internal_set_time(double value) {
  if (!_internal_has_time()) {
    clear_has_time();
    set_has_time();
  }
  _impl_.has_time_.time_ = value;
}
inline double Location::time() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.time)
  return _internal_time();
}
inline void Location::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.time)
}

// bool skip_ranking_candidates = 21;
inline bool Location::_internal_has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() == kSkipRankingCandidates;
}
inline bool Location::has_skip_ranking_candidates() const {
  return _internal_has_skip_ranking_candidates();
}
inline void Location::set_has_skip_ranking_candidates() {
  _impl_._oneof_case_[19] = kSkipRankingCandidates;
}
inline void Location::clear_skip_ranking_candidates() {
  if (_internal_has_skip_ranking_candidates()) {
    _impl_.has_skip_ranking_candidates_.skip_ranking_candidates_ = false;
    clear_has_has_skip_ranking_candidates();
  }
}
inline bool Location::_internal_skip_ranking_candidates() const {
  if (_internal_has_skip_ranking_candidates()) {
    return _impl_.has_skip_ranking_candidates_.skip_ranking_candidates_;
  }
  return false;
}
inline void Location::_internal_set_skip_ranking_candidates(bool value) {
  if (!_internal_has_skip_ranking_candidates()) {
    clear_has_skip_ranking_candidates();
    set_has_skip_ranking_candidates();
  }
  _impl_.has_skip_ranking_candidates_.skip_ranking_candidates_ = value;
}
inline bool Location::skip_ranking_candidates() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.skip_ranking_candidates)
  return _internal_skip_ranking_candidates();
}
inline void Location::set_skip_ranking_candidates(bool value) {
  _internal_set_skip_ranking_candidates(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.skip_ranking_candidates)
}

// repeated .valhalla.Location.PathEdge path_edges = 22;
inline int Location::_internal_path_edges_size() const {
  return _impl_.path_edges_.size();
}
inline int Location::path_edges_size() const {
  return _internal_path_edges_size();
}
inline void Location::clear_path_edges() {
  _impl_.path_edges_.Clear();
}
inline ::valhalla::Location_PathEdge* Location::mutable_path_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.path_edges)
  return _impl_.path_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_path_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.path_edges)
  return &_impl_.path_edges_;
}
inline const ::valhalla::Location_PathEdge& Location::_internal_path_edges(int index) const {
  return _impl_.path_edges_.Get(index);
}
inline const ::valhalla::Location_PathEdge& Location::path_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.path_edges)
  return _internal_path_edges(index);
}
inline ::valhalla::Location_PathEdge* Location::_internal_add_path_edges() {
  return _impl_.path_edges_.Add();
}
inline ::valhalla::Location_PathEdge* Location::add_path_edges() {
  ::valhalla::Location_PathEdge* _add = _internal_add_path_edges();
  // @@protoc_insertion_point(field_add:valhalla.Location.path_edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::path_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.path_edges)
  return _impl_.path_edges_;
}

// repeated .valhalla.Location.PathEdge filtered_edges = 23;
inline int Location::_internal_filtered_edges_size() const {
  return _impl_.filtered_edges_.size();
}
inline int Location::filtered_edges_size() const {
  return _internal_filtered_edges_size();
}
inline void Location::clear_filtered_edges() {
  _impl_.filtered_edges_.Clear();
}
inline ::valhalla::Location_PathEdge* Location::mutable_filtered_edges(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Location.filtered_edges)
  return _impl_.filtered_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >*
Location::mutable_filtered_edges() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Location.filtered_edges)
  return &_impl_.filtered_edges_;
}
inline const ::valhalla::Location_PathEdge& Location::_internal_filtered_edges(int index) const {
  return _impl_.filtered_edges_.Get(index);
}
inline const ::valhalla::Location_PathEdge& Location::filtered_edges(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Location.filtered_edges)
  return _internal_filtered_edges(index);
}
inline ::valhalla::Location_PathEdge* Location::_internal_add_filtered_edges() {
  return _impl_.filtered_edges_.Add();
}
inline ::valhalla::Location_PathEdge* Location::add_filtered_edges() {
  ::valhalla::Location_PathEdge* _add = _internal_add_filtered_edges();
  // @@protoc_insertion_point(field_add:valhalla.Location.filtered_edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Location_PathEdge >&
Location::filtered_edges() const {
  // @@protoc_insertion_point(field_list:valhalla.Location.filtered_edges)
  return _impl_.filtered_edges_;
}

// uint32 original_index = 24;
inline bool Location::_internal_has_original_index() const {
  return has_original_index_case() == kOriginalIndex;
}
inline bool Location::has_original_index() const {
  return _internal_has_original_index();
}
inline void Location::set_has_original_index() {
  _impl_._oneof_case_[20] = kOriginalIndex;
}
inline void Location::clear_original_index() {
  if (_internal_has_original_index()) {
    _impl_.has_original_index_.original_index_ = 0u;
    clear_has_has_original_index();
  }
}
inline uint32_t Location::_internal_original_index() const {
  if (_internal_has_original_index()) {
    return _impl_.has_original_index_.original_index_;
  }
  return 0u;
}
inline void Location::_internal_set_original_index(uint32_t value) {
  if (!_internal_has_original_index()) {
    clear_has_original_index();
    set_has_original_index();
  }
  _impl_.has_original_index_.original_index_ = value;
}
inline uint32_t Location::original_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.original_index)
  return _internal_original_index();
}
inline void Location::set_original_index(uint32_t value) {
  _internal_set_original_index(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.original_index)
}

// .valhalla.LatLng projected_ll = 25;
inline bool Location::_internal_has_projected_ll() const {
  return this != internal_default_instance() && _impl_.projected_ll_ != nullptr;
}
inline bool Location::has_projected_ll() const {
  return _internal_has_projected_ll();
}
inline void Location::clear_projected_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.projected_ll_ != nullptr) {
    delete _impl_.projected_ll_;
  }
  _impl_.projected_ll_ = nullptr;
}
inline const ::valhalla::LatLng& Location::_internal_projected_ll() const {
  const ::valhalla::LatLng* p = _impl_.projected_ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& Location::projected_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.projected_ll)
  return _internal_projected_ll();
}
inline void Location::unsafe_arena_set_allocated_projected_ll(
    ::valhalla::LatLng* projected_ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projected_ll_);
  }
  _impl_.projected_ll_ = projected_ll;
  if (projected_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Location.projected_ll)
}
inline ::valhalla::LatLng* Location::release_projected_ll() {
  
  ::valhalla::LatLng* temp = _impl_.projected_ll_;
  _impl_.projected_ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* Location::unsafe_arena_release_projected_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.projected_ll)
  
  ::valhalla::LatLng* temp = _impl_.projected_ll_;
  _impl_.projected_ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* Location::_internal_mutable_projected_ll() {
  
  if (_impl_.projected_ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.projected_ll_ = p;
  }
  return _impl_.projected_ll_;
}
inline ::valhalla::LatLng* Location::mutable_projected_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_projected_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.projected_ll)
  return _msg;
}
inline void Location::set_allocated_projected_ll(::valhalla::LatLng* projected_ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projected_ll_;
  }
  if (projected_ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projected_ll);
    if (message_arena != submessage_arena) {
      projected_ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projected_ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projected_ll_ = projected_ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.projected_ll)
}

// uint32 leg_shape_index = 35;
inline bool Location::_internal_has_leg_shape_index() const {
  return has_leg_shape_index_case() == kLegShapeIndex;
}
inline bool Location::has_leg_shape_index() const {
  return _internal_has_leg_shape_index();
}
inline void Location::set_has_leg_shape_index() {
  _impl_._oneof_case_[21] = kLegShapeIndex;
}
inline void Location::clear_leg_shape_index() {
  if (_internal_has_leg_shape_index()) {
    _impl_.has_leg_shape_index_.leg_shape_index_ = 0u;
    clear_has_has_leg_shape_index();
  }
}
inline uint32_t Location::_internal_leg_shape_index() const {
  if (_internal_has_leg_shape_index()) {
    return _impl_.has_leg_shape_index_.leg_shape_index_;
  }
  return 0u;
}
inline void Location::_internal_set_leg_shape_index(uint32_t value) {
  if (!_internal_has_leg_shape_index()) {
    clear_has_leg_shape_index();
    set_has_leg_shape_index();
  }
  _impl_.has_leg_shape_index_.leg_shape_index_ = value;
}
inline uint32_t Location::leg_shape_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.leg_shape_index)
  return _internal_leg_shape_index();
}
inline void Location::set_leg_shape_index(uint32_t value) {
  _internal_set_leg_shape_index(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.leg_shape_index)
}

// double distance_from_leg_origin = 36;
inline bool Location::_internal_has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() == kDistanceFromLegOrigin;
}
inline bool Location::has_distance_from_leg_origin() const {
  return _internal_has_distance_from_leg_origin();
}
inline void Location::set_has_distance_from_leg_origin() {
  _impl_._oneof_case_[22] = kDistanceFromLegOrigin;
}
inline void Location::clear_distance_from_leg_origin() {
  if (_internal_has_distance_from_leg_origin()) {
    _impl_.has_distance_from_leg_origin_.distance_from_leg_origin_ = 0;
    clear_has_has_distance_from_leg_origin();
  }
}
inline double Location::_internal_distance_from_leg_origin() const {
  if (_internal_has_distance_from_leg_origin()) {
    return _impl_.has_distance_from_leg_origin_.distance_from_leg_origin_;
  }
  return 0;
}
inline void Location::_internal_set_distance_from_leg_origin(double value) {
  if (!_internal_has_distance_from_leg_origin()) {
    clear_has_distance_from_leg_origin();
    set_has_distance_from_leg_origin();
  }
  _impl_.has_distance_from_leg_origin_.distance_from_leg_origin_ = value;
}
inline double Location::distance_from_leg_origin() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.distance_from_leg_origin)
  return _internal_distance_from_leg_origin();
}
inline void Location::set_distance_from_leg_origin(double value) {
  _internal_set_distance_from_leg_origin(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.distance_from_leg_origin)
}

// .valhalla.Location.PreferredSide preferred_side = 26;
inline bool Location::_internal_has_preferred_side() const {
  return has_preferred_side_case() == kPreferredSide;
}
inline bool Location::has_preferred_side() const {
  return _internal_has_preferred_side();
}
inline void Location::set_has_preferred_side() {
  _impl_._oneof_case_[23] = kPreferredSide;
}
inline void Location::clear_preferred_side() {
  if (_internal_has_preferred_side()) {
    _impl_.has_preferred_side_.preferred_side_ = 0;
    clear_has_has_preferred_side();
  }
}
inline ::valhalla::Location_PreferredSide Location::_internal_preferred_side() const {
  if (_internal_has_preferred_side()) {
    return static_cast< ::valhalla::Location_PreferredSide >(_impl_.has_preferred_side_.preferred_side_);
  }
  return static_cast< ::valhalla::Location_PreferredSide >(0);
}
inline ::valhalla::Location_PreferredSide Location::preferred_side() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_side)
  return _internal_preferred_side();
}
inline void Location::_internal_set_preferred_side(::valhalla::Location_PreferredSide value) {
  if (!_internal_has_preferred_side()) {
    clear_has_preferred_side();
    set_has_preferred_side();
  }
  _impl_.has_preferred_side_.preferred_side_ = value;
}
inline void Location::set_preferred_side(::valhalla::Location_PreferredSide value) {
  _internal_set_preferred_side(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_side)
}

// .valhalla.LatLng display_ll = 27;
inline bool Location::_internal_has_display_ll() const {
  return this != internal_default_instance() && _impl_.display_ll_ != nullptr;
}
inline bool Location::has_display_ll() const {
  return _internal_has_display_ll();
}
inline void Location::clear_display_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.display_ll_ != nullptr) {
    delete _impl_.display_ll_;
  }
  _impl_.display_ll_ = nullptr;
}
inline const ::valhalla::LatLng& Location::_internal_display_ll() const {
  const ::valhalla::LatLng* p = _impl_.display_ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& Location::display_ll() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.display_ll)
  return _internal_display_ll();
}
inline void Location::unsafe_arena_set_allocated_display_ll(
    ::valhalla::LatLng* display_ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.display_ll_);
  }
  _impl_.display_ll_ = display_ll;
  if (display_ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Location.display_ll)
}
inline ::valhalla::LatLng* Location::release_display_ll() {
  
  ::valhalla::LatLng* temp = _impl_.display_ll_;
  _impl_.display_ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* Location::unsafe_arena_release_display_ll() {
  // @@protoc_insertion_point(field_release:valhalla.Location.display_ll)
  
  ::valhalla::LatLng* temp = _impl_.display_ll_;
  _impl_.display_ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* Location::_internal_mutable_display_ll() {
  
  if (_impl_.display_ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.display_ll_ = p;
  }
  return _impl_.display_ll_;
}
inline ::valhalla::LatLng* Location::mutable_display_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_display_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.display_ll)
  return _msg;
}
inline void Location::set_allocated_display_ll(::valhalla::LatLng* display_ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.display_ll_;
  }
  if (display_ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(display_ll);
    if (message_arena != submessage_arena) {
      display_ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.display_ll_ = display_ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.display_ll)
}

// uint32 search_cutoff = 28;
inline bool Location::_internal_has_search_cutoff() const {
  return has_search_cutoff_case() == kSearchCutoff;
}
inline bool Location::has_search_cutoff() const {
  return _internal_has_search_cutoff();
}
inline void Location::set_has_search_cutoff() {
  _impl_._oneof_case_[24] = kSearchCutoff;
}
inline void Location::clear_search_cutoff() {
  if (_internal_has_search_cutoff()) {
    _impl_.has_search_cutoff_.search_cutoff_ = 0u;
    clear_has_has_search_cutoff();
  }
}
inline uint32_t Location::_internal_search_cutoff() const {
  if (_internal_has_search_cutoff()) {
    return _impl_.has_search_cutoff_.search_cutoff_;
  }
  return 0u;
}
inline void Location::_internal_set_search_cutoff(uint32_t value) {
  if (!_internal_has_search_cutoff()) {
    clear_has_search_cutoff();
    set_has_search_cutoff();
  }
  _impl_.has_search_cutoff_.search_cutoff_ = value;
}
inline uint32_t Location::search_cutoff() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_cutoff)
  return _internal_search_cutoff();
}
inline void Location::set_search_cutoff(uint32_t value) {
  _internal_set_search_cutoff(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.search_cutoff)
}

// uint32 street_side_tolerance = 29;
inline bool Location::_internal_has_street_side_tolerance() const {
  return has_street_side_tolerance_case() == kStreetSideTolerance;
}
inline bool Location::has_street_side_tolerance() const {
  return _internal_has_street_side_tolerance();
}
inline void Location::set_has_street_side_tolerance() {
  _impl_._oneof_case_[25] = kStreetSideTolerance;
}
inline void Location::clear_street_side_tolerance() {
  if (_internal_has_street_side_tolerance()) {
    _impl_.has_street_side_tolerance_.street_side_tolerance_ = 0u;
    clear_has_has_street_side_tolerance();
  }
}
inline uint32_t Location::_internal_street_side_tolerance() const {
  if (_internal_has_street_side_tolerance()) {
    return _impl_.has_street_side_tolerance_.street_side_tolerance_;
  }
  return 0u;
}
inline void Location::_internal_set_street_side_tolerance(uint32_t value) {
  if (!_internal_has_street_side_tolerance()) {
    clear_has_street_side_tolerance();
    set_has_street_side_tolerance();
  }
  _impl_.has_street_side_tolerance_.street_side_tolerance_ = value;
}
inline uint32_t Location::street_side_tolerance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_tolerance)
  return _internal_street_side_tolerance();
}
inline void Location::set_street_side_tolerance(uint32_t value) {
  _internal_set_street_side_tolerance(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_tolerance)
}

// uint32 route_index = 30;
inline bool Location::_internal_has_route_index() const {
  return has_route_index_case() == kRouteIndex;
}
inline bool Location::has_route_index() const {
  return _internal_has_route_index();
}
inline void Location::set_has_route_index() {
  _impl_._oneof_case_[26] = kRouteIndex;
}
inline void Location::clear_route_index() {
  if (_internal_has_route_index()) {
    _impl_.has_route_index_.route_index_ = 0u;
    clear_has_has_route_index();
  }
}
inline uint32_t Location::_internal_route_index() const {
  if (_internal_has_route_index()) {
    return _impl_.has_route_index_.route_index_;
  }
  return 0u;
}
inline void Location::_internal_set_route_index(uint32_t value) {
  if (!_internal_has_route_index()) {
    clear_has_route_index();
    set_has_route_index();
  }
  _impl_.has_route_index_.route_index_ = value;
}
inline uint32_t Location::route_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.route_index)
  return _internal_route_index();
}
inline void Location::set_route_index(uint32_t value) {
  _internal_set_route_index(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.route_index)
}

// uint32 waypoint_index = 31;
inline bool Location::_internal_has_waypoint_index() const {
  return has_waypoint_index_case() == kWaypointIndex;
}
inline bool Location::has_waypoint_index() const {
  return _internal_has_waypoint_index();
}
inline void Location::set_has_waypoint_index() {
  _impl_._oneof_case_[27] = kWaypointIndex;
}
inline void Location::clear_waypoint_index() {
  if (_internal_has_waypoint_index()) {
    _impl_.has_waypoint_index_.waypoint_index_ = 0u;
    clear_has_has_waypoint_index();
  }
}
inline uint32_t Location::_internal_waypoint_index() const {
  if (_internal_has_waypoint_index()) {
    return _impl_.has_waypoint_index_.waypoint_index_;
  }
  return 0u;
}
inline void Location::_internal_set_waypoint_index(uint32_t value) {
  if (!_internal_has_waypoint_index()) {
    clear_has_waypoint_index();
    set_has_waypoint_index();
  }
  _impl_.has_waypoint_index_.waypoint_index_ = value;
}
inline uint32_t Location::waypoint_index() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.waypoint_index)
  return _internal_waypoint_index();
}
inline void Location::set_waypoint_index(uint32_t value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.waypoint_index)
}

// .valhalla.Location.SearchFilter search_filter = 32;
inline bool Location::_internal_has_search_filter() const {
  return this != internal_default_instance() && _impl_.search_filter_ != nullptr;
}
inline bool Location::has_search_filter() const {
  return _internal_has_search_filter();
}
inline void Location::clear_search_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_filter_ != nullptr) {
    delete _impl_.search_filter_;
  }
  _impl_.search_filter_ = nullptr;
}
inline const ::valhalla::Location_SearchFilter& Location::_internal_search_filter() const {
  const ::valhalla::Location_SearchFilter* p = _impl_.search_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Location_SearchFilter&>(
      ::valhalla::_Location_SearchFilter_default_instance_);
}
inline const ::valhalla::Location_SearchFilter& Location::search_filter() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.search_filter)
  return _internal_search_filter();
}
inline void Location::unsafe_arena_set_allocated_search_filter(
    ::valhalla::Location_SearchFilter* search_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.search_filter_);
  }
  _impl_.search_filter_ = search_filter;
  if (search_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.Location.search_filter)
}
inline ::valhalla::Location_SearchFilter* Location::release_search_filter() {
  
  ::valhalla::Location_SearchFilter* temp = _impl_.search_filter_;
  _impl_.search_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::Location_SearchFilter* Location::unsafe_arena_release_search_filter() {
  // @@protoc_insertion_point(field_release:valhalla.Location.search_filter)
  
  ::valhalla::Location_SearchFilter* temp = _impl_.search_filter_;
  _impl_.search_filter_ = nullptr;
  return temp;
}
inline ::valhalla::Location_SearchFilter* Location::_internal_mutable_search_filter() {
  
  if (_impl_.search_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Location_SearchFilter>(GetArenaForAllocation());
    _impl_.search_filter_ = p;
  }
  return _impl_.search_filter_;
}
inline ::valhalla::Location_SearchFilter* Location::mutable_search_filter() {
  ::valhalla::Location_SearchFilter* _msg = _internal_mutable_search_filter();
  // @@protoc_insertion_point(field_mutable:valhalla.Location.search_filter)
  return _msg;
}
inline void Location::set_allocated_search_filter(::valhalla::Location_SearchFilter* search_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.search_filter_;
  }
  if (search_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(search_filter);
    if (message_arena != submessage_arena) {
      search_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_filter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.search_filter_ = search_filter;
  // @@protoc_insertion_point(field_set_allocated:valhalla.Location.search_filter)
}

// uint32 street_side_max_distance = 33;
inline bool Location::_internal_has_street_side_max_distance() const {
  return has_street_side_max_distance_case() == kStreetSideMaxDistance;
}
inline bool Location::has_street_side_max_distance() const {
  return _internal_has_street_side_max_distance();
}
inline void Location::set_has_street_side_max_distance() {
  _impl_._oneof_case_[28] = kStreetSideMaxDistance;
}
inline void Location::clear_street_side_max_distance() {
  if (_internal_has_street_side_max_distance()) {
    _impl_.has_street_side_max_distance_.street_side_max_distance_ = 0u;
    clear_has_has_street_side_max_distance();
  }
}
inline uint32_t Location::_internal_street_side_max_distance() const {
  if (_internal_has_street_side_max_distance()) {
    return _impl_.has_street_side_max_distance_.street_side_max_distance_;
  }
  return 0u;
}
inline void Location::_internal_set_street_side_max_distance(uint32_t value) {
  if (!_internal_has_street_side_max_distance()) {
    clear_has_street_side_max_distance();
    set_has_street_side_max_distance();
  }
  _impl_.has_street_side_max_distance_.street_side_max_distance_ = value;
}
inline uint32_t Location::street_side_max_distance() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.street_side_max_distance)
  return _internal_street_side_max_distance();
}
inline void Location::set_street_side_max_distance(uint32_t value) {
  _internal_set_street_side_max_distance(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.street_side_max_distance)
}

// int32 preferred_layer = 34;
inline bool Location::_internal_has_preferred_layer() const {
  return has_preferred_layer_case() == kPreferredLayer;
}
inline bool Location::has_preferred_layer() const {
  return _internal_has_preferred_layer();
}
inline void Location::set_has_preferred_layer() {
  _impl_._oneof_case_[29] = kPreferredLayer;
}
inline void Location::clear_preferred_layer() {
  if (_internal_has_preferred_layer()) {
    _impl_.has_preferred_layer_.preferred_layer_ = 0;
    clear_has_has_preferred_layer();
  }
}
inline int32_t Location::_internal_preferred_layer() const {
  if (_internal_has_preferred_layer()) {
    return _impl_.has_preferred_layer_.preferred_layer_;
  }
  return 0;
}
inline void Location::_internal_set_preferred_layer(int32_t value) {
  if (!_internal_has_preferred_layer()) {
    clear_has_preferred_layer();
    set_has_preferred_layer();
  }
  _impl_.has_preferred_layer_.preferred_layer_ = value;
}
inline int32_t Location::preferred_layer() const {
  // @@protoc_insertion_point(field_get:valhalla.Location.preferred_layer)
  return _internal_preferred_layer();
}
inline void Location::set_preferred_layer(int32_t value) {
  _internal_set_preferred_layer(value);
  // @@protoc_insertion_point(field_set:valhalla.Location.preferred_layer)
}

inline bool Location::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void Location::clear_has_has_type() {
  _impl_._oneof_case_[0] = HAS_TYPE_NOT_SET;
}
inline bool Location::has_has_heading() const {
  return has_heading_case() != HAS_HEADING_NOT_SET;
}
inline void Location::clear_has_has_heading() {
  _impl_._oneof_case_[1] = HAS_HEADING_NOT_SET;
}
inline bool Location::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void Location::clear_has_has_name() {
  _impl_._oneof_case_[2] = HAS_NAME_NOT_SET;
}
inline bool Location::has_has_street() const {
  return has_street_case() != HAS_STREET_NOT_SET;
}
inline void Location::clear_has_has_street() {
  _impl_._oneof_case_[3] = HAS_STREET_NOT_SET;
}
inline bool Location::has_has_city() const {
  return has_city_case() != HAS_CITY_NOT_SET;
}
inline void Location::clear_has_has_city() {
  _impl_._oneof_case_[4] = HAS_CITY_NOT_SET;
}
inline bool Location::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
inline void Location::clear_has_has_state() {
  _impl_._oneof_case_[5] = HAS_STATE_NOT_SET;
}
inline bool Location::has_has_postal_code() const {
  return has_postal_code_case() != HAS_POSTAL_CODE_NOT_SET;
}
inline void Location::clear_has_has_postal_code() {
  _impl_._oneof_case_[6] = HAS_POSTAL_CODE_NOT_SET;
}
inline bool Location::has_has_country() const {
  return has_country_case() != HAS_COUNTRY_NOT_SET;
}
inline void Location::clear_has_has_country() {
  _impl_._oneof_case_[7] = HAS_COUNTRY_NOT_SET;
}
inline bool Location::has_has_phone() const {
  return has_phone_case() != HAS_PHONE_NOT_SET;
}
inline void Location::clear_has_has_phone() {
  _impl_._oneof_case_[8] = HAS_PHONE_NOT_SET;
}
inline bool Location::has_has_url() const {
  return has_url_case() != HAS_URL_NOT_SET;
}
inline void Location::clear_has_has_url() {
  _impl_._oneof_case_[9] = HAS_URL_NOT_SET;
}
inline bool Location::has_has_date_time() const {
  return has_date_time_case() != HAS_DATE_TIME_NOT_SET;
}
inline void Location::clear_has_has_date_time() {
  _impl_._oneof_case_[10] = HAS_DATE_TIME_NOT_SET;
}
inline bool Location::has_has_side_of_street() const {
  return has_side_of_street_case() != HAS_SIDE_OF_STREET_NOT_SET;
}
inline void Location::clear_has_has_side_of_street() {
  _impl_._oneof_case_[11] = HAS_SIDE_OF_STREET_NOT_SET;
}
inline bool Location::has_has_heading_tolerance() const {
  return has_heading_tolerance_case() != HAS_HEADING_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_heading_tolerance() {
  _impl_._oneof_case_[12] = HAS_HEADING_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_node_snap_tolerance() const {
  return has_node_snap_tolerance_case() != HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_node_snap_tolerance() {
  _impl_._oneof_case_[13] = HAS_NODE_SNAP_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_way_id() const {
  return has_way_id_case() != HAS_WAY_ID_NOT_SET;
}
inline void Location::clear_has_has_way_id() {
  _impl_._oneof_case_[14] = HAS_WAY_ID_NOT_SET;
}
inline bool Location::has_has_minimum_reachability() const {
  return has_minimum_reachability_case() != HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline void Location::clear_has_has_minimum_reachability() {
  _impl_._oneof_case_[15] = HAS_MINIMUM_REACHABILITY_NOT_SET;
}
inline bool Location::has_has_radius() const {
  return has_radius_case() != HAS_RADIUS_NOT_SET;
}
inline void Location::clear_has_has_radius() {
  _impl_._oneof_case_[16] = HAS_RADIUS_NOT_SET;
}
inline bool Location::has_has_accuracy() const {
  return has_accuracy_case() != HAS_ACCURACY_NOT_SET;
}
inline void Location::clear_has_has_accuracy() {
  _impl_._oneof_case_[17] = HAS_ACCURACY_NOT_SET;
}
inline bool Location::has_has_time() const {
  return has_time_case() != HAS_TIME_NOT_SET;
}
inline void Location::clear_has_has_time() {
  _impl_._oneof_case_[18] = HAS_TIME_NOT_SET;
}
inline bool Location::has_has_skip_ranking_candidates() const {
  return has_skip_ranking_candidates_case() != HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
inline void Location::clear_has_has_skip_ranking_candidates() {
  _impl_._oneof_case_[19] = HAS_SKIP_RANKING_CANDIDATES_NOT_SET;
}
inline bool Location::has_has_original_index() const {
  return has_original_index_case() != HAS_ORIGINAL_INDEX_NOT_SET;
}
inline void Location::clear_has_has_original_index() {
  _impl_._oneof_case_[20] = HAS_ORIGINAL_INDEX_NOT_SET;
}
inline bool Location::has_has_leg_shape_index() const {
  return has_leg_shape_index_case() != HAS_LEG_SHAPE_INDEX_NOT_SET;
}
inline void Location::clear_has_has_leg_shape_index() {
  _impl_._oneof_case_[21] = HAS_LEG_SHAPE_INDEX_NOT_SET;
}
inline bool Location::has_has_distance_from_leg_origin() const {
  return has_distance_from_leg_origin_case() != HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
inline void Location::clear_has_has_distance_from_leg_origin() {
  _impl_._oneof_case_[22] = HAS_DISTANCE_FROM_LEG_ORIGIN_NOT_SET;
}
inline bool Location::has_has_preferred_side() const {
  return has_preferred_side_case() != HAS_PREFERRED_SIDE_NOT_SET;
}
inline void Location::clear_has_has_preferred_side() {
  _impl_._oneof_case_[23] = HAS_PREFERRED_SIDE_NOT_SET;
}
inline bool Location::has_has_search_cutoff() const {
  return has_search_cutoff_case() != HAS_SEARCH_CUTOFF_NOT_SET;
}
inline void Location::clear_has_has_search_cutoff() {
  _impl_._oneof_case_[24] = HAS_SEARCH_CUTOFF_NOT_SET;
}
inline bool Location::has_has_street_side_tolerance() const {
  return has_street_side_tolerance_case() != HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
inline void Location::clear_has_has_street_side_tolerance() {
  _impl_._oneof_case_[25] = HAS_STREET_SIDE_TOLERANCE_NOT_SET;
}
inline bool Location::has_has_route_index() const {
  return has_route_index_case() != HAS_ROUTE_INDEX_NOT_SET;
}
inline void Location::clear_has_has_route_index() {
  _impl_._oneof_case_[26] = HAS_ROUTE_INDEX_NOT_SET;
}
inline bool Location::has_has_waypoint_index() const {
  return has_waypoint_index_case() != HAS_WAYPOINT_INDEX_NOT_SET;
}
inline void Location::clear_has_has_waypoint_index() {
  _impl_._oneof_case_[27] = HAS_WAYPOINT_INDEX_NOT_SET;
}
inline bool Location::has_has_street_side_max_distance() const {
  return has_street_side_max_distance_case() != HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
inline void Location::clear_has_has_street_side_max_distance() {
  _impl_._oneof_case_[28] = HAS_STREET_SIDE_MAX_DISTANCE_NOT_SET;
}
inline bool Location::has_has_preferred_layer() const {
  return has_preferred_layer_case() != HAS_PREFERRED_LAYER_NOT_SET;
}
inline void Location::clear_has_has_preferred_layer() {
  _impl_._oneof_case_[29] = HAS_PREFERRED_LAYER_NOT_SET;
}
inline Location::HasTypeCase Location::has_type_case() const {
  return Location::HasTypeCase(_impl_._oneof_case_[0]);
}
inline Location::HasHeadingCase Location::has_heading_case() const {
  return Location::HasHeadingCase(_impl_._oneof_case_[1]);
}
inline Location::HasNameCase Location::has_name_case() const {
  return Location::HasNameCase(_impl_._oneof_case_[2]);
}
inline Location::HasStreetCase Location::has_street_case() const {
  return Location::HasStreetCase(_impl_._oneof_case_[3]);
}
inline Location::HasCityCase Location::has_city_case() const {
  return Location::HasCityCase(_impl_._oneof_case_[4]);
}
inline Location::HasStateCase Location::has_state_case() const {
  return Location::HasStateCase(_impl_._oneof_case_[5]);
}
inline Location::HasPostalCodeCase Location::has_postal_code_case() const {
  return Location::HasPostalCodeCase(_impl_._oneof_case_[6]);
}
inline Location::HasCountryCase Location::has_country_case() const {
  return Location::HasCountryCase(_impl_._oneof_case_[7]);
}
inline Location::HasPhoneCase Location::has_phone_case() const {
  return Location::HasPhoneCase(_impl_._oneof_case_[8]);
}
inline Location::HasUrlCase Location::has_url_case() const {
  return Location::HasUrlCase(_impl_._oneof_case_[9]);
}
inline Location::HasDateTimeCase Location::has_date_time_case() const {
  return Location::HasDateTimeCase(_impl_._oneof_case_[10]);
}
inline Location::HasSideOfStreetCase Location::has_side_of_street_case() const {
  return Location::HasSideOfStreetCase(_impl_._oneof_case_[11]);
}
inline Location::HasHeadingToleranceCase Location::has_heading_tolerance_case() const {
  return Location::HasHeadingToleranceCase(_impl_._oneof_case_[12]);
}
inline Location::HasNodeSnapToleranceCase Location::has_node_snap_tolerance_case() const {
  return Location::HasNodeSnapToleranceCase(_impl_._oneof_case_[13]);
}
inline Location::HasWayIdCase Location::has_way_id_case() const {
  return Location::HasWayIdCase(_impl_._oneof_case_[14]);
}
inline Location::HasMinimumReachabilityCase Location::has_minimum_reachability_case() const {
  return Location::HasMinimumReachabilityCase(_impl_._oneof_case_[15]);
}
inline Location::HasRadiusCase Location::has_radius_case() const {
  return Location::HasRadiusCase(_impl_._oneof_case_[16]);
}
inline Location::HasAccuracyCase Location::has_accuracy_case() const {
  return Location::HasAccuracyCase(_impl_._oneof_case_[17]);
}
inline Location::HasTimeCase Location::has_time_case() const {
  return Location::HasTimeCase(_impl_._oneof_case_[18]);
}
inline Location::HasSkipRankingCandidatesCase Location::has_skip_ranking_candidates_case() const {
  return Location::HasSkipRankingCandidatesCase(_impl_._oneof_case_[19]);
}
inline Location::HasOriginalIndexCase Location::has_original_index_case() const {
  return Location::HasOriginalIndexCase(_impl_._oneof_case_[20]);
}
inline Location::HasLegShapeIndexCase Location::has_leg_shape_index_case() const {
  return Location::HasLegShapeIndexCase(_impl_._oneof_case_[21]);
}
inline Location::HasDistanceFromLegOriginCase Location::has_distance_from_leg_origin_case() const {
  return Location::HasDistanceFromLegOriginCase(_impl_._oneof_case_[22]);
}
inline Location::HasPreferredSideCase Location::has_preferred_side_case() const {
  return Location::HasPreferredSideCase(_impl_._oneof_case_[23]);
}
inline Location::HasSearchCutoffCase Location::has_search_cutoff_case() const {
  return Location::HasSearchCutoffCase(_impl_._oneof_case_[24]);
}
inline Location::HasStreetSideToleranceCase Location::has_street_side_tolerance_case() const {
  return Location::HasStreetSideToleranceCase(_impl_._oneof_case_[25]);
}
inline Location::HasRouteIndexCase Location::has_route_index_case() const {
  return Location::HasRouteIndexCase(_impl_._oneof_case_[26]);
}
inline Location::HasWaypointIndexCase Location::has_waypoint_index_case() const {
  return Location::HasWaypointIndexCase(_impl_._oneof_case_[27]);
}
inline Location::HasStreetSideMaxDistanceCase Location::has_street_side_max_distance_case() const {
  return Location::HasStreetSideMaxDistanceCase(_impl_._oneof_case_[28]);
}
inline Location::HasPreferredLayerCase Location::has_preferred_layer_case() const {
  return Location::HasPreferredLayerCase(_impl_._oneof_case_[29]);
}
// -------------------------------------------------------------------

// TransitEgressInfo

// string onestop_id = 1;
inline bool TransitEgressInfo::_internal_has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline bool TransitEgressInfo::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void TransitEgressInfo::set_has_onestop_id() {
  _impl_._oneof_case_[0] = kOnestopId;
}
inline void TransitEgressInfo::clear_onestop_id() {
  if (_internal_has_onestop_id()) {
    _impl_.has_onestop_id_.onestop_id_.Destroy();
    clear_has_has_onestop_id();
  }
}
inline const std::string& TransitEgressInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitEgressInfo::set_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.onestop_id)
}
inline std::string* TransitEgressInfo::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.onestop_id)
  return _s;
}
inline const std::string& TransitEgressInfo::_internal_onestop_id() const {
  if (_internal_has_onestop_id()) {
    return _impl_.has_onestop_id_.onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitEgressInfo::_internal_set_onestop_id(const std::string& value) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitEgressInfo::_internal_mutable_onestop_id() {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  return _impl_.has_onestop_id_.onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitEgressInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.onestop_id)
  if (_internal_has_onestop_id()) {
    clear_has_has_onestop_id();
    return _impl_.has_onestop_id_.onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitEgressInfo::set_allocated_onestop_id(std::string* onestop_id) {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (onestop_id != nullptr) {
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitAllocated(onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.onestop_id)
}

// string name = 2;
inline bool TransitEgressInfo::_internal_has_name() const {
  return has_name_case() == kName;
}
inline bool TransitEgressInfo::has_name() const {
  return _internal_has_name();
}
inline void TransitEgressInfo::set_has_name() {
  _impl_._oneof_case_[1] = kName;
}
inline void TransitEgressInfo::clear_name() {
  if (_internal_has_name()) {
    _impl_.has_name_.name_.Destroy();
    clear_has_has_name();
  }
}
inline const std::string& TransitEgressInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitEgressInfo::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitEgressInfo.name)
}
inline std::string* TransitEgressInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.name)
  return _s;
}
inline const std::string& TransitEgressInfo::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.has_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitEgressInfo::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitEgressInfo::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  return _impl_.has_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitEgressInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.name)
  if (_internal_has_name()) {
    clear_has_has_name();
    return _impl_.has_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitEgressInfo::set_allocated_name(std::string* name) {
  if (has_has_name()) {
    clear_has_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.has_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.name)
}

// .valhalla.LatLng ll = 3;
inline bool TransitEgressInfo::_internal_has_ll() const {
  return this != internal_default_instance() && _impl_.ll_ != nullptr;
}
inline bool TransitEgressInfo::has_ll() const {
  return _internal_has_ll();
}
inline void TransitEgressInfo::clear_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_ != nullptr) {
    delete _impl_.ll_;
  }
  _impl_.ll_ = nullptr;
}
inline const ::valhalla::LatLng& TransitEgressInfo::_internal_ll() const {
  const ::valhalla::LatLng* p = _impl_.ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& TransitEgressInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitEgressInfo.ll)
  return _internal_ll();
}
inline void TransitEgressInfo::unsafe_arena_set_allocated_ll(
    ::valhalla::LatLng* ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_);
  }
  _impl_.ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TransitEgressInfo.ll)
}
inline ::valhalla::LatLng* TransitEgressInfo::release_ll() {
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* TransitEgressInfo::unsafe_arena_release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitEgressInfo.ll)
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* TransitEgressInfo::_internal_mutable_ll() {
  
  if (_impl_.ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.ll_ = p;
  }
  return _impl_.ll_;
}
inline ::valhalla::LatLng* TransitEgressInfo::mutable_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitEgressInfo.ll)
  return _msg;
}
inline void TransitEgressInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ll_;
  }
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_ = ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitEgressInfo.ll)
}

inline bool TransitEgressInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitEgressInfo::clear_has_has_onestop_id() {
  _impl_._oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitEgressInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitEgressInfo::clear_has_has_name() {
  _impl_._oneof_case_[1] = HAS_NAME_NOT_SET;
}
inline TransitEgressInfo::HasOnestopIdCase TransitEgressInfo::has_onestop_id_case() const {
  return TransitEgressInfo::HasOnestopIdCase(_impl_._oneof_case_[0]);
}
inline TransitEgressInfo::HasNameCase TransitEgressInfo::has_name_case() const {
  return TransitEgressInfo::HasNameCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// TransitStationInfo

// string onestop_id = 1;
inline bool TransitStationInfo::_internal_has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline bool TransitStationInfo::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void TransitStationInfo::set_has_onestop_id() {
  _impl_._oneof_case_[0] = kOnestopId;
}
inline void TransitStationInfo::clear_onestop_id() {
  if (_internal_has_onestop_id()) {
    _impl_.has_onestop_id_.onestop_id_.Destroy();
    clear_has_has_onestop_id();
  }
}
inline const std::string& TransitStationInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitStationInfo::set_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.onestop_id)
}
inline std::string* TransitStationInfo::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.onestop_id)
  return _s;
}
inline const std::string& TransitStationInfo::_internal_onestop_id() const {
  if (_internal_has_onestop_id()) {
    return _impl_.has_onestop_id_.onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitStationInfo::_internal_set_onestop_id(const std::string& value) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitStationInfo::_internal_mutable_onestop_id() {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  return _impl_.has_onestop_id_.onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitStationInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.onestop_id)
  if (_internal_has_onestop_id()) {
    clear_has_has_onestop_id();
    return _impl_.has_onestop_id_.onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitStationInfo::set_allocated_onestop_id(std::string* onestop_id) {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (onestop_id != nullptr) {
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitAllocated(onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.onestop_id)
}

// string name = 2;
inline bool TransitStationInfo::_internal_has_name() const {
  return has_name_case() == kName;
}
inline bool TransitStationInfo::has_name() const {
  return _internal_has_name();
}
inline void TransitStationInfo::set_has_name() {
  _impl_._oneof_case_[1] = kName;
}
inline void TransitStationInfo::clear_name() {
  if (_internal_has_name()) {
    _impl_.has_name_.name_.Destroy();
    clear_has_has_name();
  }
}
inline const std::string& TransitStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitStationInfo::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitStationInfo.name)
}
inline std::string* TransitStationInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.name)
  return _s;
}
inline const std::string& TransitStationInfo::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.has_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitStationInfo::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitStationInfo::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  return _impl_.has_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.name)
  if (_internal_has_name()) {
    clear_has_has_name();
    return _impl_.has_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitStationInfo::set_allocated_name(std::string* name) {
  if (has_has_name()) {
    clear_has_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.has_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.name)
}

// .valhalla.LatLng ll = 3;
inline bool TransitStationInfo::_internal_has_ll() const {
  return this != internal_default_instance() && _impl_.ll_ != nullptr;
}
inline bool TransitStationInfo::has_ll() const {
  return _internal_has_ll();
}
inline void TransitStationInfo::clear_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_ != nullptr) {
    delete _impl_.ll_;
  }
  _impl_.ll_ = nullptr;
}
inline const ::valhalla::LatLng& TransitStationInfo::_internal_ll() const {
  const ::valhalla::LatLng* p = _impl_.ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& TransitStationInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitStationInfo.ll)
  return _internal_ll();
}
inline void TransitStationInfo::unsafe_arena_set_allocated_ll(
    ::valhalla::LatLng* ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_);
  }
  _impl_.ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TransitStationInfo.ll)
}
inline ::valhalla::LatLng* TransitStationInfo::release_ll() {
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* TransitStationInfo::unsafe_arena_release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitStationInfo.ll)
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* TransitStationInfo::_internal_mutable_ll() {
  
  if (_impl_.ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.ll_ = p;
  }
  return _impl_.ll_;
}
inline ::valhalla::LatLng* TransitStationInfo::mutable_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitStationInfo.ll)
  return _msg;
}
inline void TransitStationInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ll_;
  }
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_ = ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitStationInfo.ll)
}

inline bool TransitStationInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitStationInfo::clear_has_has_onestop_id() {
  _impl_._oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitStationInfo::clear_has_has_name() {
  _impl_._oneof_case_[1] = HAS_NAME_NOT_SET;
}
inline TransitStationInfo::HasOnestopIdCase TransitStationInfo::has_onestop_id_case() const {
  return TransitStationInfo::HasOnestopIdCase(_impl_._oneof_case_[0]);
}
inline TransitStationInfo::HasNameCase TransitStationInfo::has_name_case() const {
  return TransitStationInfo::HasNameCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// BikeShareStationInfo

// string name = 1;
inline bool BikeShareStationInfo::_internal_has_name() const {
  return has_name_case() == kName;
}
inline bool BikeShareStationInfo::has_name() const {
  return _internal_has_name();
}
inline void BikeShareStationInfo::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void BikeShareStationInfo::clear_name() {
  if (_internal_has_name()) {
    _impl_.has_name_.name_.Destroy();
    clear_has_has_name();
  }
}
inline const std::string& BikeShareStationInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void BikeShareStationInfo::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.name)
}
inline std::string* BikeShareStationInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.name)
  return _s;
}
inline const std::string& BikeShareStationInfo::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.has_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  return _impl_.has_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.name)
  if (_internal_has_name()) {
    clear_has_has_name();
    return _impl_.has_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void BikeShareStationInfo::set_allocated_name(std::string* name) {
  if (has_has_name()) {
    clear_has_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.has_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.name)
}

// string ref = 2;
inline bool BikeShareStationInfo::_internal_has_ref() const {
  return has_ref_case() == kRef;
}
inline bool BikeShareStationInfo::has_ref() const {
  return _internal_has_ref();
}
inline void BikeShareStationInfo::set_has_ref() {
  _impl_._oneof_case_[1] = kRef;
}
inline void BikeShareStationInfo::clear_ref() {
  if (_internal_has_ref()) {
    _impl_.has_ref_.ref_.Destroy();
    clear_has_has_ref();
  }
}
inline const std::string& BikeShareStationInfo::ref() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.ref)
  return _internal_ref();
}
template <typename ArgT0, typename... ArgT>
inline void BikeShareStationInfo::set_ref(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ref()) {
    clear_has_ref();
    set_has_ref();
    _impl_.has_ref_.ref_.InitDefault();
  }
  _impl_.has_ref_.ref_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.ref)
}
inline std::string* BikeShareStationInfo::mutable_ref() {
  std::string* _s = _internal_mutable_ref();
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.ref)
  return _s;
}
inline const std::string& BikeShareStationInfo::_internal_ref() const {
  if (_internal_has_ref()) {
    return _impl_.has_ref_.ref_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::_internal_set_ref(const std::string& value) {
  if (!_internal_has_ref()) {
    clear_has_ref();
    set_has_ref();
    _impl_.has_ref_.ref_.InitDefault();
  }
  _impl_.has_ref_.ref_.Set(value, GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::_internal_mutable_ref() {
  if (!_internal_has_ref()) {
    clear_has_ref();
    set_has_ref();
    _impl_.has_ref_.ref_.InitDefault();
  }
  return _impl_.has_ref_.ref_.Mutable(      GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::release_ref() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.ref)
  if (_internal_has_ref()) {
    clear_has_has_ref();
    return _impl_.has_ref_.ref_.Release();
  } else {
    return nullptr;
  }
}
inline void BikeShareStationInfo::set_allocated_ref(std::string* ref) {
  if (has_has_ref()) {
    clear_has_ref();
  }
  if (ref != nullptr) {
    set_has_ref();
    _impl_.has_ref_.ref_.InitAllocated(ref, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.ref)
}

// uint32 capacity = 3;
inline bool BikeShareStationInfo::_internal_has_capacity() const {
  return has_capacity_case() == kCapacity;
}
inline bool BikeShareStationInfo::has_capacity() const {
  return _internal_has_capacity();
}
inline void BikeShareStationInfo::set_has_capacity() {
  _impl_._oneof_case_[2] = kCapacity;
}
inline void BikeShareStationInfo::clear_capacity() {
  if (_internal_has_capacity()) {
    _impl_.has_capacity_.capacity_ = 0u;
    clear_has_has_capacity();
  }
}
inline uint32_t BikeShareStationInfo::_internal_capacity() const {
  if (_internal_has_capacity()) {
    return _impl_.has_capacity_.capacity_;
  }
  return 0u;
}
inline void BikeShareStationInfo::_internal_set_capacity(uint32_t value) {
  if (!_internal_has_capacity()) {
    clear_has_capacity();
    set_has_capacity();
  }
  _impl_.has_capacity_.capacity_ = value;
}
inline uint32_t BikeShareStationInfo::capacity() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.capacity)
  return _internal_capacity();
}
inline void BikeShareStationInfo::set_capacity(uint32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.capacity)
}

// string network = 4;
inline bool BikeShareStationInfo::_internal_has_network() const {
  return has_network_case() == kNetwork;
}
inline bool BikeShareStationInfo::has_network() const {
  return _internal_has_network();
}
inline void BikeShareStationInfo::set_has_network() {
  _impl_._oneof_case_[3] = kNetwork;
}
inline void BikeShareStationInfo::clear_network() {
  if (_internal_has_network()) {
    _impl_.has_network_.network_.Destroy();
    clear_has_has_network();
  }
}
inline const std::string& BikeShareStationInfo::network() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline void BikeShareStationInfo::set_network(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_network()) {
    clear_has_network();
    set_has_network();
    _impl_.has_network_.network_.InitDefault();
  }
  _impl_.has_network_.network_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.network)
}
inline std::string* BikeShareStationInfo::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.network)
  return _s;
}
inline const std::string& BikeShareStationInfo::_internal_network() const {
  if (_internal_has_network()) {
    return _impl_.has_network_.network_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::_internal_set_network(const std::string& value) {
  if (!_internal_has_network()) {
    clear_has_network();
    set_has_network();
    _impl_.has_network_.network_.InitDefault();
  }
  _impl_.has_network_.network_.Set(value, GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::_internal_mutable_network() {
  if (!_internal_has_network()) {
    clear_has_network();
    set_has_network();
    _impl_.has_network_.network_.InitDefault();
  }
  return _impl_.has_network_.network_.Mutable(      GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::release_network() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.network)
  if (_internal_has_network()) {
    clear_has_has_network();
    return _impl_.has_network_.network_.Release();
  } else {
    return nullptr;
  }
}
inline void BikeShareStationInfo::set_allocated_network(std::string* network) {
  if (has_has_network()) {
    clear_has_network();
  }
  if (network != nullptr) {
    set_has_network();
    _impl_.has_network_.network_.InitAllocated(network, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.network)
}

// string operator = 5;
inline bool BikeShareStationInfo::_internal_has_operator_() const {
  return has_operator__case() == kOperator;
}
inline bool BikeShareStationInfo::has_operator_() const {
  return _internal_has_operator_();
}
inline void BikeShareStationInfo::set_has_operator_() {
  _impl_._oneof_case_[4] = kOperator;
}
inline void BikeShareStationInfo::clear_operator_() {
  if (_internal_has_operator_()) {
    _impl_.has_operator__.operator__.Destroy();
    clear_has_has_operator_();
  }
}
inline const std::string& BikeShareStationInfo::operator_() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline void BikeShareStationInfo::set_operator_(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    _impl_.has_operator__.operator__.InitDefault();
  }
  _impl_.has_operator__.operator__.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.operator)
}
inline std::string* BikeShareStationInfo::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:valhalla.BikeShareStationInfo.operator)
  return _s;
}
inline const std::string& BikeShareStationInfo::_internal_operator_() const {
  if (_internal_has_operator_()) {
    return _impl_.has_operator__.operator__.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BikeShareStationInfo::_internal_set_operator_(const std::string& value) {
  if (!_internal_has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    _impl_.has_operator__.operator__.InitDefault();
  }
  _impl_.has_operator__.operator__.Set(value, GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::_internal_mutable_operator_() {
  if (!_internal_has_operator_()) {
    clear_has_operator_();
    set_has_operator_();
    _impl_.has_operator__.operator__.InitDefault();
  }
  return _impl_.has_operator__.operator__.Mutable(      GetArenaForAllocation());
}
inline std::string* BikeShareStationInfo::release_operator_() {
  // @@protoc_insertion_point(field_release:valhalla.BikeShareStationInfo.operator)
  if (_internal_has_operator_()) {
    clear_has_has_operator_();
    return _impl_.has_operator__.operator__.Release();
  } else {
    return nullptr;
  }
}
inline void BikeShareStationInfo::set_allocated_operator_(std::string* operator_) {
  if (has_has_operator_()) {
    clear_has_operator_();
  }
  if (operator_ != nullptr) {
    set_has_operator_();
    _impl_.has_operator__.operator__.InitAllocated(operator_, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.BikeShareStationInfo.operator)
}

// float rent_cost = 6;
inline bool BikeShareStationInfo::_internal_has_rent_cost() const {
  return has_rent_cost_case() == kRentCost;
}
inline bool BikeShareStationInfo::has_rent_cost() const {
  return _internal_has_rent_cost();
}
inline void BikeShareStationInfo::set_has_rent_cost() {
  _impl_._oneof_case_[5] = kRentCost;
}
inline void BikeShareStationInfo::clear_rent_cost() {
  if (_internal_has_rent_cost()) {
    _impl_.has_rent_cost_.rent_cost_ = 0;
    clear_has_has_rent_cost();
  }
}
inline float BikeShareStationInfo::_internal_rent_cost() const {
  if (_internal_has_rent_cost()) {
    return _impl_.has_rent_cost_.rent_cost_;
  }
  return 0;
}
inline void BikeShareStationInfo::_internal_set_rent_cost(float value) {
  if (!_internal_has_rent_cost()) {
    clear_has_rent_cost();
    set_has_rent_cost();
  }
  _impl_.has_rent_cost_.rent_cost_ = value;
}
inline float BikeShareStationInfo::rent_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.rent_cost)
  return _internal_rent_cost();
}
inline void BikeShareStationInfo::set_rent_cost(float value) {
  _internal_set_rent_cost(value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.rent_cost)
}

// float return_cost = 7;
inline bool BikeShareStationInfo::_internal_has_return_cost() const {
  return has_return_cost_case() == kReturnCost;
}
inline bool BikeShareStationInfo::has_return_cost() const {
  return _internal_has_return_cost();
}
inline void BikeShareStationInfo::set_has_return_cost() {
  _impl_._oneof_case_[6] = kReturnCost;
}
inline void BikeShareStationInfo::clear_return_cost() {
  if (_internal_has_return_cost()) {
    _impl_.has_return_cost_.return_cost_ = 0;
    clear_has_has_return_cost();
  }
}
inline float BikeShareStationInfo::_internal_return_cost() const {
  if (_internal_has_return_cost()) {
    return _impl_.has_return_cost_.return_cost_;
  }
  return 0;
}
inline void BikeShareStationInfo::_internal_set_return_cost(float value) {
  if (!_internal_has_return_cost()) {
    clear_has_return_cost();
    set_has_return_cost();
  }
  _impl_.has_return_cost_.return_cost_ = value;
}
inline float BikeShareStationInfo::return_cost() const {
  // @@protoc_insertion_point(field_get:valhalla.BikeShareStationInfo.return_cost)
  return _internal_return_cost();
}
inline void BikeShareStationInfo::set_return_cost(float value) {
  _internal_set_return_cost(value);
  // @@protoc_insertion_point(field_set:valhalla.BikeShareStationInfo.return_cost)
}

inline bool BikeShareStationInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_name() {
  _impl_._oneof_case_[0] = HAS_NAME_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_ref() const {
  return has_ref_case() != HAS_REF_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_ref() {
  _impl_._oneof_case_[1] = HAS_REF_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_capacity() const {
  return has_capacity_case() != HAS_CAPACITY_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_capacity() {
  _impl_._oneof_case_[2] = HAS_CAPACITY_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_network() const {
  return has_network_case() != HAS_NETWORK_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_network() {
  _impl_._oneof_case_[3] = HAS_NETWORK_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_operator_() const {
  return has_operator__case() != HAS_OPERATOR__NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_operator_() {
  _impl_._oneof_case_[4] = HAS_OPERATOR__NOT_SET;
}
inline bool BikeShareStationInfo::has_has_rent_cost() const {
  return has_rent_cost_case() != HAS_RENT_COST_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_rent_cost() {
  _impl_._oneof_case_[5] = HAS_RENT_COST_NOT_SET;
}
inline bool BikeShareStationInfo::has_has_return_cost() const {
  return has_return_cost_case() != HAS_RETURN_COST_NOT_SET;
}
inline void BikeShareStationInfo::clear_has_has_return_cost() {
  _impl_._oneof_case_[6] = HAS_RETURN_COST_NOT_SET;
}
inline BikeShareStationInfo::HasNameCase BikeShareStationInfo::has_name_case() const {
  return BikeShareStationInfo::HasNameCase(_impl_._oneof_case_[0]);
}
inline BikeShareStationInfo::HasRefCase BikeShareStationInfo::has_ref_case() const {
  return BikeShareStationInfo::HasRefCase(_impl_._oneof_case_[1]);
}
inline BikeShareStationInfo::HasCapacityCase BikeShareStationInfo::has_capacity_case() const {
  return BikeShareStationInfo::HasCapacityCase(_impl_._oneof_case_[2]);
}
inline BikeShareStationInfo::HasNetworkCase BikeShareStationInfo::has_network_case() const {
  return BikeShareStationInfo::HasNetworkCase(_impl_._oneof_case_[3]);
}
inline BikeShareStationInfo::HasOperatorCase BikeShareStationInfo::has_operator__case() const {
  return BikeShareStationInfo::HasOperatorCase(_impl_._oneof_case_[4]);
}
inline BikeShareStationInfo::HasRentCostCase BikeShareStationInfo::has_rent_cost_case() const {
  return BikeShareStationInfo::HasRentCostCase(_impl_._oneof_case_[5]);
}
inline BikeShareStationInfo::HasReturnCostCase BikeShareStationInfo::has_return_cost_case() const {
  return BikeShareStationInfo::HasReturnCostCase(_impl_._oneof_case_[6]);
}
// -------------------------------------------------------------------

// TransitPlatformInfo

// .valhalla.TransitPlatformInfo.Type type = 1;
inline bool TransitPlatformInfo::_internal_has_type() const {
  return has_type_case() == kType;
}
inline bool TransitPlatformInfo::has_type() const {
  return _internal_has_type();
}
inline void TransitPlatformInfo::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline void TransitPlatformInfo::clear_type() {
  if (_internal_has_type()) {
    _impl_.has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::TransitPlatformInfo_Type TransitPlatformInfo::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::valhalla::TransitPlatformInfo_Type >(_impl_.has_type_.type_);
  }
  return static_cast< ::valhalla::TransitPlatformInfo_Type >(0);
}
inline ::valhalla::TransitPlatformInfo_Type TransitPlatformInfo::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.type)
  return _internal_type();
}
inline void TransitPlatformInfo::_internal_set_type(::valhalla::TransitPlatformInfo_Type value) {
  if (!_internal_has_type()) {
    clear_has_type();
    set_has_type();
  }
  _impl_.has_type_.type_ = value;
}
inline void TransitPlatformInfo::set_type(::valhalla::TransitPlatformInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.type)
}

// string onestop_id = 2;
inline bool TransitPlatformInfo::_internal_has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline bool TransitPlatformInfo::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void TransitPlatformInfo::set_has_onestop_id() {
  _impl_._oneof_case_[1] = kOnestopId;
}
inline void TransitPlatformInfo::clear_onestop_id() {
  if (_internal_has_onestop_id()) {
    _impl_.has_onestop_id_.onestop_id_.Destroy();
    clear_has_has_onestop_id();
  }
}
inline const std::string& TransitPlatformInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.onestop_id)
}
inline std::string* TransitPlatformInfo::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.onestop_id)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_onestop_id() const {
  if (_internal_has_onestop_id()) {
    return _impl_.has_onestop_id_.onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_onestop_id(const std::string& value) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_onestop_id() {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  return _impl_.has_onestop_id_.onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.onestop_id)
  if (_internal_has_onestop_id()) {
    clear_has_has_onestop_id();
    return _impl_.has_onestop_id_.onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_onestop_id(std::string* onestop_id) {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (onestop_id != nullptr) {
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitAllocated(onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.onestop_id)
}

// string name = 3;
inline bool TransitPlatformInfo::_internal_has_name() const {
  return has_name_case() == kName;
}
inline bool TransitPlatformInfo::has_name() const {
  return _internal_has_name();
}
inline void TransitPlatformInfo::set_has_name() {
  _impl_._oneof_case_[2] = kName;
}
inline void TransitPlatformInfo::clear_name() {
  if (_internal_has_name()) {
    _impl_.has_name_.name_.Destroy();
    clear_has_has_name();
  }
}
inline const std::string& TransitPlatformInfo::name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.name)
}
inline std::string* TransitPlatformInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.name)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.has_name_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  _impl_.has_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_has_name();
    set_has_name();
    _impl_.has_name_.name_.InitDefault();
  }
  return _impl_.has_name_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.name)
  if (_internal_has_name()) {
    clear_has_has_name();
    return _impl_.has_name_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_name(std::string* name) {
  if (has_has_name()) {
    clear_has_name();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.has_name_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.name)
}

// string arrival_date_time = 4;
inline bool TransitPlatformInfo::_internal_has_arrival_date_time() const {
  return has_arrival_date_time_case() == kArrivalDateTime;
}
inline bool TransitPlatformInfo::has_arrival_date_time() const {
  return _internal_has_arrival_date_time();
}
inline void TransitPlatformInfo::set_has_arrival_date_time() {
  _impl_._oneof_case_[3] = kArrivalDateTime;
}
inline void TransitPlatformInfo::clear_arrival_date_time() {
  if (_internal_has_arrival_date_time()) {
    _impl_.has_arrival_date_time_.arrival_date_time_.Destroy();
    clear_has_has_arrival_date_time();
  }
}
inline const std::string& TransitPlatformInfo::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.arrival_date_time)
  return _internal_arrival_date_time();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_arrival_date_time(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    _impl_.has_arrival_date_time_.arrival_date_time_.InitDefault();
  }
  _impl_.has_arrival_date_time_.arrival_date_time_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.arrival_date_time)
}
inline std::string* TransitPlatformInfo::mutable_arrival_date_time() {
  std::string* _s = _internal_mutable_arrival_date_time();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.arrival_date_time)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_arrival_date_time() const {
  if (_internal_has_arrival_date_time()) {
    return _impl_.has_arrival_date_time_.arrival_date_time_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_arrival_date_time(const std::string& value) {
  if (!_internal_has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    _impl_.has_arrival_date_time_.arrival_date_time_.InitDefault();
  }
  _impl_.has_arrival_date_time_.arrival_date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_arrival_date_time() {
  if (!_internal_has_arrival_date_time()) {
    clear_has_arrival_date_time();
    set_has_arrival_date_time();
    _impl_.has_arrival_date_time_.arrival_date_time_.InitDefault();
  }
  return _impl_.has_arrival_date_time_.arrival_date_time_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_arrival_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.arrival_date_time)
  if (_internal_has_arrival_date_time()) {
    clear_has_has_arrival_date_time();
    return _impl_.has_arrival_date_time_.arrival_date_time_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_arrival_date_time(std::string* arrival_date_time) {
  if (has_has_arrival_date_time()) {
    clear_has_arrival_date_time();
  }
  if (arrival_date_time != nullptr) {
    set_has_arrival_date_time();
    _impl_.has_arrival_date_time_.arrival_date_time_.InitAllocated(arrival_date_time, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.arrival_date_time)
}

// string departure_date_time = 5;
inline bool TransitPlatformInfo::_internal_has_departure_date_time() const {
  return has_departure_date_time_case() == kDepartureDateTime;
}
inline bool TransitPlatformInfo::has_departure_date_time() const {
  return _internal_has_departure_date_time();
}
inline void TransitPlatformInfo::set_has_departure_date_time() {
  _impl_._oneof_case_[4] = kDepartureDateTime;
}
inline void TransitPlatformInfo::clear_departure_date_time() {
  if (_internal_has_departure_date_time()) {
    _impl_.has_departure_date_time_.departure_date_time_.Destroy();
    clear_has_has_departure_date_time();
  }
}
inline const std::string& TransitPlatformInfo::departure_date_time() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.departure_date_time)
  return _internal_departure_date_time();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_departure_date_time(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    _impl_.has_departure_date_time_.departure_date_time_.InitDefault();
  }
  _impl_.has_departure_date_time_.departure_date_time_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.departure_date_time)
}
inline std::string* TransitPlatformInfo::mutable_departure_date_time() {
  std::string* _s = _internal_mutable_departure_date_time();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.departure_date_time)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_departure_date_time() const {
  if (_internal_has_departure_date_time()) {
    return _impl_.has_departure_date_time_.departure_date_time_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_departure_date_time(const std::string& value) {
  if (!_internal_has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    _impl_.has_departure_date_time_.departure_date_time_.InitDefault();
  }
  _impl_.has_departure_date_time_.departure_date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_departure_date_time() {
  if (!_internal_has_departure_date_time()) {
    clear_has_departure_date_time();
    set_has_departure_date_time();
    _impl_.has_departure_date_time_.departure_date_time_.InitDefault();
  }
  return _impl_.has_departure_date_time_.departure_date_time_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_departure_date_time() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.departure_date_time)
  if (_internal_has_departure_date_time()) {
    clear_has_has_departure_date_time();
    return _impl_.has_departure_date_time_.departure_date_time_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_departure_date_time(std::string* departure_date_time) {
  if (has_has_departure_date_time()) {
    clear_has_departure_date_time();
  }
  if (departure_date_time != nullptr) {
    set_has_departure_date_time();
    _impl_.has_departure_date_time_.departure_date_time_.InitAllocated(departure_date_time, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.departure_date_time)
}

// bool assumed_schedule = 6;
inline bool TransitPlatformInfo::_internal_has_assumed_schedule() const {
  return has_assumed_schedule_case() == kAssumedSchedule;
}
inline bool TransitPlatformInfo::has_assumed_schedule() const {
  return _internal_has_assumed_schedule();
}
inline void TransitPlatformInfo::set_has_assumed_schedule() {
  _impl_._oneof_case_[5] = kAssumedSchedule;
}
inline void TransitPlatformInfo::clear_assumed_schedule() {
  if (_internal_has_assumed_schedule()) {
    _impl_.has_assumed_schedule_.assumed_schedule_ = false;
    clear_has_has_assumed_schedule();
  }
}
inline bool TransitPlatformInfo::_internal_assumed_schedule() const {
  if (_internal_has_assumed_schedule()) {
    return _impl_.has_assumed_schedule_.assumed_schedule_;
  }
  return false;
}
inline void TransitPlatformInfo::_internal_set_assumed_schedule(bool value) {
  if (!_internal_has_assumed_schedule()) {
    clear_has_assumed_schedule();
    set_has_assumed_schedule();
  }
  _impl_.has_assumed_schedule_.assumed_schedule_ = value;
}
inline bool TransitPlatformInfo::assumed_schedule() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.assumed_schedule)
  return _internal_assumed_schedule();
}
inline void TransitPlatformInfo::set_assumed_schedule(bool value) {
  _internal_set_assumed_schedule(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.assumed_schedule)
}

// .valhalla.LatLng ll = 7;
inline bool TransitPlatformInfo::_internal_has_ll() const {
  return this != internal_default_instance() && _impl_.ll_ != nullptr;
}
inline bool TransitPlatformInfo::has_ll() const {
  return _internal_has_ll();
}
inline void TransitPlatformInfo::clear_ll() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_ != nullptr) {
    delete _impl_.ll_;
  }
  _impl_.ll_ = nullptr;
}
inline const ::valhalla::LatLng& TransitPlatformInfo::_internal_ll() const {
  const ::valhalla::LatLng* p = _impl_.ll_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::LatLng&>(
      ::valhalla::_LatLng_default_instance_);
}
inline const ::valhalla::LatLng& TransitPlatformInfo::ll() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.ll)
  return _internal_ll();
}
inline void TransitPlatformInfo::unsafe_arena_set_allocated_ll(
    ::valhalla::LatLng* ll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_);
  }
  _impl_.ll_ = ll;
  if (ll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.TransitPlatformInfo.ll)
}
inline ::valhalla::LatLng* TransitPlatformInfo::release_ll() {
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::LatLng* TransitPlatformInfo::unsafe_arena_release_ll() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.ll)
  
  ::valhalla::LatLng* temp = _impl_.ll_;
  _impl_.ll_ = nullptr;
  return temp;
}
inline ::valhalla::LatLng* TransitPlatformInfo::_internal_mutable_ll() {
  
  if (_impl_.ll_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::LatLng>(GetArenaForAllocation());
    _impl_.ll_ = p;
  }
  return _impl_.ll_;
}
inline ::valhalla::LatLng* TransitPlatformInfo::mutable_ll() {
  ::valhalla::LatLng* _msg = _internal_mutable_ll();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.ll)
  return _msg;
}
inline void TransitPlatformInfo::set_allocated_ll(::valhalla::LatLng* ll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ll_;
  }
  if (ll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ll);
    if (message_arena != submessage_arena) {
      ll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_ = ll;
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.ll)
}

// string station_onestop_id = 8;
inline bool TransitPlatformInfo::_internal_has_station_onestop_id() const {
  return has_station_onestop_id_case() == kStationOnestopId;
}
inline bool TransitPlatformInfo::has_station_onestop_id() const {
  return _internal_has_station_onestop_id();
}
inline void TransitPlatformInfo::set_has_station_onestop_id() {
  _impl_._oneof_case_[6] = kStationOnestopId;
}
inline void TransitPlatformInfo::clear_station_onestop_id() {
  if (_internal_has_station_onestop_id()) {
    _impl_.has_station_onestop_id_.station_onestop_id_.Destroy();
    clear_has_has_station_onestop_id();
  }
}
inline const std::string& TransitPlatformInfo::station_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_onestop_id)
  return _internal_station_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_station_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    _impl_.has_station_onestop_id_.station_onestop_id_.InitDefault();
  }
  _impl_.has_station_onestop_id_.station_onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_onestop_id)
}
inline std::string* TransitPlatformInfo::mutable_station_onestop_id() {
  std::string* _s = _internal_mutable_station_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_onestop_id)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_station_onestop_id() const {
  if (_internal_has_station_onestop_id()) {
    return _impl_.has_station_onestop_id_.station_onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_station_onestop_id(const std::string& value) {
  if (!_internal_has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    _impl_.has_station_onestop_id_.station_onestop_id_.InitDefault();
  }
  _impl_.has_station_onestop_id_.station_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_station_onestop_id() {
  if (!_internal_has_station_onestop_id()) {
    clear_has_station_onestop_id();
    set_has_station_onestop_id();
    _impl_.has_station_onestop_id_.station_onestop_id_.InitDefault();
  }
  return _impl_.has_station_onestop_id_.station_onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_station_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_onestop_id)
  if (_internal_has_station_onestop_id()) {
    clear_has_has_station_onestop_id();
    return _impl_.has_station_onestop_id_.station_onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_station_onestop_id(std::string* station_onestop_id) {
  if (has_has_station_onestop_id()) {
    clear_has_station_onestop_id();
  }
  if (station_onestop_id != nullptr) {
    set_has_station_onestop_id();
    _impl_.has_station_onestop_id_.station_onestop_id_.InitAllocated(station_onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_onestop_id)
}

// string station_name = 9;
inline bool TransitPlatformInfo::_internal_has_station_name() const {
  return has_station_name_case() == kStationName;
}
inline bool TransitPlatformInfo::has_station_name() const {
  return _internal_has_station_name();
}
inline void TransitPlatformInfo::set_has_station_name() {
  _impl_._oneof_case_[7] = kStationName;
}
inline void TransitPlatformInfo::clear_station_name() {
  if (_internal_has_station_name()) {
    _impl_.has_station_name_.station_name_.Destroy();
    clear_has_has_station_name();
  }
}
inline const std::string& TransitPlatformInfo::station_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitPlatformInfo.station_name)
  return _internal_station_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitPlatformInfo::set_station_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    _impl_.has_station_name_.station_name_.InitDefault();
  }
  _impl_.has_station_name_.station_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitPlatformInfo.station_name)
}
inline std::string* TransitPlatformInfo::mutable_station_name() {
  std::string* _s = _internal_mutable_station_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitPlatformInfo.station_name)
  return _s;
}
inline const std::string& TransitPlatformInfo::_internal_station_name() const {
  if (_internal_has_station_name()) {
    return _impl_.has_station_name_.station_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitPlatformInfo::_internal_set_station_name(const std::string& value) {
  if (!_internal_has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    _impl_.has_station_name_.station_name_.InitDefault();
  }
  _impl_.has_station_name_.station_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::_internal_mutable_station_name() {
  if (!_internal_has_station_name()) {
    clear_has_station_name();
    set_has_station_name();
    _impl_.has_station_name_.station_name_.InitDefault();
  }
  return _impl_.has_station_name_.station_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitPlatformInfo::release_station_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitPlatformInfo.station_name)
  if (_internal_has_station_name()) {
    clear_has_has_station_name();
    return _impl_.has_station_name_.station_name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitPlatformInfo::set_allocated_station_name(std::string* station_name) {
  if (has_has_station_name()) {
    clear_has_station_name();
  }
  if (station_name != nullptr) {
    set_has_station_name();
    _impl_.has_station_name_.station_name_.InitAllocated(station_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitPlatformInfo.station_name)
}

inline bool TransitPlatformInfo::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_type() {
  _impl_._oneof_case_[0] = HAS_TYPE_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_onestop_id() {
  _impl_._oneof_case_[1] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_name() const {
  return has_name_case() != HAS_NAME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_name() {
  _impl_._oneof_case_[2] = HAS_NAME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_arrival_date_time() const {
  return has_arrival_date_time_case() != HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_arrival_date_time() {
  _impl_._oneof_case_[3] = HAS_ARRIVAL_DATE_TIME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_departure_date_time() const {
  return has_departure_date_time_case() != HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_departure_date_time() {
  _impl_._oneof_case_[4] = HAS_DEPARTURE_DATE_TIME_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_assumed_schedule() const {
  return has_assumed_schedule_case() != HAS_ASSUMED_SCHEDULE_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_assumed_schedule() {
  _impl_._oneof_case_[5] = HAS_ASSUMED_SCHEDULE_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_station_onestop_id() const {
  return has_station_onestop_id_case() != HAS_STATION_ONESTOP_ID_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_station_onestop_id() {
  _impl_._oneof_case_[6] = HAS_STATION_ONESTOP_ID_NOT_SET;
}
inline bool TransitPlatformInfo::has_has_station_name() const {
  return has_station_name_case() != HAS_STATION_NAME_NOT_SET;
}
inline void TransitPlatformInfo::clear_has_has_station_name() {
  _impl_._oneof_case_[7] = HAS_STATION_NAME_NOT_SET;
}
inline TransitPlatformInfo::HasTypeCase TransitPlatformInfo::has_type_case() const {
  return TransitPlatformInfo::HasTypeCase(_impl_._oneof_case_[0]);
}
inline TransitPlatformInfo::HasOnestopIdCase TransitPlatformInfo::has_onestop_id_case() const {
  return TransitPlatformInfo::HasOnestopIdCase(_impl_._oneof_case_[1]);
}
inline TransitPlatformInfo::HasNameCase TransitPlatformInfo::has_name_case() const {
  return TransitPlatformInfo::HasNameCase(_impl_._oneof_case_[2]);
}
inline TransitPlatformInfo::HasArrivalDateTimeCase TransitPlatformInfo::has_arrival_date_time_case() const {
  return TransitPlatformInfo::HasArrivalDateTimeCase(_impl_._oneof_case_[3]);
}
inline TransitPlatformInfo::HasDepartureDateTimeCase TransitPlatformInfo::has_departure_date_time_case() const {
  return TransitPlatformInfo::HasDepartureDateTimeCase(_impl_._oneof_case_[4]);
}
inline TransitPlatformInfo::HasAssumedScheduleCase TransitPlatformInfo::has_assumed_schedule_case() const {
  return TransitPlatformInfo::HasAssumedScheduleCase(_impl_._oneof_case_[5]);
}
inline TransitPlatformInfo::HasStationOnestopIdCase TransitPlatformInfo::has_station_onestop_id_case() const {
  return TransitPlatformInfo::HasStationOnestopIdCase(_impl_._oneof_case_[6]);
}
inline TransitPlatformInfo::HasStationNameCase TransitPlatformInfo::has_station_name_case() const {
  return TransitPlatformInfo::HasStationNameCase(_impl_._oneof_case_[7]);
}
// -------------------------------------------------------------------

// TransitRouteInfo

// string onestop_id = 1;
inline bool TransitRouteInfo::_internal_has_onestop_id() const {
  return has_onestop_id_case() == kOnestopId;
}
inline bool TransitRouteInfo::has_onestop_id() const {
  return _internal_has_onestop_id();
}
inline void TransitRouteInfo::set_has_onestop_id() {
  _impl_._oneof_case_[0] = kOnestopId;
}
inline void TransitRouteInfo::clear_onestop_id() {
  if (_internal_has_onestop_id()) {
    _impl_.has_onestop_id_.onestop_id_.Destroy();
    clear_has_has_onestop_id();
  }
}
inline const std::string& TransitRouteInfo::onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.onestop_id)
  return _internal_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.onestop_id)
}
inline std::string* TransitRouteInfo::mutable_onestop_id() {
  std::string* _s = _internal_mutable_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.onestop_id)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_onestop_id() const {
  if (_internal_has_onestop_id()) {
    return _impl_.has_onestop_id_.onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_onestop_id(const std::string& value) {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  _impl_.has_onestop_id_.onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_onestop_id() {
  if (!_internal_has_onestop_id()) {
    clear_has_onestop_id();
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitDefault();
  }
  return _impl_.has_onestop_id_.onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.onestop_id)
  if (_internal_has_onestop_id()) {
    clear_has_has_onestop_id();
    return _impl_.has_onestop_id_.onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_onestop_id(std::string* onestop_id) {
  if (has_has_onestop_id()) {
    clear_has_onestop_id();
  }
  if (onestop_id != nullptr) {
    set_has_onestop_id();
    _impl_.has_onestop_id_.onestop_id_.InitAllocated(onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.onestop_id)
}

// uint32 block_id = 2;
inline bool TransitRouteInfo::_internal_has_block_id() const {
  return has_block_id_case() == kBlockId;
}
inline bool TransitRouteInfo::has_block_id() const {
  return _internal_has_block_id();
}
inline void TransitRouteInfo::set_has_block_id() {
  _impl_._oneof_case_[1] = kBlockId;
}
inline void TransitRouteInfo::clear_block_id() {
  if (_internal_has_block_id()) {
    _impl_.has_block_id_.block_id_ = 0u;
    clear_has_has_block_id();
  }
}
inline uint32_t TransitRouteInfo::_internal_block_id() const {
  if (_internal_has_block_id()) {
    return _impl_.has_block_id_.block_id_;
  }
  return 0u;
}
inline void TransitRouteInfo::_internal_set_block_id(uint32_t value) {
  if (!_internal_has_block_id()) {
    clear_has_block_id();
    set_has_block_id();
  }
  _impl_.has_block_id_.block_id_ = value;
}
inline uint32_t TransitRouteInfo::block_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.block_id)
  return _internal_block_id();
}
inline void TransitRouteInfo::set_block_id(uint32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.block_id)
}

// uint32 trip_id = 3;
inline bool TransitRouteInfo::_internal_has_trip_id() const {
  return has_trip_id_case() == kTripId;
}
inline bool TransitRouteInfo::has_trip_id() const {
  return _internal_has_trip_id();
}
inline void TransitRouteInfo::set_has_trip_id() {
  _impl_._oneof_case_[2] = kTripId;
}
inline void TransitRouteInfo::clear_trip_id() {
  if (_internal_has_trip_id()) {
    _impl_.has_trip_id_.trip_id_ = 0u;
    clear_has_has_trip_id();
  }
}
inline uint32_t TransitRouteInfo::_internal_trip_id() const {
  if (_internal_has_trip_id()) {
    return _impl_.has_trip_id_.trip_id_;
  }
  return 0u;
}
inline void TransitRouteInfo::_internal_set_trip_id(uint32_t value) {
  if (!_internal_has_trip_id()) {
    clear_has_trip_id();
    set_has_trip_id();
  }
  _impl_.has_trip_id_.trip_id_ = value;
}
inline uint32_t TransitRouteInfo::trip_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.trip_id)
  return _internal_trip_id();
}
inline void TransitRouteInfo::set_trip_id(uint32_t value) {
  _internal_set_trip_id(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.trip_id)
}

// string short_name = 4;
inline bool TransitRouteInfo::_internal_has_short_name() const {
  return has_short_name_case() == kShortName;
}
inline bool TransitRouteInfo::has_short_name() const {
  return _internal_has_short_name();
}
inline void TransitRouteInfo::set_has_short_name() {
  _impl_._oneof_case_[3] = kShortName;
}
inline void TransitRouteInfo::clear_short_name() {
  if (_internal_has_short_name()) {
    _impl_.has_short_name_.short_name_.Destroy();
    clear_has_has_short_name();
  }
}
inline const std::string& TransitRouteInfo::short_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.short_name)
  return _internal_short_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_short_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    _impl_.has_short_name_.short_name_.InitDefault();
  }
  _impl_.has_short_name_.short_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.short_name)
}
inline std::string* TransitRouteInfo::mutable_short_name() {
  std::string* _s = _internal_mutable_short_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.short_name)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_short_name() const {
  if (_internal_has_short_name()) {
    return _impl_.has_short_name_.short_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_short_name(const std::string& value) {
  if (!_internal_has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    _impl_.has_short_name_.short_name_.InitDefault();
  }
  _impl_.has_short_name_.short_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_short_name() {
  if (!_internal_has_short_name()) {
    clear_has_short_name();
    set_has_short_name();
    _impl_.has_short_name_.short_name_.InitDefault();
  }
  return _impl_.has_short_name_.short_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_short_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.short_name)
  if (_internal_has_short_name()) {
    clear_has_has_short_name();
    return _impl_.has_short_name_.short_name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_short_name(std::string* short_name) {
  if (has_has_short_name()) {
    clear_has_short_name();
  }
  if (short_name != nullptr) {
    set_has_short_name();
    _impl_.has_short_name_.short_name_.InitAllocated(short_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.short_name)
}

// string long_name = 5;
inline bool TransitRouteInfo::_internal_has_long_name() const {
  return has_long_name_case() == kLongName;
}
inline bool TransitRouteInfo::has_long_name() const {
  return _internal_has_long_name();
}
inline void TransitRouteInfo::set_has_long_name() {
  _impl_._oneof_case_[4] = kLongName;
}
inline void TransitRouteInfo::clear_long_name() {
  if (_internal_has_long_name()) {
    _impl_.has_long_name_.long_name_.Destroy();
    clear_has_has_long_name();
  }
}
inline const std::string& TransitRouteInfo::long_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.long_name)
  return _internal_long_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_long_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    _impl_.has_long_name_.long_name_.InitDefault();
  }
  _impl_.has_long_name_.long_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.long_name)
}
inline std::string* TransitRouteInfo::mutable_long_name() {
  std::string* _s = _internal_mutable_long_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.long_name)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_long_name() const {
  if (_internal_has_long_name()) {
    return _impl_.has_long_name_.long_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_long_name(const std::string& value) {
  if (!_internal_has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    _impl_.has_long_name_.long_name_.InitDefault();
  }
  _impl_.has_long_name_.long_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_long_name() {
  if (!_internal_has_long_name()) {
    clear_has_long_name();
    set_has_long_name();
    _impl_.has_long_name_.long_name_.InitDefault();
  }
  return _impl_.has_long_name_.long_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_long_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.long_name)
  if (_internal_has_long_name()) {
    clear_has_has_long_name();
    return _impl_.has_long_name_.long_name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_long_name(std::string* long_name) {
  if (has_has_long_name()) {
    clear_has_long_name();
  }
  if (long_name != nullptr) {
    set_has_long_name();
    _impl_.has_long_name_.long_name_.InitAllocated(long_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.long_name)
}

// string headsign = 6;
inline bool TransitRouteInfo::_internal_has_headsign() const {
  return has_headsign_case() == kHeadsign;
}
inline bool TransitRouteInfo::has_headsign() const {
  return _internal_has_headsign();
}
inline void TransitRouteInfo::set_has_headsign() {
  _impl_._oneof_case_[5] = kHeadsign;
}
inline void TransitRouteInfo::clear_headsign() {
  if (_internal_has_headsign()) {
    _impl_.has_headsign_.headsign_.Destroy();
    clear_has_has_headsign();
  }
}
inline const std::string& TransitRouteInfo::headsign() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.headsign)
  return _internal_headsign();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_headsign(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    _impl_.has_headsign_.headsign_.InitDefault();
  }
  _impl_.has_headsign_.headsign_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.headsign)
}
inline std::string* TransitRouteInfo::mutable_headsign() {
  std::string* _s = _internal_mutable_headsign();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.headsign)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_headsign() const {
  if (_internal_has_headsign()) {
    return _impl_.has_headsign_.headsign_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_headsign(const std::string& value) {
  if (!_internal_has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    _impl_.has_headsign_.headsign_.InitDefault();
  }
  _impl_.has_headsign_.headsign_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_headsign() {
  if (!_internal_has_headsign()) {
    clear_has_headsign();
    set_has_headsign();
    _impl_.has_headsign_.headsign_.InitDefault();
  }
  return _impl_.has_headsign_.headsign_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_headsign() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.headsign)
  if (_internal_has_headsign()) {
    clear_has_has_headsign();
    return _impl_.has_headsign_.headsign_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_headsign(std::string* headsign) {
  if (has_has_headsign()) {
    clear_has_headsign();
  }
  if (headsign != nullptr) {
    set_has_headsign();
    _impl_.has_headsign_.headsign_.InitAllocated(headsign, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.headsign)
}

// uint32 color = 7;
inline bool TransitRouteInfo::_internal_has_color() const {
  return has_color_case() == kColor;
}
inline bool TransitRouteInfo::has_color() const {
  return _internal_has_color();
}
inline void TransitRouteInfo::set_has_color() {
  _impl_._oneof_case_[6] = kColor;
}
inline void TransitRouteInfo::clear_color() {
  if (_internal_has_color()) {
    _impl_.has_color_.color_ = 0u;
    clear_has_has_color();
  }
}
inline uint32_t TransitRouteInfo::_internal_color() const {
  if (_internal_has_color()) {
    return _impl_.has_color_.color_;
  }
  return 0u;
}
inline void TransitRouteInfo::_internal_set_color(uint32_t value) {
  if (!_internal_has_color()) {
    clear_has_color();
    set_has_color();
  }
  _impl_.has_color_.color_ = value;
}
inline uint32_t TransitRouteInfo::color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.color)
  return _internal_color();
}
inline void TransitRouteInfo::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.color)
}

// uint32 text_color = 8;
inline bool TransitRouteInfo::_internal_has_text_color() const {
  return has_text_color_case() == kTextColor;
}
inline bool TransitRouteInfo::has_text_color() const {
  return _internal_has_text_color();
}
inline void TransitRouteInfo::set_has_text_color() {
  _impl_._oneof_case_[7] = kTextColor;
}
inline void TransitRouteInfo::clear_text_color() {
  if (_internal_has_text_color()) {
    _impl_.has_text_color_.text_color_ = 0u;
    clear_has_has_text_color();
  }
}
inline uint32_t TransitRouteInfo::_internal_text_color() const {
  if (_internal_has_text_color()) {
    return _impl_.has_text_color_.text_color_;
  }
  return 0u;
}
inline void TransitRouteInfo::_internal_set_text_color(uint32_t value) {
  if (!_internal_has_text_color()) {
    clear_has_text_color();
    set_has_text_color();
  }
  _impl_.has_text_color_.text_color_ = value;
}
inline uint32_t TransitRouteInfo::text_color() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.text_color)
  return _internal_text_color();
}
inline void TransitRouteInfo::set_text_color(uint32_t value) {
  _internal_set_text_color(value);
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.text_color)
}

// string description = 9;
inline bool TransitRouteInfo::_internal_has_description() const {
  return has_description_case() == kDescription;
}
inline bool TransitRouteInfo::has_description() const {
  return _internal_has_description();
}
inline void TransitRouteInfo::set_has_description() {
  _impl_._oneof_case_[8] = kDescription;
}
inline void TransitRouteInfo::clear_description() {
  if (_internal_has_description()) {
    _impl_.has_description_.description_.Destroy();
    clear_has_has_description();
  }
}
inline const std::string& TransitRouteInfo::description() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_description(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_description()) {
    clear_has_description();
    set_has_description();
    _impl_.has_description_.description_.InitDefault();
  }
  _impl_.has_description_.description_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.description)
}
inline std::string* TransitRouteInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.description)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_description() const {
  if (_internal_has_description()) {
    return _impl_.has_description_.description_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_description(const std::string& value) {
  if (!_internal_has_description()) {
    clear_has_description();
    set_has_description();
    _impl_.has_description_.description_.InitDefault();
  }
  _impl_.has_description_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_description() {
  if (!_internal_has_description()) {
    clear_has_description();
    set_has_description();
    _impl_.has_description_.description_.InitDefault();
  }
  return _impl_.has_description_.description_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_description() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.description)
  if (_internal_has_description()) {
    clear_has_has_description();
    return _impl_.has_description_.description_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_description(std::string* description) {
  if (has_has_description()) {
    clear_has_description();
  }
  if (description != nullptr) {
    set_has_description();
    _impl_.has_description_.description_.InitAllocated(description, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.description)
}

// string operator_onestop_id = 10;
inline bool TransitRouteInfo::_internal_has_operator_onestop_id() const {
  return has_operator_onestop_id_case() == kOperatorOnestopId;
}
inline bool TransitRouteInfo::has_operator_onestop_id() const {
  return _internal_has_operator_onestop_id();
}
inline void TransitRouteInfo::set_has_operator_onestop_id() {
  _impl_._oneof_case_[9] = kOperatorOnestopId;
}
inline void TransitRouteInfo::clear_operator_onestop_id() {
  if (_internal_has_operator_onestop_id()) {
    _impl_.has_operator_onestop_id_.operator_onestop_id_.Destroy();
    clear_has_has_operator_onestop_id();
  }
}
inline const std::string& TransitRouteInfo::operator_onestop_id() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_onestop_id)
  return _internal_operator_onestop_id();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_operator_onestop_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    _impl_.has_operator_onestop_id_.operator_onestop_id_.InitDefault();
  }
  _impl_.has_operator_onestop_id_.operator_onestop_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_onestop_id)
}
inline std::string* TransitRouteInfo::mutable_operator_onestop_id() {
  std::string* _s = _internal_mutable_operator_onestop_id();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_onestop_id)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_operator_onestop_id() const {
  if (_internal_has_operator_onestop_id()) {
    return _impl_.has_operator_onestop_id_.operator_onestop_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_operator_onestop_id(const std::string& value) {
  if (!_internal_has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    _impl_.has_operator_onestop_id_.operator_onestop_id_.InitDefault();
  }
  _impl_.has_operator_onestop_id_.operator_onestop_id_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_operator_onestop_id() {
  if (!_internal_has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
    set_has_operator_onestop_id();
    _impl_.has_operator_onestop_id_.operator_onestop_id_.InitDefault();
  }
  return _impl_.has_operator_onestop_id_.operator_onestop_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_operator_onestop_id() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_onestop_id)
  if (_internal_has_operator_onestop_id()) {
    clear_has_has_operator_onestop_id();
    return _impl_.has_operator_onestop_id_.operator_onestop_id_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_operator_onestop_id(std::string* operator_onestop_id) {
  if (has_has_operator_onestop_id()) {
    clear_has_operator_onestop_id();
  }
  if (operator_onestop_id != nullptr) {
    set_has_operator_onestop_id();
    _impl_.has_operator_onestop_id_.operator_onestop_id_.InitAllocated(operator_onestop_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_onestop_id)
}

// string operator_name = 11;
inline bool TransitRouteInfo::_internal_has_operator_name() const {
  return has_operator_name_case() == kOperatorName;
}
inline bool TransitRouteInfo::has_operator_name() const {
  return _internal_has_operator_name();
}
inline void TransitRouteInfo::set_has_operator_name() {
  _impl_._oneof_case_[10] = kOperatorName;
}
inline void TransitRouteInfo::clear_operator_name() {
  if (_internal_has_operator_name()) {
    _impl_.has_operator_name_.operator_name_.Destroy();
    clear_has_has_operator_name();
  }
}
inline const std::string& TransitRouteInfo::operator_name() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_name)
  return _internal_operator_name();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_operator_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    _impl_.has_operator_name_.operator_name_.InitDefault();
  }
  _impl_.has_operator_name_.operator_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_name)
}
inline std::string* TransitRouteInfo::mutable_operator_name() {
  std::string* _s = _internal_mutable_operator_name();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_name)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_operator_name() const {
  if (_internal_has_operator_name()) {
    return _impl_.has_operator_name_.operator_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_operator_name(const std::string& value) {
  if (!_internal_has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    _impl_.has_operator_name_.operator_name_.InitDefault();
  }
  _impl_.has_operator_name_.operator_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_operator_name() {
  if (!_internal_has_operator_name()) {
    clear_has_operator_name();
    set_has_operator_name();
    _impl_.has_operator_name_.operator_name_.InitDefault();
  }
  return _impl_.has_operator_name_.operator_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_operator_name() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_name)
  if (_internal_has_operator_name()) {
    clear_has_has_operator_name();
    return _impl_.has_operator_name_.operator_name_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_operator_name(std::string* operator_name) {
  if (has_has_operator_name()) {
    clear_has_operator_name();
  }
  if (operator_name != nullptr) {
    set_has_operator_name();
    _impl_.has_operator_name_.operator_name_.InitAllocated(operator_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_name)
}

// string operator_url = 12;
inline bool TransitRouteInfo::_internal_has_operator_url() const {
  return has_operator_url_case() == kOperatorUrl;
}
inline bool TransitRouteInfo::has_operator_url() const {
  return _internal_has_operator_url();
}
inline void TransitRouteInfo::set_has_operator_url() {
  _impl_._oneof_case_[11] = kOperatorUrl;
}
inline void TransitRouteInfo::clear_operator_url() {
  if (_internal_has_operator_url()) {
    _impl_.has_operator_url_.operator_url_.Destroy();
    clear_has_has_operator_url();
  }
}
inline const std::string& TransitRouteInfo::operator_url() const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.operator_url)
  return _internal_operator_url();
}
template <typename ArgT0, typename... ArgT>
inline void TransitRouteInfo::set_operator_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    _impl_.has_operator_url_.operator_url_.InitDefault();
  }
  _impl_.has_operator_url_.operator_url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TransitRouteInfo.operator_url)
}
inline std::string* TransitRouteInfo::mutable_operator_url() {
  std::string* _s = _internal_mutable_operator_url();
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.operator_url)
  return _s;
}
inline const std::string& TransitRouteInfo::_internal_operator_url() const {
  if (_internal_has_operator_url()) {
    return _impl_.has_operator_url_.operator_url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransitRouteInfo::_internal_set_operator_url(const std::string& value) {
  if (!_internal_has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    _impl_.has_operator_url_.operator_url_.InitDefault();
  }
  _impl_.has_operator_url_.operator_url_.Set(value, GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::_internal_mutable_operator_url() {
  if (!_internal_has_operator_url()) {
    clear_has_operator_url();
    set_has_operator_url();
    _impl_.has_operator_url_.operator_url_.InitDefault();
  }
  return _impl_.has_operator_url_.operator_url_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransitRouteInfo::release_operator_url() {
  // @@protoc_insertion_point(field_release:valhalla.TransitRouteInfo.operator_url)
  if (_internal_has_operator_url()) {
    clear_has_has_operator_url();
    return _impl_.has_operator_url_.operator_url_.Release();
  } else {
    return nullptr;
  }
}
inline void TransitRouteInfo::set_allocated_operator_url(std::string* operator_url) {
  if (has_has_operator_url()) {
    clear_has_operator_url();
  }
  if (operator_url != nullptr) {
    set_has_operator_url();
    _impl_.has_operator_url_.operator_url_.InitAllocated(operator_url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TransitRouteInfo.operator_url)
}

// repeated .valhalla.TransitPlatformInfo transit_stops = 13;
inline int TransitRouteInfo::_internal_transit_stops_size() const {
  return _impl_.transit_stops_.size();
}
inline int TransitRouteInfo::transit_stops_size() const {
  return _internal_transit_stops_size();
}
inline void TransitRouteInfo::clear_transit_stops() {
  _impl_.transit_stops_.Clear();
}
inline ::valhalla::TransitPlatformInfo* TransitRouteInfo::mutable_transit_stops(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.TransitRouteInfo.transit_stops)
  return _impl_.transit_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TransitPlatformInfo >*
TransitRouteInfo::mutable_transit_stops() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.TransitRouteInfo.transit_stops)
  return &_impl_.transit_stops_;
}
inline const ::valhalla::TransitPlatformInfo& TransitRouteInfo::_internal_transit_stops(int index) const {
  return _impl_.transit_stops_.Get(index);
}
inline const ::valhalla::TransitPlatformInfo& TransitRouteInfo::transit_stops(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.TransitRouteInfo.transit_stops)
  return _internal_transit_stops(index);
}
inline ::valhalla::TransitPlatformInfo* TransitRouteInfo::_internal_add_transit_stops() {
  return _impl_.transit_stops_.Add();
}
inline ::valhalla::TransitPlatformInfo* TransitRouteInfo::add_transit_stops() {
  ::valhalla::TransitPlatformInfo* _add = _internal_add_transit_stops();
  // @@protoc_insertion_point(field_add:valhalla.TransitRouteInfo.transit_stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::TransitPlatformInfo >&
TransitRouteInfo::transit_stops() const {
  // @@protoc_insertion_point(field_list:valhalla.TransitRouteInfo.transit_stops)
  return _impl_.transit_stops_;
}

inline bool TransitRouteInfo::has_has_onestop_id() const {
  return has_onestop_id_case() != HAS_ONESTOP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_onestop_id() {
  _impl_._oneof_case_[0] = HAS_ONESTOP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_block_id() const {
  return has_block_id_case() != HAS_BLOCK_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_block_id() {
  _impl_._oneof_case_[1] = HAS_BLOCK_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_trip_id() const {
  return has_trip_id_case() != HAS_TRIP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_trip_id() {
  _impl_._oneof_case_[2] = HAS_TRIP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_short_name() const {
  return has_short_name_case() != HAS_SHORT_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_short_name() {
  _impl_._oneof_case_[3] = HAS_SHORT_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_long_name() const {
  return has_long_name_case() != HAS_LONG_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_long_name() {
  _impl_._oneof_case_[4] = HAS_LONG_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_headsign() const {
  return has_headsign_case() != HAS_HEADSIGN_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_headsign() {
  _impl_._oneof_case_[5] = HAS_HEADSIGN_NOT_SET;
}
inline bool TransitRouteInfo::has_has_color() const {
  return has_color_case() != HAS_COLOR_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_color() {
  _impl_._oneof_case_[6] = HAS_COLOR_NOT_SET;
}
inline bool TransitRouteInfo::has_has_text_color() const {
  return has_text_color_case() != HAS_TEXT_COLOR_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_text_color() {
  _impl_._oneof_case_[7] = HAS_TEXT_COLOR_NOT_SET;
}
inline bool TransitRouteInfo::has_has_description() const {
  return has_description_case() != HAS_DESCRIPTION_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_description() {
  _impl_._oneof_case_[8] = HAS_DESCRIPTION_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_onestop_id() const {
  return has_operator_onestop_id_case() != HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_onestop_id() {
  _impl_._oneof_case_[9] = HAS_OPERATOR_ONESTOP_ID_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_name() const {
  return has_operator_name_case() != HAS_OPERATOR_NAME_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_name() {
  _impl_._oneof_case_[10] = HAS_OPERATOR_NAME_NOT_SET;
}
inline bool TransitRouteInfo::has_has_operator_url() const {
  return has_operator_url_case() != HAS_OPERATOR_URL_NOT_SET;
}
inline void TransitRouteInfo::clear_has_has_operator_url() {
  _impl_._oneof_case_[11] = HAS_OPERATOR_URL_NOT_SET;
}
inline TransitRouteInfo::HasOnestopIdCase TransitRouteInfo::has_onestop_id_case() const {
  return TransitRouteInfo::HasOnestopIdCase(_impl_._oneof_case_[0]);
}
inline TransitRouteInfo::HasBlockIdCase TransitRouteInfo::has_block_id_case() const {
  return TransitRouteInfo::HasBlockIdCase(_impl_._oneof_case_[1]);
}
inline TransitRouteInfo::HasTripIdCase TransitRouteInfo::has_trip_id_case() const {
  return TransitRouteInfo::HasTripIdCase(_impl_._oneof_case_[2]);
}
inline TransitRouteInfo::HasShortNameCase TransitRouteInfo::has_short_name_case() const {
  return TransitRouteInfo::HasShortNameCase(_impl_._oneof_case_[3]);
}
inline TransitRouteInfo::HasLongNameCase TransitRouteInfo::has_long_name_case() const {
  return TransitRouteInfo::HasLongNameCase(_impl_._oneof_case_[4]);
}
inline TransitRouteInfo::HasHeadsignCase TransitRouteInfo::has_headsign_case() const {
  return TransitRouteInfo::HasHeadsignCase(_impl_._oneof_case_[5]);
}
inline TransitRouteInfo::HasColorCase TransitRouteInfo::has_color_case() const {
  return TransitRouteInfo::HasColorCase(_impl_._oneof_case_[6]);
}
inline TransitRouteInfo::HasTextColorCase TransitRouteInfo::has_text_color_case() const {
  return TransitRouteInfo::HasTextColorCase(_impl_._oneof_case_[7]);
}
inline TransitRouteInfo::HasDescriptionCase TransitRouteInfo::has_description_case() const {
  return TransitRouteInfo::HasDescriptionCase(_impl_._oneof_case_[8]);
}
inline TransitRouteInfo::HasOperatorOnestopIdCase TransitRouteInfo::has_operator_onestop_id_case() const {
  return TransitRouteInfo::HasOperatorOnestopIdCase(_impl_._oneof_case_[9]);
}
inline TransitRouteInfo::HasOperatorNameCase TransitRouteInfo::has_operator_name_case() const {
  return TransitRouteInfo::HasOperatorNameCase(_impl_._oneof_case_[10]);
}
inline TransitRouteInfo::HasOperatorUrlCase TransitRouteInfo::has_operator_url_case() const {
  return TransitRouteInfo::HasOperatorUrlCase(_impl_._oneof_case_[11]);
}
// -------------------------------------------------------------------

// Pronunciation

// .valhalla.Pronunciation.Alphabet alphabet = 1;
inline bool Pronunciation::_internal_has_alphabet() const {
  return has_alphabet_case() == kAlphabet;
}
inline bool Pronunciation::has_alphabet() const {
  return _internal_has_alphabet();
}
inline void Pronunciation::set_has_alphabet() {
  _impl_._oneof_case_[0] = kAlphabet;
}
inline void Pronunciation::clear_alphabet() {
  if (_internal_has_alphabet()) {
    _impl_.has_alphabet_.alphabet_ = 0;
    clear_has_has_alphabet();
  }
}
inline ::valhalla::Pronunciation_Alphabet Pronunciation::_internal_alphabet() const {
  if (_internal_has_alphabet()) {
    return static_cast< ::valhalla::Pronunciation_Alphabet >(_impl_.has_alphabet_.alphabet_);
  }
  return static_cast< ::valhalla::Pronunciation_Alphabet >(0);
}
inline ::valhalla::Pronunciation_Alphabet Pronunciation::alphabet() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.alphabet)
  return _internal_alphabet();
}
inline void Pronunciation::_internal_set_alphabet(::valhalla::Pronunciation_Alphabet value) {
  if (!_internal_has_alphabet()) {
    clear_has_alphabet();
    set_has_alphabet();
  }
  _impl_.has_alphabet_.alphabet_ = value;
}
inline void Pronunciation::set_alphabet(::valhalla::Pronunciation_Alphabet value) {
  _internal_set_alphabet(value);
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.alphabet)
}

// string value = 2;
inline bool Pronunciation::_internal_has_value() const {
  return has_value_case() == kValue;
}
inline bool Pronunciation::has_value() const {
  return _internal_has_value();
}
inline void Pronunciation::set_has_value() {
  _impl_._oneof_case_[1] = kValue;
}
inline void Pronunciation::clear_value() {
  if (_internal_has_value()) {
    _impl_.has_value_.value_.Destroy();
    clear_has_has_value();
  }
}
inline const std::string& Pronunciation::value() const {
  // @@protoc_insertion_point(field_get:valhalla.Pronunciation.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline void Pronunciation::set_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.Pronunciation.value)
}
inline std::string* Pronunciation::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:valhalla.Pronunciation.value)
  return _s;
}
inline const std::string& Pronunciation::_internal_value() const {
  if (_internal_has_value()) {
    return _impl_.has_value_.value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Pronunciation::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Pronunciation::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  return _impl_.has_value_.value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Pronunciation::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.Pronunciation.value)
  if (_internal_has_value()) {
    clear_has_has_value();
    return _impl_.has_value_.value_.Release();
  } else {
    return nullptr;
  }
}
inline void Pronunciation::set_allocated_value(std::string* value) {
  if (has_has_value()) {
    clear_has_value();
  }
  if (value != nullptr) {
    set_has_value();
    _impl_.has_value_.value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.Pronunciation.value)
}

inline bool Pronunciation::has_has_alphabet() const {
  return has_alphabet_case() != HAS_ALPHABET_NOT_SET;
}
inline void Pronunciation::clear_has_has_alphabet() {
  _impl_._oneof_case_[0] = HAS_ALPHABET_NOT_SET;
}
inline bool Pronunciation::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void Pronunciation::clear_has_has_value() {
  _impl_._oneof_case_[1] = HAS_VALUE_NOT_SET;
}
inline Pronunciation::HasAlphabetCase Pronunciation::has_alphabet_case() const {
  return Pronunciation::HasAlphabetCase(_impl_._oneof_case_[0]);
}
inline Pronunciation::HasValueCase Pronunciation::has_value_case() const {
  return Pronunciation::HasValueCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// StreetName

// string value = 1;
inline bool StreetName::_internal_has_value() const {
  return has_value_case() == kValue;
}
inline bool StreetName::has_value() const {
  return _internal_has_value();
}
inline void StreetName::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void StreetName::clear_value() {
  if (_internal_has_value()) {
    _impl_.has_value_.value_.Destroy();
    clear_has_has_value();
  }
}
inline const std::string& StreetName::value() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline void StreetName::set_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.StreetName.value)
}
inline std::string* StreetName::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.value)
  return _s;
}
inline const std::string& StreetName::_internal_value() const {
  if (_internal_has_value()) {
    return _impl_.has_value_.value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreetName::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StreetName::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  return _impl_.has_value_.value_.Mutable(      GetArenaForAllocation());
}
inline std::string* StreetName::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.value)
  if (_internal_has_value()) {
    clear_has_has_value();
    return _impl_.has_value_.value_.Release();
  } else {
    return nullptr;
  }
}
inline void StreetName::set_allocated_value(std::string* value) {
  if (has_has_value()) {
    clear_has_value();
  }
  if (value != nullptr) {
    set_has_value();
    _impl_.has_value_.value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.value)
}

// bool is_route_number = 2;
inline bool StreetName::_internal_has_is_route_number() const {
  return has_is_route_number_case() == kIsRouteNumber;
}
inline bool StreetName::has_is_route_number() const {
  return _internal_has_is_route_number();
}
inline void StreetName::set_has_is_route_number() {
  _impl_._oneof_case_[1] = kIsRouteNumber;
}
inline void StreetName::clear_is_route_number() {
  if (_internal_has_is_route_number()) {
    _impl_.has_is_route_number_.is_route_number_ = false;
    clear_has_has_is_route_number();
  }
}
inline bool StreetName::_internal_is_route_number() const {
  if (_internal_has_is_route_number()) {
    return _impl_.has_is_route_number_.is_route_number_;
  }
  return false;
}
inline void StreetName::_internal_set_is_route_number(bool value) {
  if (!_internal_has_is_route_number()) {
    clear_has_is_route_number();
    set_has_is_route_number();
  }
  _impl_.has_is_route_number_.is_route_number_ = value;
}
inline bool StreetName::is_route_number() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.is_route_number)
  return _internal_is_route_number();
}
inline void StreetName::set_is_route_number(bool value) {
  _internal_set_is_route_number(value);
  // @@protoc_insertion_point(field_set:valhalla.StreetName.is_route_number)
}

// .valhalla.Pronunciation pronunciation = 3;
inline bool StreetName::_internal_has_pronunciation() const {
  return this != internal_default_instance() && _impl_.pronunciation_ != nullptr;
}
inline bool StreetName::has_pronunciation() const {
  return _internal_has_pronunciation();
}
inline void StreetName::clear_pronunciation() {
  if (GetArenaForAllocation() == nullptr && _impl_.pronunciation_ != nullptr) {
    delete _impl_.pronunciation_;
  }
  _impl_.pronunciation_ = nullptr;
}
inline const ::valhalla::Pronunciation& StreetName::_internal_pronunciation() const {
  const ::valhalla::Pronunciation* p = _impl_.pronunciation_;
  return p != nullptr ? *p : reinterpret_cast<const ::valhalla::Pronunciation&>(
      ::valhalla::_Pronunciation_default_instance_);
}
inline const ::valhalla::Pronunciation& StreetName::pronunciation() const {
  // @@protoc_insertion_point(field_get:valhalla.StreetName.pronunciation)
  return _internal_pronunciation();
}
inline void StreetName::unsafe_arena_set_allocated_pronunciation(
    ::valhalla::Pronunciation* pronunciation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pronunciation_);
  }
  _impl_.pronunciation_ = pronunciation;
  if (pronunciation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:valhalla.StreetName.pronunciation)
}
inline ::valhalla::Pronunciation* StreetName::release_pronunciation() {
  
  ::valhalla::Pronunciation* temp = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::valhalla::Pronunciation* StreetName::unsafe_arena_release_pronunciation() {
  // @@protoc_insertion_point(field_release:valhalla.StreetName.pronunciation)
  
  ::valhalla::Pronunciation* temp = _impl_.pronunciation_;
  _impl_.pronunciation_ = nullptr;
  return temp;
}
inline ::valhalla::Pronunciation* StreetName::_internal_mutable_pronunciation() {
  
  if (_impl_.pronunciation_ == nullptr) {
    auto* p = CreateMaybeMessage<::valhalla::Pronunciation>(GetArenaForAllocation());
    _impl_.pronunciation_ = p;
  }
  return _impl_.pronunciation_;
}
inline ::valhalla::Pronunciation* StreetName::mutable_pronunciation() {
  ::valhalla::Pronunciation* _msg = _internal_mutable_pronunciation();
  // @@protoc_insertion_point(field_mutable:valhalla.StreetName.pronunciation)
  return _msg;
}
inline void StreetName::set_allocated_pronunciation(::valhalla::Pronunciation* pronunciation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pronunciation_;
  }
  if (pronunciation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pronunciation);
    if (message_arena != submessage_arena) {
      pronunciation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pronunciation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pronunciation_ = pronunciation;
  // @@protoc_insertion_point(field_set_allocated:valhalla.StreetName.pronunciation)
}

inline bool StreetName::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void StreetName::clear_has_has_value() {
  _impl_._oneof_case_[0] = HAS_VALUE_NOT_SET;
}
inline bool StreetName::has_has_is_route_number() const {
  return has_is_route_number_case() != HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline void StreetName::clear_has_has_is_route_number() {
  _impl_._oneof_case_[1] = HAS_IS_ROUTE_NUMBER_NOT_SET;
}
inline StreetName::HasValueCase StreetName::has_value_case() const {
  return StreetName::HasValueCase(_impl_._oneof_case_[0]);
}
inline StreetName::HasIsRouteNumberCase StreetName::has_is_route_number_case() const {
  return StreetName::HasIsRouteNumberCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// TurnLane

// uint32 directions_mask = 1;
inline bool TurnLane::_internal_has_directions_mask() const {
  return has_directions_mask_case() == kDirectionsMask;
}
inline bool TurnLane::has_directions_mask() const {
  return _internal_has_directions_mask();
}
inline void TurnLane::set_has_directions_mask() {
  _impl_._oneof_case_[0] = kDirectionsMask;
}
inline void TurnLane::clear_directions_mask() {
  if (_internal_has_directions_mask()) {
    _impl_.has_directions_mask_.directions_mask_ = 0u;
    clear_has_has_directions_mask();
  }
}
inline uint32_t TurnLane::_internal_directions_mask() const {
  if (_internal_has_directions_mask()) {
    return _impl_.has_directions_mask_.directions_mask_;
  }
  return 0u;
}
inline void TurnLane::_internal_set_directions_mask(uint32_t value) {
  if (!_internal_has_directions_mask()) {
    clear_has_directions_mask();
    set_has_directions_mask();
  }
  _impl_.has_directions_mask_.directions_mask_ = value;
}
inline uint32_t TurnLane::directions_mask() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.directions_mask)
  return _internal_directions_mask();
}
inline void TurnLane::set_directions_mask(uint32_t value) {
  _internal_set_directions_mask(value);
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.directions_mask)
}

// .valhalla.TurnLane.State state = 2;
inline bool TurnLane::_internal_has_state() const {
  return has_state_case() == kState;
}
inline bool TurnLane::has_state() const {
  return _internal_has_state();
}
inline void TurnLane::set_has_state() {
  _impl_._oneof_case_[1] = kState;
}
inline void TurnLane::clear_state() {
  if (_internal_has_state()) {
    _impl_.has_state_.state_ = 0;
    clear_has_has_state();
  }
}
inline ::valhalla::TurnLane_State TurnLane::_internal_state() const {
  if (_internal_has_state()) {
    return static_cast< ::valhalla::TurnLane_State >(_impl_.has_state_.state_);
  }
  return static_cast< ::valhalla::TurnLane_State >(0);
}
inline ::valhalla::TurnLane_State TurnLane::state() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.state)
  return _internal_state();
}
inline void TurnLane::_internal_set_state(::valhalla::TurnLane_State value) {
  if (!_internal_has_state()) {
    clear_has_state();
    set_has_state();
  }
  _impl_.has_state_.state_ = value;
}
inline void TurnLane::set_state(::valhalla::TurnLane_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.state)
}

// uint32 active_direction = 3;
inline bool TurnLane::_internal_has_active_direction() const {
  return has_active_direction_case() == kActiveDirection;
}
inline bool TurnLane::has_active_direction() const {
  return _internal_has_active_direction();
}
inline void TurnLane::set_has_active_direction() {
  _impl_._oneof_case_[2] = kActiveDirection;
}
inline void TurnLane::clear_active_direction() {
  if (_internal_has_active_direction()) {
    _impl_.has_active_direction_.active_direction_ = 0u;
    clear_has_has_active_direction();
  }
}
inline uint32_t TurnLane::_internal_active_direction() const {
  if (_internal_has_active_direction()) {
    return _impl_.has_active_direction_.active_direction_;
  }
  return 0u;
}
inline void TurnLane::_internal_set_active_direction(uint32_t value) {
  if (!_internal_has_active_direction()) {
    clear_has_active_direction();
    set_has_active_direction();
  }
  _impl_.has_active_direction_.active_direction_ = value;
}
inline uint32_t TurnLane::active_direction() const {
  // @@protoc_insertion_point(field_get:valhalla.TurnLane.active_direction)
  return _internal_active_direction();
}
inline void TurnLane::set_active_direction(uint32_t value) {
  _internal_set_active_direction(value);
  // @@protoc_insertion_point(field_set:valhalla.TurnLane.active_direction)
}

inline bool TurnLane::has_has_directions_mask() const {
  return has_directions_mask_case() != HAS_DIRECTIONS_MASK_NOT_SET;
}
inline void TurnLane::clear_has_has_directions_mask() {
  _impl_._oneof_case_[0] = HAS_DIRECTIONS_MASK_NOT_SET;
}
inline bool TurnLane::has_has_state() const {
  return has_state_case() != HAS_STATE_NOT_SET;
}
inline void TurnLane::clear_has_has_state() {
  _impl_._oneof_case_[1] = HAS_STATE_NOT_SET;
}
inline bool TurnLane::has_has_active_direction() const {
  return has_active_direction_case() != HAS_ACTIVE_DIRECTION_NOT_SET;
}
inline void TurnLane::clear_has_has_active_direction() {
  _impl_._oneof_case_[2] = HAS_ACTIVE_DIRECTION_NOT_SET;
}
inline TurnLane::HasDirectionsMaskCase TurnLane::has_directions_mask_case() const {
  return TurnLane::HasDirectionsMaskCase(_impl_._oneof_case_[0]);
}
inline TurnLane::HasStateCase TurnLane::has_state_case() const {
  return TurnLane::HasStateCase(_impl_._oneof_case_[1]);
}
inline TurnLane::HasActiveDirectionCase TurnLane::has_active_direction_case() const {
  return TurnLane::HasActiveDirectionCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// TaggedValue

// bytes value = 1;
inline bool TaggedValue::_internal_has_value() const {
  return has_value_case() == kValue;
}
inline bool TaggedValue::has_value() const {
  return _internal_has_value();
}
inline void TaggedValue::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void TaggedValue::clear_value() {
  if (_internal_has_value()) {
    _impl_.has_value_.value_.Destroy();
    clear_has_has_value();
  }
}
inline const std::string& TaggedValue::value() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline void TaggedValue::set_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.value)
}
inline std::string* TaggedValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:valhalla.TaggedValue.value)
  return _s;
}
inline const std::string& TaggedValue::_internal_value() const {
  if (_internal_has_value()) {
    return _impl_.has_value_.value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TaggedValue::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  _impl_.has_value_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* TaggedValue::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_has_value();
    set_has_value();
    _impl_.has_value_.value_.InitDefault();
  }
  return _impl_.has_value_.value_.Mutable(      GetArenaForAllocation());
}
inline std::string* TaggedValue::release_value() {
  // @@protoc_insertion_point(field_release:valhalla.TaggedValue.value)
  if (_internal_has_value()) {
    clear_has_has_value();
    return _impl_.has_value_.value_.Release();
  } else {
    return nullptr;
  }
}
inline void TaggedValue::set_allocated_value(std::string* value) {
  if (has_has_value()) {
    clear_has_value();
  }
  if (value != nullptr) {
    set_has_value();
    _impl_.has_value_.value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:valhalla.TaggedValue.value)
}

// .valhalla.TaggedValue.Type type = 2;
inline bool TaggedValue::_internal_has_type() const {
  return has_type_case() == kType;
}
inline bool TaggedValue::has_type() const {
  return _internal_has_type();
}
inline void TaggedValue::set_has_type() {
  _impl_._oneof_case_[1] = kType;
}
inline void TaggedValue::clear_type() {
  if (_internal_has_type()) {
    _impl_.has_type_.type_ = 0;
    clear_has_has_type();
  }
}
inline ::valhalla::TaggedValue_Type TaggedValue::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::valhalla::TaggedValue_Type >(_impl_.has_type_.type_);
  }
  return static_cast< ::valhalla::TaggedValue_Type >(0);
}
inline ::valhalla::TaggedValue_Type TaggedValue::type() const {
  // @@protoc_insertion_point(field_get:valhalla.TaggedValue.type)
  return _internal_type();
}
inline void TaggedValue::_internal_set_type(::valhalla::TaggedValue_Type value) {
  if (!_internal_has_type()) {
    clear_has_type();
    set_has_type();
  }
  _impl_.has_type_.type_ = value;
}
inline void TaggedValue::set_type(::valhalla::TaggedValue_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:valhalla.TaggedValue.type)
}

inline bool TaggedValue::has_has_value() const {
  return has_value_case() != HAS_VALUE_NOT_SET;
}
inline void TaggedValue::clear_has_has_value() {
  _impl_._oneof_case_[0] = HAS_VALUE_NOT_SET;
}
inline bool TaggedValue::has_has_type() const {
  return has_type_case() != HAS_TYPE_NOT_SET;
}
inline void TaggedValue::clear_has_has_type() {
  _impl_._oneof_case_[1] = HAS_TYPE_NOT_SET;
}
inline TaggedValue::HasValueCase TaggedValue::has_value_case() const {
  return TaggedValue::HasValueCase(_impl_._oneof_case_[0]);
}
inline TaggedValue::HasTypeCase TaggedValue::has_type_case() const {
  return TaggedValue::HasTypeCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::valhalla::Location_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::Location_SideOfStreet> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::Location_PreferredSide> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::TransitPlatformInfo_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::Pronunciation_Alphabet> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::TurnLane_State> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::TaggedValue_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::RoadClass> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::TravelMode> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::VehicleType> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::PedestrianType> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::BicycleType> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::TransitType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tripcommon_2eproto
