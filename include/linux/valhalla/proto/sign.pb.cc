// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sign.proto

#include "sign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace valhalla {
PROTOBUF_CONSTEXPR TripSignElement::TripSignElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pronunciation_)*/nullptr
  , /*decltype(_impl_.is_route_number_)*/false
  , /*decltype(_impl_.consecutive_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripSignElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignElementDefaultTypeInternal() {}
  union {
    TripSignElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;
PROTOBUF_CONSTEXPR TripSign::TripSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exit_numbers_)*/{}
  , /*decltype(_impl_.exit_onto_streets_)*/{}
  , /*decltype(_impl_.exit_toward_locations_)*/{}
  , /*decltype(_impl_.exit_names_)*/{}
  , /*decltype(_impl_.guide_onto_streets_)*/{}
  , /*decltype(_impl_.guide_toward_locations_)*/{}
  , /*decltype(_impl_.junction_names_)*/{}
  , /*decltype(_impl_.guidance_view_junctions_)*/{}
  , /*decltype(_impl_.guidance_view_signboards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignDefaultTypeInternal() {}
  union {
    TripSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignDefaultTypeInternal _TripSign_default_instance_;
}  // namespace valhalla
namespace valhalla {

// ===================================================================

class TripSignElement::_Internal {
 public:
  static const ::valhalla::Pronunciation& pronunciation(const TripSignElement* msg);
};

const ::valhalla::Pronunciation&
TripSignElement::_Internal::pronunciation(const TripSignElement* msg) {
  return *msg->_impl_.pronunciation_;
}
void TripSignElement::clear_pronunciation() {
  if (GetArenaForAllocation() == nullptr && _impl_.pronunciation_ != nullptr) {
    delete _impl_.pronunciation_;
  }
  _impl_.pronunciation_ = nullptr;
}
TripSignElement::TripSignElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSignElement)
}
TripSignElement::TripSignElement(const TripSignElement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TripSignElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.pronunciation_){nullptr}
    , decltype(_impl_.is_route_number_){}
    , decltype(_impl_.consecutive_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pronunciation()) {
    _this->_impl_.pronunciation_ = new ::valhalla::Pronunciation(*from._impl_.pronunciation_);
  }
  ::memcpy(&_impl_.is_route_number_, &from._impl_.is_route_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.consecutive_count_) -
    reinterpret_cast<char*>(&_impl_.is_route_number_)) + sizeof(_impl_.consecutive_count_));
  // @@protoc_insertion_point(copy_constructor:valhalla.TripSignElement)
}

inline void TripSignElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.pronunciation_){nullptr}
    , decltype(_impl_.is_route_number_){false}
    , decltype(_impl_.consecutive_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TripSignElement::~TripSignElement() {
  // @@protoc_insertion_point(destructor:valhalla.TripSignElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripSignElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pronunciation_;
}

void TripSignElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripSignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSignElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pronunciation_ != nullptr) {
    delete _impl_.pronunciation_;
  }
  _impl_.pronunciation_ = nullptr;
  ::memset(&_impl_.is_route_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.consecutive_count_) -
      reinterpret_cast<char*>(&_impl_.is_route_number_)) + sizeof(_impl_.consecutive_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* TripSignElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_route_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_route_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 consecutive_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.consecutive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .valhalla.Pronunciation pronunciation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pronunciation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripSignElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSignElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "valhalla.TripSignElement.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // bool is_route_number = 2;
  if (this->_internal_is_route_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_route_number(), target);
  }

  // uint32 consecutive_count = 3;
  if (this->_internal_consecutive_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_consecutive_count(), target);
  }

  // .valhalla.Pronunciation pronunciation = 4;
  if (this->_internal_has_pronunciation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pronunciation(this),
        _Internal::pronunciation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSignElement)
  return target;
}

size_t TripSignElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSignElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .valhalla.Pronunciation pronunciation = 4;
  if (this->_internal_has_pronunciation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pronunciation_);
  }

  // bool is_route_number = 2;
  if (this->_internal_is_route_number() != 0) {
    total_size += 1 + 1;
  }

  // uint32 consecutive_count = 3;
  if (this->_internal_consecutive_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_consecutive_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripSignElement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TripSignElement*>(
      &from));
}

void TripSignElement::MergeFrom(const TripSignElement& from) {
  TripSignElement* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSignElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_has_pronunciation()) {
    _this->_internal_mutable_pronunciation()->::valhalla::Pronunciation::MergeFrom(
        from._internal_pronunciation());
  }
  if (from._internal_is_route_number() != 0) {
    _this->_internal_set_is_route_number(from._internal_is_route_number());
  }
  if (from._internal_consecutive_count() != 0) {
    _this->_internal_set_consecutive_count(from._internal_consecutive_count());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSignElement::CopyFrom(const TripSignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripSignElement::IsInitialized() const {
  return true;
}

void TripSignElement::InternalSwap(TripSignElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_)
      + sizeof(TripSignElement::_impl_.consecutive_count_)
      - PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_)>(
          reinterpret_cast<char*>(&_impl_.pronunciation_),
          reinterpret_cast<char*>(&other->_impl_.pronunciation_));
}

std::string TripSignElement::GetTypeName() const {
  return "valhalla.TripSignElement";
}


// ===================================================================

class TripSign::_Internal {
 public:
};

TripSign::TripSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSign)
}
TripSign::TripSign(const TripSign& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  TripSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_numbers_){from._impl_.exit_numbers_}
    , decltype(_impl_.exit_onto_streets_){from._impl_.exit_onto_streets_}
    , decltype(_impl_.exit_toward_locations_){from._impl_.exit_toward_locations_}
    , decltype(_impl_.exit_names_){from._impl_.exit_names_}
    , decltype(_impl_.guide_onto_streets_){from._impl_.guide_onto_streets_}
    , decltype(_impl_.guide_toward_locations_){from._impl_.guide_toward_locations_}
    , decltype(_impl_.junction_names_){from._impl_.junction_names_}
    , decltype(_impl_.guidance_view_junctions_){from._impl_.guidance_view_junctions_}
    , decltype(_impl_.guidance_view_signboards_){from._impl_.guidance_view_signboards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:valhalla.TripSign)
}

inline void TripSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_numbers_){arena}
    , decltype(_impl_.exit_onto_streets_){arena}
    , decltype(_impl_.exit_toward_locations_){arena}
    , decltype(_impl_.exit_names_){arena}
    , decltype(_impl_.guide_onto_streets_){arena}
    , decltype(_impl_.guide_toward_locations_){arena}
    , decltype(_impl_.junction_names_){arena}
    , decltype(_impl_.guidance_view_junctions_){arena}
    , decltype(_impl_.guidance_view_signboards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TripSign::~TripSign() {
  // @@protoc_insertion_point(destructor:valhalla.TripSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exit_numbers_.~RepeatedPtrField();
  _impl_.exit_onto_streets_.~RepeatedPtrField();
  _impl_.exit_toward_locations_.~RepeatedPtrField();
  _impl_.exit_names_.~RepeatedPtrField();
  _impl_.guide_onto_streets_.~RepeatedPtrField();
  _impl_.guide_toward_locations_.~RepeatedPtrField();
  _impl_.junction_names_.~RepeatedPtrField();
  _impl_.guidance_view_junctions_.~RepeatedPtrField();
  _impl_.guidance_view_signboards_.~RepeatedPtrField();
}

void TripSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripSign::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exit_numbers_.Clear();
  _impl_.exit_onto_streets_.Clear();
  _impl_.exit_toward_locations_.Clear();
  _impl_.exit_names_.Clear();
  _impl_.guide_onto_streets_.Clear();
  _impl_.guide_toward_locations_.Clear();
  _impl_.junction_names_.Clear();
  _impl_.guidance_view_junctions_.Clear();
  _impl_.guidance_view_signboards_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TripSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .valhalla.TripSignElement exit_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_numbers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement exit_onto_streets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_onto_streets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement exit_toward_locations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_toward_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement exit_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exit_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement guide_onto_streets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guide_onto_streets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement guide_toward_locations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guide_toward_locations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement junction_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guidance_view_junctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guidance_view_signboards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_numbers_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_numbers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_onto_streets_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_onto_streets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_toward_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_toward_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement exit_names = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exit_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_exit_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guide_onto_streets_size()); i < n; i++) {
    const auto& repfield = this->_internal_guide_onto_streets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guide_toward_locations_size()); i < n; i++) {
    const auto& repfield = this->_internal_guide_toward_locations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement junction_names = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_junction_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_junction_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guidance_view_junctions_size()); i < n; i++) {
    const auto& repfield = this->_internal_guidance_view_junctions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guidance_view_signboards_size()); i < n; i++) {
    const auto& repfield = this->_internal_guidance_view_signboards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSign)
  return target;
}

size_t TripSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:valhalla.TripSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .valhalla.TripSignElement exit_numbers = 1;
  total_size += 1UL * this->_internal_exit_numbers_size();
  for (const auto& msg : this->_impl_.exit_numbers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement exit_onto_streets = 2;
  total_size += 1UL * this->_internal_exit_onto_streets_size();
  for (const auto& msg : this->_impl_.exit_onto_streets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement exit_toward_locations = 3;
  total_size += 1UL * this->_internal_exit_toward_locations_size();
  for (const auto& msg : this->_impl_.exit_toward_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement exit_names = 4;
  total_size += 1UL * this->_internal_exit_names_size();
  for (const auto& msg : this->_impl_.exit_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement guide_onto_streets = 5;
  total_size += 1UL * this->_internal_guide_onto_streets_size();
  for (const auto& msg : this->_impl_.guide_onto_streets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement guide_toward_locations = 6;
  total_size += 1UL * this->_internal_guide_toward_locations_size();
  for (const auto& msg : this->_impl_.guide_toward_locations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement junction_names = 7;
  total_size += 1UL * this->_internal_junction_names_size();
  for (const auto& msg : this->_impl_.junction_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
  total_size += 1UL * this->_internal_guidance_view_junctions_size();
  for (const auto& msg : this->_impl_.guidance_view_junctions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
  total_size += 1UL * this->_internal_guidance_view_signboards_size();
  for (const auto& msg : this->_impl_.guidance_view_signboards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TripSign::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TripSign*>(
      &from));
}

void TripSign::MergeFrom(const TripSign& from) {
  TripSign* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exit_numbers_.MergeFrom(from._impl_.exit_numbers_);
  _this->_impl_.exit_onto_streets_.MergeFrom(from._impl_.exit_onto_streets_);
  _this->_impl_.exit_toward_locations_.MergeFrom(from._impl_.exit_toward_locations_);
  _this->_impl_.exit_names_.MergeFrom(from._impl_.exit_names_);
  _this->_impl_.guide_onto_streets_.MergeFrom(from._impl_.guide_onto_streets_);
  _this->_impl_.guide_toward_locations_.MergeFrom(from._impl_.guide_toward_locations_);
  _this->_impl_.junction_names_.MergeFrom(from._impl_.junction_names_);
  _this->_impl_.guidance_view_junctions_.MergeFrom(from._impl_.guidance_view_junctions_);
  _this->_impl_.guidance_view_signboards_.MergeFrom(from._impl_.guidance_view_signboards_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSign::CopyFrom(const TripSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripSign::IsInitialized() const {
  return true;
}

void TripSign::InternalSwap(TripSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exit_numbers_.InternalSwap(&other->_impl_.exit_numbers_);
  _impl_.exit_onto_streets_.InternalSwap(&other->_impl_.exit_onto_streets_);
  _impl_.exit_toward_locations_.InternalSwap(&other->_impl_.exit_toward_locations_);
  _impl_.exit_names_.InternalSwap(&other->_impl_.exit_names_);
  _impl_.guide_onto_streets_.InternalSwap(&other->_impl_.guide_onto_streets_);
  _impl_.guide_toward_locations_.InternalSwap(&other->_impl_.guide_toward_locations_);
  _impl_.junction_names_.InternalSwap(&other->_impl_.junction_names_);
  _impl_.guidance_view_junctions_.InternalSwap(&other->_impl_.guidance_view_junctions_);
  _impl_.guidance_view_signboards_.InternalSwap(&other->_impl_.guidance_view_signboards_);
}

std::string TripSign::GetTypeName() const {
  return "valhalla.TripSign";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::valhalla::TripSignElement*
Arena::CreateMaybeMessage< ::valhalla::TripSignElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TripSignElement >(arena);
}
template<> PROTOBUF_NOINLINE ::valhalla::TripSign*
Arena::CreateMaybeMessage< ::valhalla::TripSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::valhalla::TripSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
